const { Markup } = require('telegraf');
const Question = require('../models/Question');
const { checkAdmin } = require('./adminController');

exports.handleQuestion = async (ctx) => {
  if (ctx.message.text.startsWith('/') || !ctx.message.text) return;

  try {
    await Question.create({
      userId: ctx.from.id,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      questionText: ctx.message.text
    });
    
    await ctx.reply('‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.');
    await notifyAdminAboutQuestion(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', err);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å');
  }
};

async function notifyAdminAboutQuestion(ctx) {
  try {
    await ctx.telegram.sendMessage(
      process.env.ADMIN_ID,
      `‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç ${ctx.from.first_name} (@${ctx.from.username || '–Ω–µ—Ç'}):\n\n` +
      `"${ctx.message.text}"\n\n` +
      `ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from.id}`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìù –û—Ç–≤–µ—Ç–∏—Ç—å', `answer_${ctx.from.id}`)],
        [Markup.button.callback('üëÄ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', 'pending_questions')]
      ])
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', err);
  }
}

exports.handleAnswer = async (ctx, userId, answerText) => {
  if (!checkAdmin(ctx)) {
    return ctx.reply('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  try {
    const question = await Question.findOneAndUpdate(
      { userId, status: 'pending' },
      { 
        answerText,
        status: 'answered',
        answeredAt: new Date() 
      },
      { new: true }
    );
    
    if (!question) {
      return ctx.reply('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    await ctx.telegram.sendMessage(
      userId,
      `üì© –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n${answerText}\n\n` +
      `–í–∞—à –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: "${question.questionText}"`
    );
    
    await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', err);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç');
  }
};