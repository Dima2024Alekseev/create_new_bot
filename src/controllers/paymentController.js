const User = require('../models/User');
const { Markup } = require('telegraf');
const { checkAdmin } = require('../utils/auth');
const { formatDate, escapeMarkdown, transliterate } = require('../utils/helpers');
const { createVpnClient, enableVpnClient } = require('../services/vpnService');
const path = require('path');
const bot = require('../bot');

class PaymentController {
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
     */
    async handlePhoto(ctx) {
        if (!ctx.session.awaitingPaymentProof) {
            const userId = ctx.from.id;
            const user = await User.findOne({ userId });

            if (user && user.status === 'active') {
                return ctx.reply(
                    '‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ—ë –ø—Ä–æ–¥–ª–∏—Ç—å, ' +
                    '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (/start).'
                );
            }
            return ctx.reply(
                '‚ö†Ô∏è –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ' +
                '–∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (/start).'
            );
        }

        const { id, first_name, username } = ctx.from;

        // –ê–¥–º–∏–Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        if (id === parseInt(process.env.ADMIN_ID)) {
            return ctx.reply('–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.');
        }

        const user = await User.findOne({ userId: id });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –æ–∂–∏–¥–∞—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç—ë–∂
        if (user && user.status === 'pending') {
            ctx.session.awaitingPaymentProof = false;
            return ctx.reply(
                '‚è≥ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
            );
        }

        const photo = ctx.message.photo.pop();

        try {
            await User.findOneAndUpdate(
                { userId: id },
                {
                    userId: id,
                    username: username || first_name,
                    firstName: first_name,
                    paymentPhotoId: photo.file_id,
                    paymentPhotoDate: new Date(),
                    status: 'pending',
                    rejectionReason: null,
                    rejectedByAdmin: false
                },
                { upsert: true, new: true }
            );

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${id}`)],
                [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)]
            ]);

            let userDisplay = '';
            const safeFirstName = escapeMarkdown(first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');

            if (username) {
                userDisplay = `${safeFirstName} (@${escapeMarkdown(username)})`;
            } else {
                userDisplay = `${safeFirstName} (–±–µ–∑ username)`;
            }

            if (!first_name && !username) {
                userDisplay = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`;
            }

            await ctx.telegram.sendPhoto(
                process.env.ADMIN_ID,
                photo.file_id,
                {
                    caption: `üì∏ *–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
                        `–ò–º—è: ${userDisplay}\n` +
                        `ID: ${id}`,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard.reply_markup
                }
            );

            await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
            ctx.session.awaitingPaymentProof = false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ/–ø–ª–∞—Ç–µ–∂–∞:', error);
            await ctx.reply(
                '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
            ctx.session.awaitingPaymentProof = false;
        }
    }

    /**
     * –û–¥–æ–±—Ä—è–µ—Ç –ø–ª–∞—Ç—ë–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleApprove(ctx) {
        if (!checkAdmin(ctx)) {
            return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
        }

        const userId = parseInt(ctx.match[1]);

        try {
            const user = await User.findOne({ userId });

            let newExpireDate = new Date();
            if (user && user.expireDate && user.expireDate > new Date()) {
                newExpireDate = new Date(user.expireDate);
            }

            newExpireDate.setMonth(newExpireDate.getMonth() + 1);
            newExpireDate.setHours(23, 59, 59, 999);

            let clientName = null;
            if (user.subscriptionCount === 0) {
                if (user.username) {
                    clientName = transliterate(user.username).replace(/[^a-zA-Z0-9_]/g, '');
                }
                if (!clientName) {
                    clientName = `telegram_${userId}`;
                }
            } else {
                clientName = user.vpnClientName;
            }

            const updateData = {
                status: 'active',
                expireDate: newExpireDate,
                paymentPhotoId: null,
                paymentPhotoDate: null,
                rejectionReason: null,
                rejectedByAdmin: false,
                $inc: { subscriptionCount: 1 }
            };

            if (user.subscriptionCount === 0) {
                updateData.vpnClientName = clientName;
                updateData.vpnConfigured = false;
            }

            const updatedUser = await User.findOneAndUpdate(
                { userId },
                updateData,
                { new: true, upsert: true }
            );

            await ctx.answerCbQuery('‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç');
            await ctx.deleteMessage();

            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            if (updatedUser.subscriptionCount === 1) {
                try {
                    const configContent = await createVpnClient(clientName);

                    await ctx.telegram.sendMessage(
                        userId,
                        `üéâ *–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!* üéâ\n\n` +
                        `–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ *${formatDate(newExpireDate, true)}*\n\n` +
                        `üìÅ –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN –∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ.`,
                        { parse_mode: 'Markdown' }
                    );

                    await ctx.telegram.sendDocument(
                        userId,
                        { source: Buffer.from(configContent), filename: `${clientName}.conf` }
                    );

                    const videoPath = path.join(__dirname, '..', 'videos', 'instruction.mp4');
                    await ctx.telegram.sendVideo(
                        userId,
                        { source: videoPath },
                        { caption: 'üé¨ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN' }
                    );

                    await ctx.telegram.sendMessage(
                        userId,
                        '–ï—Å–ª–∏ –≤—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:',
                        Markup.inlineKeyboard([
                            [
                                Markup.button.callback('‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª', `vpn_configured_${userId}`),
                                Markup.button.callback('‚ùå –ù–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π', `vpn_failed_${userId}`)
                            ]
                        ])
                    );

                    await ctx.telegram.sendMessage(
                        process.env.ADMIN_ID,
                        `‚úÖ *VPN-–¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n` +
                        `–ò–º—è: ${updatedUser.firstName || updatedUser.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                        `ID: ${userId}\n` +
                        `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${formatDate(newExpireDate, true)}`,
                        { parse_mode: 'Markdown' }
                    );
                } catch (vpnError) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –¥–ª—è ${userId}:`, vpnError);
                    await ctx.telegram.sendMessage(
                        userId,
                        `‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN.*\n` +
                        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
                    );
                    await ctx.telegram.sendMessage(
                        process.env.ADMIN_ID,
                        `üö® *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN –¥–ª—è ${userId}:*\n` +
                        `\`\`\`\n${vpnError.stack}\n\`\`\``,
                        { parse_mode: 'Markdown' }
                    );
                }
            } else {
                // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                try {
                    await enableVpnClient(clientName);
                    console.log(`VPN –≤–∫–ª—é—á—ë–Ω –¥–ª—è ${clientName}`);
                } catch (vpnError) {
                    console.error(`–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è VPN –¥–ª—è ${clientName}:`, vpnError);
                }

                await ctx.telegram.sendMessage(
                    userId,
                    `üéâ *–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!* üéâ\n\n` +
                    `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ *${formatDate(newExpireDate, true)}*.`,
                    { parse_mode: 'Markdown' }
                );
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è ${userId}:`, error);
            await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!');
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
        }
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
     */
    async handleReject(ctx) {
        if (!checkAdmin(ctx)) {
            return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
        }

        const userId = parseInt(ctx.match[1]);
        try {
            await User.findOneAndUpdate(
                { userId },
                {
                    status: 'rejected',
                    rejectedByAdmin: true,
                    paymentPhotoId: null,
                    paymentPhotoDate: null
                }
            );

            await ctx.deleteMessage();

            await ctx.replyWithMarkdown(
                `‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–ª–∞—Ç—ë–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}.`,
                Markup.inlineKeyboard([
                    [
                        Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `add_reject_comment_${userId}`),
                        Markup.button.callback('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', `undo_reject_${userId}`)
                    ],
                    [
                        Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', `confirm_reject_${userId}`)
                    ]
                ])
            );

            await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è ${userId}:`, error);
            await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞!');
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
     */
    async sendRejectionMessage(userId, customReason = null) {
        const user = await User.findOne({ userId });

        let message = '‚ùå *–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω*';

        if (customReason) {
            message += `\n\n–ü—Ä–∏—á–∏–Ω–∞: ${customReason}`;
        } else if (user.rejectionReason) {
            message += `\n\n–ü—Ä–∏—á–∏–Ω–∞: ${user.rejectionReason}`;
        } else {
            message += '\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
                '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
                '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–ª–∞—Ç–µ–∂—É\n' +
                '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
                '*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑.*';
        }

        try {
            await bot.telegram.sendMessage(
                userId,
                message,
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
        }
    }

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
     */
    async undoRejection(userId) {
        await User.findOneAndUpdate(
            { userId },
            {
                status: 'pending',
                rejectedByAdmin: false,
                rejectionReason: null
            }
        );
    }
}

module.exports = new PaymentController();