const axios = require('axios');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
  BASE_URL: 'http://37.233.85.212:51821',
  PASSWORD: process.env.WG_API_PASSWORD,
  SERVER_PUBLIC_KEY: '+VmjO9mBKNMW7G7sdn6Haqxzx2YXgi592/LfepbRLDU=',
  TIMEOUT: 15000
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
let sessionCookie = null;
// –§–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
let isAuthorizing = false;
let authPromise = null;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Axios
const api = axios.create({
  baseURL: API_CONFIG.BASE_URL,
  timeout: API_CONFIG.TIMEOUT,
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π
api.interceptors.request.use(async (config) => {
  if (!sessionCookie) {
    console.log('üîó –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    await ensureAuthenticated();
  }
  config.headers.Cookie = sessionCookie;
  return config;
}, error => {
  return Promise.reject(error);
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.response.use(response => response, async (error) => {
  const originalRequest = error.config;
  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 –∏ —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  if (error.response?.status === 401 && !originalRequest._isRetry) {
    console.log('‚ùå –ü–æ–ª—É—á–µ–Ω 401, —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û–±–Ω–æ–≤–ª—è—é —Å–µ—Å—Å–∏—é...');
    originalRequest._isRetry = true;
    await ensureAuthenticated(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    originalRequest.headers.Cookie = sessionCookie;
    return api(originalRequest);
  }
  return Promise.reject(error);
});

/**
 * –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
 * @param {boolean} force –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
 */
async function ensureAuthenticated(force = false) {
  if (sessionCookie && !force && !isAuthorizing) {
    return;
  }
  if (isAuthorizing) {
    return authPromise;
  }
  
  isAuthorizing = true;
  authPromise = (async () => {
    try {
      const response = await api.post('/api/session', {
        password: API_CONFIG.PASSWORD
      });
      sessionCookie = response.headers['set-cookie']?.toString();
      if (!sessionCookie) throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', { status: error.response?.status, data: error.response?.data });
      throw new Error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    } finally {
      isAuthorizing = false;
    }
  })();
  return authPromise;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API.
 * @param {string} clientName –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns {Promise<object>} –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API, –≤–∫–ª—é—á–∞—è ID –∫–ª–∏–µ–Ω—Ç–∞.
 */
async function createClient(clientName) {
  try {
    const response = await api.post('/api/wireguard/client', {
      name: clientName,
      allowedIPs: '10.8.0.0/24'
    });
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.`);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', { status: error.response?.status, data: error.response?.data });
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ API.
 * @param {string} clientName –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns {Promise<object>} –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.
 */
async function getClientData(clientName) {
  try {
    const response = await api.get('/api/wireguard/client');
    const client = response.data.find(c => c.name === clientName);
    if (!client) throw new Error(`–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º "${clientName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return client;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –ø–∞—Ä—Å–∏—Ç –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–∏.
 * @param {string} clientId ID –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns {Promise<object>} –û–±—ä–µ–∫—Ç —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏: { privateKey, presharedKey }.
 */
async function getClientConfigFromText(clientId) {
    const endpoint = `/api/wireguard/client/${clientId}/configuration`;
    console.log(`üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ URL: ${API_CONFIG.BASE_URL + endpoint}`);
    try {
        const response = await api.get(endpoint, {
            responseType: 'text'
        });

        const configText = response.data;
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...');

        const privateKeyMatch = configText.match(/PrivateKey = (.+)/);
        const presharedKeyMatch = configText.match(/PresharedKey = (.+)/);

        if (!privateKeyMatch) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ PrivateKey –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        }

        const privateKey = privateKeyMatch[1].trim();
        const presharedKey = presharedKeyMatch ? presharedKeyMatch[1].trim() : null;

        return { privateKey, presharedKey };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', {
            status: error.response?.status,
            data: error.response?.data
        });
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞: Request failed with status code ${error.response?.status}`);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.
 * @param {object} configData –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
 * @returns {string} –°—Ç—Ä–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
 */
function generateConfig(configData) {
  if (!configData.privateKey || !configData.address || !API_CONFIG.SERVER_PUBLIC_KEY) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }

  const presharedKeyLine = configData.presharedKey ? `PresharedKey = ${configData.presharedKey}` : '';

  return `[Interface]
PrivateKey = ${configData.privateKey}
Address = ${configData.address}/24
DNS = 1.1.1.1

[Peer]
PublicKey = ${API_CONFIG.SERVER_PUBLIC_KEY}
${presharedKeyLine}
Endpoint = ${API_CONFIG.BASE_URL.replace('http://', '').replace(':51821', '')}:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25`;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN-–∫–ª–∏–µ–Ω—Ç–∞.
 * @param {string} clientName –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns {Promise<string>} –°—Ç—Ä–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
 */
exports.createVpnClient = async (clientName) => {
  try {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–æ–º, —è–≤–Ω—ã–π –≤—ã–∑–æ–≤ login() –Ω–µ –Ω—É–∂–µ–Ω.

    console.log(`‚åõ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    await createClient(clientName);

    console.log('‚è≥ –û–∂–∏–¥–∞—é 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ...');
    await new Promise(resolve => setTimeout(resolve, 1000));

    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    const clientData = await getClientData(clientName);
    const clientId = clientData.id;

    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: ${clientName} (ID: ${clientId})`);
    const { privateKey, presharedKey } = await getClientConfigFromText(clientId);

    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è: ${clientName}`);
    const config = generateConfig({
        privateKey,
        presharedKey,
        address: clientData.address,
    });

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.');
    return config;
  } catch (error) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ createVpnClient:', {
      message: error.message,
      stack: error.stack
    });
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
  }
};