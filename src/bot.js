require('dotenv').config({ path: __dirname + '/../primer.env' });

const { Telegraf, session, Markup } = require('telegraf');
const sessionMongo = require('telegraf-session-mongodb');
const connectDB = require('./config/db');
const User = require('./models/User');

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ sessionMongo –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
console.log('–ò–º–ø–æ—Ä—Ç sessionMongo:', sessionMongo);

const {
  handleStart,
  checkSubscriptionStatus,
  extendSubscription,
  promptForQuestion,
  handleVpnConfigured,
  promptVpnFailure,
  promptCancelSubscription,
  cancelSubscriptionFinal,
  cancelSubscriptionAbort
} = require('./controllers/userController');

const {
  handlePhoto,
  handleApprove,
  handleReject,
  handleRejectSimple,
  handleRejectWithComment,
  handleCancelRejection,
  handleReviewLater,
  finalizeRejectionWithComment
} = require('./controllers/paymentController');

const {
  checkPayments,
  stats,
  checkAdminMenu,
  handlePaymentsPage,
  listUsers,
  handleUsersPage,
  listReviews,
  handleReviewsPage,
  showBroadcastMenu,
  startBroadcast,
  executeBroadcast,
  cancelBroadcast
} = require('./controllers/adminController');

const { handleQuestion, handleAnswer, listQuestions } = require('./controllers/questionController');
const {
  startReview,
  handleRating,
  handleSpeed,
  handleStability,
  requestComment,
  finishReview,
  cancelReview
} = require('./controllers/reviewController');
const { setupReminders } = require('./services/reminderService');
const { checkAdmin } = require('./utils/auth');
const { setConfigField, getConfig } = require('./services/configService');

const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: {
    agent: null,
    handshakeTimeout: 30000
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π MongoDB
const setupSession = async () => {
  console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π MongoDB...');
  try {
    await connectDB();
    console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ sessionMongo —Ñ—É–Ω–∫—Ü–∏–µ–π
    if (typeof sessionMongo === 'function') {
      console.log('sessionMongo —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é');
      bot.use(sessionMongo({
        url: process.env.MONGODB_URI,
        collectionName: 'users',
        sessionField: 'session',
        model: User
      }));
    } else if (sessionMongo && typeof sessionMongo.session === 'function') {
      console.log('sessionMongo.session —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º sessionMongo.session');
      bot.use(sessionMongo.session({
        url: process.env.MONGODB_URI,
        collectionName: 'users',
        sessionField: 'session',
        model: User
      }));
    } else {
      console.error('–û—à–∏–±–∫–∞: sessionMongo –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ session:', sessionMongo);
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API telegraf-session-mongodb');
    }
    
    console.log('–°–µ—Å—Å–∏–∏ MongoDB –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Å—Å–∏–π MongoDB:', error);
    throw error;
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
async function finalizePriceChange(ctx, newPrice) {
  try {
    const config = await getConfig();
    const oldPrice = config.vpnPrice;
    await setConfigField('vpnPrice', newPrice);

    delete ctx.session.awaitingNewPrice;
    delete ctx.session.pendingPriceChange;

    await ctx.reply(`‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${oldPrice} ‚ÇΩ –Ω–∞ ${newPrice} ‚ÇΩ`);
    await checkAdminMenu(ctx);

    console.log(`[PRICE CHANGE] Admin ${ctx.from.id} changed price from ${oldPrice} to ${newPrice} RUB`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã.');
    await checkAdminMenu(ctx);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
async function finalizePaymentPhoneChange(ctx, newPhone) {
  try {
    const config = await getConfig();
    const oldPhone = config.paymentPhone;
    await setConfigField('paymentPhone', newPhone);

    delete ctx.session.awaitingPaymentPhone;
    delete ctx.session.pendingPaymentPhoneChange;

    await ctx.reply(`‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω —Å ${oldPhone} –Ω–∞ ${newPhone}`);
    await checkAdminMenu(ctx);

    console.log(`[PAYMENT PHONE CHANGE] Admin ${ctx.from.id} changed phone from ${oldPhone} to ${newPhone}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
    await checkAdminMenu(ctx);
  }
}

async function finalizePaymentCardChange(ctx, newCard) {
  try {
    const config = await getConfig();
    const oldCard = config.paymentCard;
    await setConfigField('paymentCard', newCard);

    delete ctx.session.awaitingPaymentCard;
    delete ctx.session.pendingPaymentCardChange;

    await ctx.reply(`‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω —Å ${oldCard} –Ω–∞ ${newCard}`);
    await checkAdminMenu(ctx);

    console.log(`[PAYMENT CARD CHANGE] Admin ${ctx.from.id} changed card from ${oldCard} to ${newCard}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã.');
    await checkAdminMenu(ctx);
  }
}

async function finalizePaymentBankChange(ctx, newBank) {
  try {
    const config = await getConfig();
    const oldBank = config.paymentBank;
    await setConfigField('paymentBank', newBank);

    delete ctx.session.awaitingPaymentBank;
    delete ctx.session.pendingPaymentBankChange;

    await ctx.reply(`‚úÖ –ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω —Å ${oldBank} –Ω–∞ ${newBank}`);
    await checkAdminMenu(ctx);

    console.log(`[PAYMENT BANK CHANGE] Admin ${ctx.from.id} changed bank from ${oldBank} to ${newBank}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–Ω–∫–∞:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–Ω–∫–∞.');
    await checkAdminMenu(ctx);
  }
}

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ---
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ö†Ô∏è Unhandled Rejection at:', promise, 'reason:', reason);
  console.error('Stack trace:', reason.stack);
});

process.on('uncaughtException', async (err) => {
  console.error('‚ö†Ô∏è Uncaught Exception:', err);
  console.error('Stack trace:', err.stack);
  try {
    await bot.telegram.sendMessage(process.env.ADMIN_ID, `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: ${err.message}\n\`\`\`\n${err.stack}\n\`\`\``, { parse_mode: 'Markdown' }).catch(e => console.error("Error sending exception to admin:", e));
  } catch (e) {
    console.error("Failed to send uncaught exception to admin:", e);
  }
  await bot.stop().catch(e => console.error("Error stopping bot on uncaught exception:", e));
  process.exit(1);
});

// --- Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ ---
bot.use(async (ctx, next) => {
  console.log(`–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è userId: ${ctx.from?.id}, session:`, ctx.session);
  if (ctx.from?.id === parseInt(process.env.ADMIN_ID)) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.session?.awaitingAnswerFor && ctx.message?.text) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è ${ctx.session.awaitingAnswerFor}`);
      await handleAnswer(ctx);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å VPN
    if (ctx.session?.awaitingAnswerVpnIssueFor && ctx.message?.text) {
      const targetUserId = ctx.session.awaitingAnswerVpnIssueFor;
      const adminAnswer = ctx.message.text;
      console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ VPN –¥–ª—è userId: ${targetUserId}`);

      try {
        await ctx.telegram.sendMessage(
          targetUserId,
          `üõ†Ô∏è *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN:*\n\n` +
          `"${adminAnswer}"`,
          { parse_mode: 'Markdown' }
        );
        await ctx.reply(`‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}:`, error);
        await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.`);
      } finally {
        ctx.session.awaitingAnswerVpnIssueFor = null;
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    if (ctx.session?.awaitingBroadcastMessage && ctx.message?.text) {
      const broadcastMessage = ctx.message.text.trim();
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', broadcastMessage);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      if (broadcastMessage.length < 1) {
        return ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:');
      }

      if (broadcastMessage.length > 4000) {
        return ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤:');
      }

      ctx.session.awaitingBroadcastMessage = false;
      const { confirmBroadcast } = require('./controllers/adminController');
      await confirmBroadcast(ctx, broadcastMessage);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞
    if (ctx.session?.awaitingRejectionCommentFor && ctx.message?.text) {
      const rejectionComment = ctx.message.text.trim();
      console.log('–ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞:', rejectionComment);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      if (rejectionComment.length < 5) {
        return ctx.reply('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤:');
      }

      if (rejectionComment.length > 500) {
        return ctx.reply('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤:');
      }

      await finalizeRejectionWithComment(ctx, rejectionComment);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
    if (ctx.session?.awaitingNewPrice && ctx.message?.text) {
      const newPrice = parseInt(ctx.message.text);
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞:', newPrice);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (isNaN(newPrice)) {
        return ctx.reply('‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      if (newPrice < 50) {
        return ctx.reply('‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 50 ‚ÇΩ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:');
      }

      if (newPrice > 5000) {
        return ctx.reply('‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 5000 ‚ÇΩ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:');
      }

      const config = await getConfig();
      const oldPrice = config.vpnPrice;

      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 500 —Ä—É–± - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      if (Math.abs(newPrice - oldPrice) > 500) {
        ctx.session.pendingPriceChange = {
          newPrice,
          oldPrice
        };

        return ctx.reply(
          `‚ö†Ô∏è –í—ã –∏–∑–º–µ–Ω—è–µ—Ç–µ —Ü–µ–Ω—É –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 500 ‚ÇΩ\n` +
          `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${oldPrice} ‚ÇΩ\n` +
          `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice} ‚ÇΩ\n\n` +
          `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:`,
          Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_price_change')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_price_change')]
          ])
        );
      }

      await finalizePriceChange(ctx, newPrice);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    if (ctx.session?.awaitingPaymentPhone && ctx.message?.text) {
      const newPhone = ctx.message.text.trim();
      console.log('–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', newPhone);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneRegex = /^\+?\d{1,4}?[-.\s]?\(?\d{1,3}?\)?[-.\s]?\d{1,4}[-.\s]?\d{1,4}[-.\s]?\d{1,9}$/;
      if (!phoneRegex.test(newPhone)) {
        return ctx.reply('‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:');
      }

      ctx.session.pendingPaymentPhoneChange = { newPhone };
      return ctx.reply(
        `üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n` +
        `–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${newPhone}\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_payment_phone_change')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_payment_phone_change')]
        ])
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if (ctx.session?.awaitingPaymentCard && ctx.message?.text) {
      const newCard = ctx.message.text.trim();
      console.log('–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:', newCard);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
      const cardRegex = /^\d{4}\s?\d{4}\s?\d{4}\s?\d{4}$/;
      if (!cardRegex.test(newCard)) {
        return ctx.reply('‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1234 5678 9012 3456):');
      }

      ctx.session.pendingPaymentCardChange = { newCard };
      return ctx.reply(
        `üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã*\n\n` +
        `–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${newCard}\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_payment_card_change')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_payment_card_change')]
        ])
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
    if (ctx.session?.awaitingPaymentBank && ctx.message?.text) {
      const newBank = ctx.message.text.trim();
      console.log('–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:', newBank);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
      if (newBank.length < 2 || newBank.length > 50) {
        return ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤:');
      }

      ctx.session.pendingPaymentBankChange = { newBank };
      return ctx.reply(
        `üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–Ω–∫–∞*\n\n` +
        `–ù–æ–≤—ã–π –±–∞–Ω–∫: ${newBank}\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_payment_bank_change')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_payment_bank_change')]
        ])
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  if (ctx.session?.awaitingReviewComment && ctx.message?.text) {
    const reviewComment = ctx.message.text.trim();
    console.log('–ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É:', reviewComment);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if (reviewComment.length > 500) {
      return ctx.reply('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤:');
    }

    ctx.session.awaitingReviewComment = false;
    await finishReview(ctx, reviewComment);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (ctx.session?.awaitingVpnTroubleshoot && ctx.from?.id === ctx.session.awaitingVpnTroubleshoot && ctx.message?.text) {
    const userId = ctx.from.id;
    const problemDescription = ctx.message.text;
    const user = await User.findOne({ userId });
    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å VPN –æ—Ç userId: ${userId}`);

    let userName = user?.firstName || user?.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    if (user?.username) {
      userName = `${userName} (@${user.username})`;
    }

    await ctx.telegram.sendMessage(
      process.env.ADMIN_ID,
      `üö® *–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} (ID: ${userId}):*\n\n` +
      `"${problemDescription}"`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚û°Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data: `answer_vpn_issue_${userId}` }]
          ]
        }
      }
    );

    await ctx.reply('‚úÖ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.');
    ctx.session.awaitingVpnTroubleshoot = null;
    return;
  }

  return next();
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
bot.start(async (ctx) => {
  console.log(`–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç userId: ${ctx.from.id}`);
  if (checkAdmin(ctx)) {
    await checkAdminMenu(ctx);
  } else {
    await handleStart(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx, next) => {
  console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç userId: ${ctx.from.id}, —Ç–µ–∫—Å—Ç: ${ctx.message.text}`);
  if (ctx.from?.id === parseInt(process.env.ADMIN_ID) && (ctx.session?.awaitingAnswerFor || ctx.session?.awaitingAnswerVpnIssueFor || ctx.session?.awaitingNewPrice || ctx.session?.awaitingRejectionCommentFor || ctx.session?.awaitingBroadcastMessage || ctx.session?.awaitingPaymentPhone || ctx.session?.awaitingPaymentCard || ctx.session?.awaitingPaymentBank)) {
    return next();
  }

  if (ctx.session?.awaitingReviewComment) {
    return next();
  }

  if (ctx.session?.awaitingPaymentProof) {
    return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, –∞ –Ω–µ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ /start.');
  }

  if (ctx.message.text.startsWith('/')) {
    return next();
  }

  if (checkAdmin(ctx)) {
    return ctx.reply("–û –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –Ω–µ —ç—Ç–æ... –¢—ã –¥–æ—à—ë–ª –¥–æ —Å—Ç–∞–¥–∏–∏ '–Ω–∞–ø–∏—à—É –±–æ—Ç—É, –≤–¥—Ä—É–≥ –æ—Ç–≤–µ—Ç–∏—Ç'? üò≠ –ë—Ä–æ, —Å—Ä–æ—á–Ω–æ –∂–º–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚Äî –æ–Ω–∞ —Ö–æ—Ç—è –±—ã –¥–µ–ª–∞–µ—Ç –≤–∏–¥, —á—Ç–æ —Å–ª—É—à–∞–µ—Ç, –∞ –Ω–µ —Ç—É–ø–æ —à–ª—ë—Ç —Å—Ç–∏–∫–µ—Ä—ã. üö®ü§ñ");
  } else {
    await handleQuestion(ctx);
  }
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('admin', checkAdminMenu);
bot.command('check', checkPayments);
bot.command('stats', stats);
bot.command('questions', listQuestions);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (—Ñ–æ—Ç–æ)
bot.on('photo', handlePhoto);

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (callback_data) ---

// –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
bot.action(/approve_(\d+)/, handleApprove);
bot.action(/reject_(\d+)/, handleReject);
bot.action(/reject_simple_(\d+)/, handleRejectSimple);
bot.action(/reject_with_comment_(\d+)/, handleRejectWithComment);
bot.action(/cancel_rejection_(\d+)/, handleCancelRejection);
bot.action(/review_later_(\d+)/, handleReviewLater);
bot.action('list_questions', listQuestions);
bot.action('check_payments_admin', checkPayments);
bot.action('show_stats_admin', stats);
bot.action('refresh_stats', stats);
bot.action('list_users_admin', listUsers);
bot.action('list_reviews_admin', listReviews);
bot.action('mass_broadcast_admin', showBroadcastMenu);
bot.action(/payments_page_(\d+)/, handlePaymentsPage);
bot.action(/users_page_(\d+)/, handleUsersPage);
bot.action(/reviews_page_(\d+)/, handleReviewsPage);
bot.action(/broadcast_(.+)/, startBroadcast);
bot.action('execute_broadcast', executeBroadcast);
bot.action('cancel_broadcast', cancelBroadcast);
bot.action('back_to_admin_menu', checkAdminMenu);
bot.action('set_price_admin', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª set_price_admin, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const config = await getConfig();
  const currentPrice = config.vpnPrice;
  ctx.session.awaitingNewPrice = true;

  await ctx.reply(
    `‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n` +
    `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${currentPrice} ‚ÇΩ</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–æ—Ç 50 –¥–æ 5000 ‚ÇΩ):`,
    {
      parse_mode: 'HTML',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_price_change')]
      ])
    }
  );

  await ctx.answerCbQuery();
});

bot.action('set_payment_phone_admin', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª set_payment_phone_admin, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const config = await getConfig();
  ctx.session.awaitingPaymentPhone = true;

  await ctx.reply(
    `‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n` +
    `–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: <b>${config.paymentPhone}</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79954313457):`,
    {
      parse_mode: 'HTML',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_payment_phone_change')]
      ])
    }
  );

  await ctx.answerCbQuery();
});

bot.action('set_payment_card_admin', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª set_payment_card_admin, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const config = await getConfig();
  ctx.session.awaitingPaymentCard = true;

  await ctx.reply(
    `‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã</b>\n\n` +
    `–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: <b>${config.paymentCard}</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1234 5678 9012 3456):`,
    {
      parse_mode: 'HTML',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_payment_card_change')]
      ])
    }
  );

  await ctx.answerCbQuery();
});

bot.action('set_payment_bank_admin', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª set_payment_bank_admin, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const config = await getConfig();
  ctx.session.awaitingPaymentBank = true;

  await ctx.reply(
    `‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞</b>\n\n` +
    `–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: <b>${config.paymentBank}</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:`,
    {
      parse_mode: 'HTML',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_payment_bank_change')]
      ])
    }
  );

  await ctx.answerCbQuery();
});

bot.action('confirm_price_change', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  const { newPrice } = ctx.session.pendingPriceChange;
  await finalizePriceChange(ctx, newPrice);
  await ctx.answerCbQuery();
});

bot.action('cancel_price_change', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  delete ctx.session.pendingPriceChange;
  delete ctx.session.awaitingNewPrice;

  await ctx.reply('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ');
  await ctx.answerCbQuery();
  await checkAdminMenu(ctx);
});

bot.action('confirm_payment_phone_change', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  const { newPhone } = ctx.session.pendingPaymentPhoneChange;
  await finalizePaymentPhoneChange(ctx, newPhone);
  await ctx.answerCbQuery();
});

bot.action('cancel_payment_phone_change', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  delete ctx.session.pendingPaymentPhoneChange;
  delete ctx.session.awaitingPaymentPhone;

  await ctx.reply('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  await ctx.answerCbQuery();
  await checkAdminMenu(ctx);
});

bot.action('confirm_payment_card_change', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  const { newCard } = ctx.session.pendingPaymentCardChange;
  await finalizePaymentCardChange(ctx, newCard);
  await ctx.answerCbQuery();
});

bot.action('cancel_payment_card_change', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  delete ctx.session.pendingPaymentCardChange;
  delete ctx.session.awaitingPaymentCard;

  await ctx.reply('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ');
  await ctx.answerCbQuery();
  await checkAdminMenu(ctx);
});

bot.action('confirm_payment_bank_change', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  const { newBank } = ctx.session.pendingPaymentBankChange;
  await finalizePaymentBankChange(ctx, newBank);
  await ctx.answerCbQuery();
});

bot.action('cancel_payment_bank_change', async (ctx) => {
  console.log('–ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞, userId:', ctx.from.id);
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  delete ctx.session.pendingPaymentBankChange;
  delete ctx.session.awaitingPaymentBank;

  await ctx.reply('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  await ctx.answerCbQuery();
  await checkAdminMenu(ctx);
});

bot.action(/answer_([0-9a-fA-F]{24})/, async (ctx) => {
  console.log(`–ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, questionId: ${ctx.match[1]}, userId: ${ctx.from.id}`);
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  ctx.session.awaitingAnswerFor = ctx.match[1];
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  await ctx.answerCbQuery();
});

bot.action(/answer_vpn_issue_(\d+)/, async (ctx) => {
  console.log(`–ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ VPN –ø—Ä–æ–±–ª–µ–º—É, targetUserId: ${ctx.match[1]}, userId: ${ctx.from.id}`);
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  const targetUserId = parseInt(ctx.match[1]);
  ctx.session.awaitingAnswerVpnIssueFor = targetUserId;
  await ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –ø–æ –µ–≥–æ –ø—Ä–æ–±–ª–µ–º–µ —Å VPN:`);
  await ctx.answerCbQuery();
});

// –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('check_subscription', async (ctx) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É, userId:', ctx.from.id);
  await checkSubscriptionStatus(ctx);
  await ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]])
  );
});
bot.action('ask_question', promptForQuestion);
bot.action('extend_subscription', async (ctx) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É, userId:', ctx.from.id);
  await extendSubscription(ctx);
  await ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]])
  );
});
bot.action('leave_review', async (ctx) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤, userId:', ctx.from.id);
  await startReview(ctx);
  await ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]])
  );
});
bot.action(/vpn_configured_(\d+)/, handleVpnConfigured);
bot.action(/vpn_failed_(\d+)/, promptVpnFailure);
bot.action('back_to_user_menu', async (ctx) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, userId:', ctx.from.id);
  await ctx.answerCbQuery();
  await handleStart(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('cancel_subscription_confirm', async (ctx) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏, userId:', ctx.from.id);
  await promptCancelSubscription(ctx);
  await ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]])
  );
});
bot.action('cancel_subscription_final', cancelSubscriptionFinal);
bot.action('cancel_subscription_abort', cancelSubscriptionAbort);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
bot.action(/review_rating_(\d+)/, handleRating);
bot.action(/review_speed_(.+)/, handleSpeed);
bot.action(/review_stability_(.+)/, handleStability);
bot.action('review_add_comment', requestComment);
bot.action('review_finish', finishReview);
bot.action('review_cancel', cancelReview);

// --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
setupReminders(bot);

// --- –ó–∞–ø—É—Å–∫ ---
setupSession().then(() => {
  console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
  bot.launch()
    .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Q&A + Payments)'))
    .catch(err => {
      console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
      process.exit(1);
    });
});

// Graceful shutdown
['SIGINT', 'SIGTERM'].forEach(signal => {
  process.once(signal, async () => {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
    try {
      await bot.stop();
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
      process.exit(1);
    }
  });
});