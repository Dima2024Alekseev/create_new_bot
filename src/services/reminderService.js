const cron = require('node-cron');
const User = require('../models/User');
const { formatDate, formatDuration } = require('../utils/helpers');

module.exports = {
  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  setupReminders: (bot) => {
    // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 10:00
    cron.schedule('0 10 * * *', async () => {
      try {
        await this.checkExpiringSubscriptions(bot);
        await this.checkExpiredSubscriptions(bot);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
      }
    });

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    cron.schedule('0 */3 * * *', async () => {
      await this.checkUrgentReminders(bot);
    });
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  checkExpiringSubscriptions: async (bot) => {
    const expiringUsers = await User.find({
      status: 'active',
      expireDate: { 
        $lte: new Date(Date.now() + 3 * 86400000), // 3 –¥–Ω—è
        $gt: new Date()
      },
      $or: [
        { lastReminder: { $exists: false } },
        { lastReminder: { $lt: new Date(Date.now() - 86400000) } }
      ]
    });

    for (const user of expiringUsers) {
      try {
        const daysLeft = Math.ceil((user.expireDate - new Date()) / 86400000);
        
        await bot.telegram.sendMessage(
          user.userId,
          `‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π!*\n\n` +
          `–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getconfig ` +
          `–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.`,
          { parse_mode: 'Markdown' }
        );
        
        await User.updateOne(
          { _id: user._id },
          { lastReminder: new Date() }
        );
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${user.userId}:`, e.message);
      }
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  checkExpiredSubscriptions: async (bot) => {
    const expiredUsers = await User.find({
      status: 'active',
      expireDate: { $lte: new Date() }
    });

    for (const user of expiredUsers) {
      await User.updateOne(
        { _id: user._id },
        { status: 'expired' }
      );
      
      try {
        await bot.telegram.sendMessage(
          user.userId,
          `‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ${formatDate(user.expireDate)}\n\n` +
          `–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.`
        );
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –¥–ª—è ${user.userId}:`, e.message);
      }
    }
  },

  /**
   * –°—Ä–æ—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–º–∏–Ω—É
   */
  checkUrgentReminders: async (bot) => {
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (>24 —á–∞—Å–æ–≤)
    const oldPendingPayments = await User.find({
      status: 'pending',
      createdAt: { $lt: new Date(Date.now() - 86400000) }
    }).countDocuments();

    if (oldPendingPayments > 0) {
      await bot.telegram.sendMessage(
        process.env.ADMIN_ID,
        `üö® –°—Ä–æ—á–Ω–æ! ${oldPendingPayments} –ø–ª–∞—Ç–µ–∂–µ–π –∂–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤!`
      );
    }

    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ WG-Easy)
    const problemConfigs = await User.find({
      configGenerated: true,
      wgConfigChecked: { $ne: true },
      status: 'active'
    }).limit(5);

    for (const user of problemConfigs) {
      const exists = await PaymentService.checkUserInWg(user.wgUsername);
      if (!exists) {
        await bot.telegram.sendMessage(
          process.env.ADMIN_ID,
          `üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –¥–ª—è ${user.firstName} (@${user.username || '–Ω–µ—Ç'})\n` +
          `ID: ${user.userId}\n` +
          `WG username: ${user.wgUsername}\n` +
          `–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WG-Easy!`
        );
      }
      await User.updateOne({ _id: user._id }, { wgConfigChecked: true });
    }
  }
};