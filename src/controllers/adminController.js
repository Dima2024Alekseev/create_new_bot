const User = require('../models/User');
const Question = require('../models/Question');
const Review = require('../models/Review');
const { Markup } = require('telegraf');
const { checkAdmin } = require('../utils/auth');
const { getConfig } = require('../services/configService');
const { formatDate, escapeMarkdown } = require('../utils/helpers');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
 */
exports.checkPayments = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await showPaymentsPage(ctx, 1);

        if (ctx.callbackQuery) {
            await ctx.answerCbQuery();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ!');
        }
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    }
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–æ–º
 */
const showPaymentsPage = async (ctx, page = 1) => {
    const PAYMENTS_PER_PAGE = 1; // –û–¥–∏–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const skip = (page - 1) * PAYMENTS_PER_PAGE;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        const totalPayments = await User.countDocuments({ status: 'pending' });

        if (totalPayments === 0) {
            return ctx.reply('‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const user = await User.findOne({ status: 'pending' })
            .sort({ paymentPhotoDate: -1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            .skip(skip);

        if (!user) {
            return ctx.reply('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
        }

        const totalPages = totalPayments;

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        let message = `üì∏ *–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
            `ID: ${user.userId}\n` +
            `–ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
            `–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${user.paymentPhotoDate ? formatDate(user.paymentPhotoDate) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
            `üìÑ –ü–ª–∞—Ç–µ–∂ ${page} –∏–∑ ${totalPages}`;

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const actionButtons = [
            [
                { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `approve_${user.userId}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${user.userId}` }
            ],
            [
                { text: '‚è∞ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ', callback_data: `review_later_${user.userId}` }
            ]
        ];

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navigationButtons = [];

        if (totalPages > 1) {
            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞—Ç–µ–∂"
            if (page > 1) {
                navigationButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data: `payments_page_${page - 1}` });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂"
            if (page < totalPages) {
                navigationButtons.push({ text: '–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è', callback_data: `payments_page_${page + 1}` });
            }

            // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            navigationButtons.push({ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `payments_page_${page}` });
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏
        const allButtons = [...actionButtons];
        if (navigationButtons.length > 0) {
            allButtons.push(navigationButtons);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
        if (user.paymentPhotoId) {
            await ctx.telegram.sendPhoto(
                ctx.chat.id,
                user.paymentPhotoId,
                {
                    caption: message,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: allButtons
                    }
                }
            );
        } else {
            await ctx.replyWithMarkdown(
                `‚ö†Ô∏è *–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${user.userId}) –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞!*\n` +
                `–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n\n` +
                `${message}`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: allButtons
                    }
                }
            );
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π.');
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π
 */
exports.handlePaymentsPage = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    const page = parseInt(ctx.match[1]);

    try {
        await ctx.answerCbQuery(`–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
        await showPaymentsPage(ctx, page);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
 */
exports.stats = async (ctx) => {
    if (!checkAdmin(ctx)) {
        if (ctx.callbackQuery) {
            return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        return;
    }

    try {
        const totalUsers = await User.countDocuments();
        const activeUsers = await User.countDocuments({ status: 'active' });
        const pendingPayments = await User.countDocuments({ status: 'pending' });
        const pendingQuestions = await Question.countDocuments({ status: 'pending' });
        const last7DaysUsers = await User.countDocuments({
            createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
        });

        const latestSubscription = await User.findOne({ status: 'active', expireDate: { $exists: true } })
            .sort({ expireDate: -1 })
            .limit(1);

        let latestExpireDate = 'N/A';
        if (latestSubscription && latestSubscription.expireDate) {
            latestExpireDate = formatDate(latestSubscription.expireDate, true);
        }

        let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞*\n\n` +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${totalUsers}*\n` +
            `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: *${activeUsers}*\n` +
            `‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: *${pendingPayments}*\n` +
            `‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: *${pendingQuestions}*\n` +
            `üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (7 –¥–Ω–µ–π): *${last7DaysUsers}*\n` +
            `üóì –°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: *${latestExpireDate}*\n` +
            `_–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}_`;

        await ctx.replyWithMarkdown(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }]
                ]
            }
        });

        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        if (ctx.callbackQuery) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');
        } else {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
    }
};

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞.
 */
exports.checkAdminMenu = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return;
    }

    const config = await getConfig();
    const currentPrice = config.vpnPrice;
    const phoneNumber = config.paymentPhone;
    const cardNumber = config.paymentCard;
    const bankName = config.paymentBank;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏', 'check_payments_admin')],
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats_admin')],
        [Markup.button.callback('üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'list_users_admin')],
        [Markup.button.callback('‚≠ê –û—Ç–∑—ã–≤—ã –æ VPN', 'list_reviews_admin')],
        [Markup.button.callback('üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', 'mass_broadcast_admin')],
        [Markup.button.callback('‚ùì –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', 'list_questions')],
        [
            Markup.button.callback(
                `üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É (–¢–µ–∫—É—â–∞—è: ${currentPrice} ‚ÇΩ)`,
                'set_price_admin'
            )
        ],
        [
            Markup.button.callback(
                `üì± –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¢–µ–∫—É—â–∏–π: ${phoneNumber})`,
                'set_payment_phone_admin'
            )
        ],
        [
            Markup.button.callback(
                `üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–¢–µ–∫—É—â–∏–π: ${cardNumber})`,
                'set_payment_card_admin'
            )
        ],
        [
            Markup.button.callback(
                `üè¶ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫ (–¢–µ–∫—É—â–∏–π: ${bankName})`,
                'set_payment_bank_admin'
            )
        ]
    ]);

    await ctx.reply('‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', keyboard);
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
exports.listUsers = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await showUsersPage(ctx, 1);

        if (ctx.callbackQuery) {
            await ctx.answerCbQuery();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
        }
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
const showUsersPage = async (ctx, page = 1) => {
    const USERS_PER_PAGE = 5; // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const skip = (page - 1) * USERS_PER_PAGE;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const totalUsers = await User.countDocuments();

        if (totalUsers === 0) {
            return ctx.reply('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.');
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const users = await User.find({})
            .sort({ createdAt: -1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            .skip(skip)
            .limit(USERS_PER_PAGE);

        const totalPages = Math.ceil(totalUsers / USERS_PER_PAGE);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let message = `üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n`;
        message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages} (–í—Å–µ–≥–æ: ${totalUsers})\n\n`;

        for (const user of users) {
            const statusEmoji = getStatusEmoji(user.status);
            const subscriptionInfo = getSubscriptionInfo(user);

            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è
            const safeName = escapeMarkdown(user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏');
            const safeUsername = user.username ? `@${escapeMarkdown(user.username)}` : '';
            const safeStatus = escapeMarkdown(getStatusText(user.status));
            // –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º subscriptionInfo, —Ç–∞–∫ –∫–∞–∫ –¥–∞—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

            message += `${statusEmoji} *${safeName}*\n`;
            message += `   ID: \`${user.userId}\`\n`;
            if (safeUsername) {
                message += `   Username: ${safeUsername}\n`;
            }
            message += `   –°—Ç–∞—Ç—É—Å: ${safeStatus}\n`;
            message += `   ${subscriptionInfo}\n`; // –ë–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            message += `   –ü–æ–¥–ø–∏—Å–æ–∫: ${user.subscriptionCount || 0}\n\n`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log(`[DEBUG] –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.length}`);
        if (message.length > 4000) {
            console.warn(`[WARNING] –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (${message.length}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)`);
            return ctx.reply('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navigationButtons = [];

        if (totalPages > 1) {
            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            if (page > 1) {
                navigationButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: `users_page_${page - 1}` });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            if (page < totalPages) {
                navigationButtons.push({ text: '–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', callback_data: `users_page_${page + 1}` });
            }

            // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            navigationButtons.push({ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `users_page_${page}` });
        }

        const keyboard = [];
        if (navigationButtons.length > 0) {
            keyboard.push(navigationButtons);
        }
        keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_admin_menu' }]);

        await ctx.replyWithMarkdown(message, {
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', {
            message: error.message,
            stack: error.stack
        });
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
};
/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
exports.handleUsersPage = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    const page = parseInt(ctx.match[1]);

    try {
        await ctx.answerCbQuery(`–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
        await showUsersPage(ctx, page);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${page}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getStatusEmoji = (status) => {
    switch (status) {
        case 'active': return '‚úÖ';
        case 'pending': return '‚è≥';
        case 'rejected': return '‚ùå';
        case 'inactive': return '‚ö™';
        default: return '‚ùì';
    }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
const getStatusText = (status) => {
    switch (status) {
        case 'active': return '–ê–∫—Ç–∏–≤–Ω–∞';
        case 'pending': return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ';
        case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞';
        case 'inactive': return '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
        default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getSubscriptionInfo = (user) => {
    if (user.status === 'active' && user.expireDate) {
        const now = new Date();
        const expireDate = new Date(user.expireDate);

        if (expireDate > now) {
            const daysLeft = Math.ceil((expireDate - now) / (1000 * 60 * 60 * 24));
            return `–ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatDate(expireDate)} (${daysLeft} –¥–Ω.)`;
        } else {
            return `–ò—Å—Ç–µ–∫–ª–∞: ${formatDate(expireDate)}`;
        }
    } else if (user.status === 'pending') {
        return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã';
    } else if (user.status === 'rejected') {
        return user.rejectionReason ? `–û—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${user.rejectionReason}` : '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞';
    } else {
        return '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç';
    }
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –æ VPN
 */
exports.listReviews = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
        await showReviewsPage(ctx, 1);

        if (ctx.callbackQuery) {
            await ctx.answerCbQuery();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
        }
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤.');
    }
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–∑—ã–≤–∞–º–∏
 */
const showReviewsPage = async (ctx, page = 1) => {
    const REVIEWS_PER_PAGE = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const skip = (page - 1) * REVIEWS_PER_PAGE;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        const totalReviews = await Review.countDocuments();

        if (totalReviews === 0) {
            return ctx.reply('‚≠ê –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.');
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const reviews = await Review.find({})
            .sort({ createdAt: -1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            .skip(skip)
            .limit(REVIEWS_PER_PAGE);

        const totalPages = Math.ceil(totalReviews / REVIEWS_PER_PAGE);

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        const avgRatingResult = await Review.aggregate([
            { $group: { _id: null, avgRating: { $avg: "$rating" } } }
        ]);
        const avgRating = avgRatingResult.length > 0 ? avgRatingResult[0].avgRating.toFixed(1) : '0.0';

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
        let message = `‚≠ê *–û—Ç–∑—ã–≤—ã –æ VPN*\n\n`;
        message += `üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${avgRating}/5 (${totalReviews} –æ—Ç–∑—ã–≤–æ–≤)\n`;
        message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}\n\n`;

        for (const review of reviews) {
            const stars = '‚≠ê'.repeat(review.rating);
            const speedText = getReviewSpeedText(review.vpnSpeed);
            const stabilityText = getReviewStabilityText(review.vpnStability);

            message += `${stars} *${review.firstName || review.username || '–ê–Ω–æ–Ω–∏–º'}*\n`;
            message += `   ID: \`${review.userId}\`\n`;
            message += `   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ${speedText}\n`;
            message += `   üîí –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${stabilityText}\n`;
            if (review.comment) {
                message += `   üí¨ "${review.comment}"\n`;
            }
            message += `   üìÖ ${formatDate(review.createdAt, true)}\n\n`;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navigationButtons = [];

        if (totalPages > 1) {
            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            if (page > 1) {
                navigationButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: `reviews_page_${page - 1}` });
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            if (page < totalPages) {
                navigationButtons.push({ text: '–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', callback_data: `reviews_page_${page + 1}` });
            }

            // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            navigationButtons.push({ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `reviews_page_${page}` });
        }

        const keyboard = [];
        if (navigationButtons.length > 0) {
            keyboard.push(navigationButtons);
        }
        keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_admin_menu' }]);

        await ctx.replyWithMarkdown(message, {
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤.');
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
 */
exports.handleReviewsPage = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    const page = parseInt(ctx.match[1]);

    try {
        await ctx.answerCbQuery(`–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
        await showReviewsPage(ctx, page);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤ ${page}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
 */
const getReviewSpeedText = (speed) => {
    switch (speed) {
        case 'excellent': return '–û—Ç–ª–∏—á–Ω–æ';
        case 'good': return '–•–æ—Ä–æ—à–æ';
        case 'average': return '–°—Ä–µ–¥–Ω–µ';
        case 'poor': return '–ü–ª–æ—Ö–æ';
        default: return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
 */
const getReviewStabilityText = (stability) => {
    switch (stability) {
        case 'excellent': return '–û—Ç–ª–∏—á–Ω–æ';
        case 'good': return '–•–æ—Ä–æ—à–æ';
        case 'average': return '–°—Ä–µ–¥–Ω–µ';
        case 'poor': return '–ü–ª–æ—Ö–æ';
        default: return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
 */
exports.showBroadcastMenu = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    try {
        const totalUsers = await User.countDocuments();
        const activeUsers = await User.countDocuments({ status: 'active' });
        const inactiveUsers = await User.countDocuments({ status: 'inactive' });
        const pendingUsers = await User.countDocuments({ status: 'pending' });

        await ctx.reply(
            `üì¢ *–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞*\n\n` +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
            `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers}\n` +
            `‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${inactiveUsers}\n` +
            `‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${pendingUsers}\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'broadcast_all' },
                            { text: '‚úÖ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º', callback_data: 'broadcast_active' }
                        ],
                        [
                            { text: '‚ö™ –¢–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º', callback_data: 'broadcast_inactive' },
                            { text: '‚è≥ –û–∂–∏–¥–∞—é—â–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏', callback_data: 'broadcast_pending' }
                        ],
                        [
                            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_admin_menu' }
                        ]
                    ]
                }
            }
        );

        if (ctx.callbackQuery) {
            await ctx.answerCbQuery();
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
        }
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
};

/**
 * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
 */
exports.startBroadcast = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    const targetGroup = ctx.match[1];

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.broadcastTarget = targetGroup;
        ctx.session.awaitingBroadcastMessage = true;

        const groupNames = {
            'all': '–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            'active': '–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            'inactive': '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            'pending': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
        };

        await ctx.editMessageText(
            `‚úçÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n` +
            `–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: ${groupNames[targetGroup]}\n\n` +
            `–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n` +
            `(–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_broadcast' }]
                    ]
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
};

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
 */
exports.confirmBroadcast = async (ctx, message) => {
    if (!checkAdmin(ctx)) {
        return ctx.reply('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    const targetGroup = ctx.session.broadcastTarget;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        let filter = {};
        switch (targetGroup) {
            case 'active':
                filter = { status: 'active' };
                break;
            case 'inactive':
                filter = { status: 'inactive' };
                break;
            case 'pending':
                filter = { status: 'pending' };
                break;
            case 'all':
            default:
                filter = {};
                break;
        }

        const userCount = await User.countDocuments(filter);

        if (userCount === 0) {
            delete ctx.session.broadcastTarget;
            delete ctx.session.awaitingBroadcastMessage;
            delete ctx.session.broadcastMessage;
            return ctx.reply('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.broadcastMessage = message;

        const groupNames = {
            'all': '–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            'active': '–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            'inactive': '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            'pending': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
        await ctx.reply(
            `üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n` +
            `–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: ${groupNames[targetGroup]} (${userCount} —á–µ–ª.)\n\n` +
            `*–ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è:*\n` +
            `${message}\n\n` +
            `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'execute_broadcast' },
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_broadcast' }
                        ]
                    ]
                }
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
 */
exports.executeBroadcast = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    const targetGroup = ctx.session.broadcastTarget;
    const message = ctx.session.broadcastMessage;

    if (!targetGroup || !message) {
        await ctx.answerCbQuery('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return ctx.reply('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    }

    try {
        await ctx.answerCbQuery('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
        await ctx.editMessageText('üöÄ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!*\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...', { parse_mode: 'Markdown' });

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        let filter = {};
        switch (targetGroup) {
            case 'active':
                filter = { status: 'active' };
                break;
            case 'inactive':
                filter = { status: 'inactive' };
                break;
            case 'pending':
                filter = { status: 'pending' };
                break;
            case 'all':
            default:
                filter = {};
                break;
        }

        const users = await User.find(filter).select('userId firstName username');

        let successCount = 0;
        let errorCount = 0;
        const errors = [];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
        for (const user of users) {
            try {
                await ctx.telegram.sendMessage(user.userId, message, { parse_mode: 'Markdown' });
                successCount++;

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É - –ª–∏–º–∏—Ç Telegram)
                await new Promise(resolve => setTimeout(resolve, 35));

            } catch (error) {
                errorCount++;
                errors.push({
                    userId: user.userId,
                    name: user.firstName || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                    error: error.message
                });

                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –º–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                if (error.code === 403) {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
                }
            }
        }

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.broadcastTarget;
        delete ctx.session.awaitingBroadcastMessage;
        delete ctx.session.broadcastMessage;

        // –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        let reportMessage = `‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
            `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
            `‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n` +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`;

        if (errorCount > 0 && errorCount <= 5) {
            reportMessage += `\n\n‚ö†Ô∏è –û—à–∏–±–∫–∏:\n`;
            errors.slice(0, 5).forEach(err => {
                reportMessage += `‚Ä¢ ${err.name} (${err.userId}): ${err.error.substring(0, 50)}...\n`;
            });
        } else if (errorCount > 5) {
            reportMessage += `\n\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫ –∏–∑ ${errorCount}`;
        }

        await ctx.editMessageText(reportMessage, { parse_mode: 'Markdown' });

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        console.log(`[BROADCAST] Admin ${ctx.from.id} sent broadcast to ${targetGroup}: ${successCount} success, ${errorCount} errors`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.');

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        delete ctx.session.broadcastTarget;
        delete ctx.session.awaitingBroadcastMessage;
        delete ctx.session.broadcastMessage;
    }
};

/**
 * –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
 */
exports.cancelBroadcast = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }

    try {
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.broadcastTarget;
        delete ctx.session.awaitingBroadcastMessage;
        delete ctx.session.broadcastMessage;

        await ctx.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        await ctx.answerCbQuery();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
    }
};