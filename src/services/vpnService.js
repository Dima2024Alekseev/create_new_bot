const axios = require('axios');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  WG_API_URL: process.env.WG_API_URL || 'http://localhost:51821',
  WG_API_PASSWORD: process.env.WG_API_PASSWORD,
  WG_CONF_PATH: '/etc/wireguard/wg0.conf'
};

let sessionCookie = null;

const api = axios.create({
  baseURL: config.WG_API_URL,
  timeout: 15000,
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∫—É–∫
api.interceptors.request.use(cfg => {
  if (sessionCookie) {
    cfg.headers.Cookie = sessionCookie;
  }
  return cfg;
});

async function login() {
  try {
    const response = await api.post('/api/session', {
      password: config.WG_API_PASSWORD
    });
    sessionCookie = response.headers['set-cookie']?.toString();
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message);
    throw error;
  }
}

async function createClient(clientName) {
  try {
    const response = await api.post('/api/wireguard/client', {
      name: clientName,
      allowedIPs: '10.8.0.0/24'
    });
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error.response?.data || error.message);
    throw error;
  }
}

async function extractConfigFromFile(clientName) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª
    const cmd = `docker exec wg.easy cat ${config.WG_CONF_PATH}`;
    const fullConfig = execSync(cmd, { timeout: 5000 }).toString();
    
    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
    const clientSection = fullConfig.split('\n\n').find(section => 
      section.includes(`# ${clientName}`) && section.includes('[Peer]')
    );
    
    if (!clientSection) {
      throw new Error('–°–µ–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∫–ª–∏–µ–Ω—Ç–∞
    const privateKey = await getPrivateKey(clientName);
    const configText = `[Interface]
PrivateKey = ${privateKey}
Address = ${clientSection.match(/AllowedIPs = (.+?)\//)?.[1] || '10.8.0.2/32'}
DNS = 1.1.1.1

${clientSection.replace('# ' + clientName, '[Peer]')}`;
    
    return configText;
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:', error.message);
    return null;
  }
}

async function getPrivateKey(clientName) {
  try {
    // –ü–∞—Ä—Å–∏–º JSON-—Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const cmd = `docker exec wg.easy cat /etc/wireguard/wg0.json`;
    const wgJson = JSON.parse(execSync(cmd, { timeout: 5000 }).toString());
    
    // –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ peers
    const client = wgJson.peers.find(p => p.name === clientName);
    if (!client) throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ wg0.json');
    
    return client.privateKey;
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', error.message);
    throw error;
  }
}

exports.createVpnClient = async (clientName) => {
  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await login();
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    console.log(`‚åõ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    await createClient(clientName);
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
    const configText = await extractConfigFromFile(clientName);
    if (!configText) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
    return configText;
  } catch (error) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack
    });
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
  }
};