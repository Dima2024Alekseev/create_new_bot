const User = require('../models/User');
const Question = require('../models/Question');
const { Markup } = require('telegraf');
const { formatDate, formatDuration, paymentDetails } = require('../utils/helpers');

exports.handleStart = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;
    try {
        const user = await User.findOneAndUpdate(
            { userId },
            {
                userId,
                firstName: first_name,
                username,
                lastSeen: new Date()
            },
            { upsert: true, new: true, setDefaultsOnInsert: true }
        );

        let statusText = '';
        let keyboardButtons = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if (user.status === 'active' && user.expireDate && user.expireDate <= new Date()) {
            user.status = 'inactive';
            await user.save();
        }

        if (user.status === 'active') {
            const timeLeft = user.expireDate - new Date();
            const daysLeft = Math.ceil(timeLeft / (1000 * 60 * 60 * 24));
            statusText = `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!* –û—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π.`;
            keyboardButtons.push(
                [{ text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å', callback_data: 'extend_subscription' }],
                [{ text: 'üóì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'check_subscription' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_subscription_confirm' }]
            );
        } else {
            statusText = '‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.*\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN.';
            keyboardButtons.push([{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data: 'extend_subscription' }]);
        }

        keyboardButtons.push([{ text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'ask_question' }]);

        await ctx.reply(
            `üëã –ü—Ä–∏–≤–µ—Ç, *${user.firstName}!* –Ø VPN –±–æ—Ç.\n\n${statusText}`,
            {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboardButtons }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

exports.checkSubscriptionStatus = async (ctx) => {
    const userId = ctx.from.id;
    try {
        const user = await User.findOne({ userId });
        if (!user) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start');
        }

        await ctx.answerCbQuery();
        const now = new Date();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞
        if (user.status === 'active' && user.expireDate && user.expireDate <= now) {
            user.status = 'inactive';
            await user.save();
        }

        if (user.status !== 'active') {
            return ctx.reply('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.');
        }

        const timeLeft = user.expireDate - now;
        const keyboardButtons = [
            [{ text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å', callback_data: 'extend_subscription' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_subscription_confirm' }],
            [{ text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'ask_question' }]
        ];

        await ctx.reply(
            `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!*\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: *${formatDate(user.expireDate, true)}*\n–û—Å—Ç–∞–ª–æ—Å—å: *${formatDuration(timeLeft)}*`,
            {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboardButtons }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ checkSubscriptionStatus:', error);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.');
    }
};

exports.extendSubscription = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;
    const name = first_name || username;
    try {
        await ctx.answerCbQuery();
        await ctx.reply(
            `*–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ (${process.env.VPN_PRICE} —Ä—É–±.):*\n\n` +
            paymentDetails(userId, name) +
            `\n\n*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞.*`,
            {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ extendSubscription:', error);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.');
    }
};

exports.promptForQuestion = async (ctx) => {
    try {
        await ctx.answerCbQuery('‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.');
        await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ promptForQuestion:', error);
    }
};

exports.handleVpnConfigured = async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    try {
        const user = await User.findOneAndUpdate({ userId }, { vpnConfigured: true }, { new: true });
        
        let userName = user?.firstName || user?.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
        if (user?.username) {
            userName = `${userName} (@${user.username})`;
        }
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üéâ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª VPN!*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (ID: ${userId})`
        );

        await ctx.answerCbQuery('‚úÖ –û—Ç–ª–∏—á–Ω–æ!');
        await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! VPN —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!');
        
        await ctx.deleteMessage().catch(e => console.error("Could not delete message:", e));
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ vpn_configured –¥–ª—è ${userId}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
};

exports.promptVpnFailure = async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    try {
        await ctx.answerCbQuery('‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.');
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —Å —á–µ–º –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN. –Ø –ø–µ—Ä–µ—à–ª—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        
        ctx.session.awaitingVpnTroubleshoot = userId;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ vpn_failed –¥–ª—è ${userId}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
};

exports.promptCancelSubscription = async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n\n' +
        '–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN.',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', 'cancel_subscription_final'),
                Markup.button.callback('‚úÖ –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', 'cancel_subscription_abort')
            ]
        ])
    );
};

exports.cancelSubscriptionFinal = async (ctx) => {
    const userId = ctx.from.id;
    try {
        const user = await User.findOneAndUpdate(
            { userId },
            { status: 'inactive', expireDate: null },
            { new: true }
        );

        await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        await ctx.reply('–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ VPN –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.');
        
        let userName = user?.firstName || user?.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
        if (user?.username) {
            userName = `${userName} (@${user.username})`;
        }
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É!*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (ID: ${userId})`
        );
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${userId}:`, error);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏.');
    }
};

exports.cancelSubscriptionAbort = async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π.');
};