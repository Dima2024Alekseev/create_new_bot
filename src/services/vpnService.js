const axios = require('axios');
const tough = require('tough-cookie');
const { wrapper } = require('axios-cookiejar-support');

const cookieJar = new tough.CookieJar();
const api = wrapper(axios.create({
    baseURL: process.env.WG_API_URL,
    jar: cookieJar,
    withCredentials: true,
    timeout: 10000
}));

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
api.interceptors.request.use(config => {
    console.log(`‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
});

api.interceptors.response.use(response => {
    console.log(`‚¨ÖÔ∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${response.status} ${response.config.url}`);
    return response;
}, error => {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.config?.url} | ${error.response?.status}`);
    return Promise.reject(error);
});

const login = async () => {
    try {
        const response = await api.post('/api/session', {
            password: process.env.WG_API_PASSWORD
        });
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return response.headers['set-cookie'];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
            status: error.response?.status,
            data: error.response?.data,
            headers: error.response?.headers
        });
        throw error;
    }
};

exports.createVpnClient = async (clientName) => {
    try {
        // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const cookies = await login();
        
        // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        console.log('‚åõ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', clientName);
        const createResponse = await api.post('/api/wireguard/client', {
            name: clientName,
            allowedIPs: '10.8.0.0/24'
        });
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤');
        const clientsResponse = await api.get('/api/wireguard/clients');
        const clientExists = clientsResponse.data.some(c => c.name === clientName);
        
        if (!clientExists) {
            throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
        }

        // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (3 –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        let config;
        for (let i = 0; i < 3; i++) {
            try {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i+1} –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
                const response = await api.get(
                    `/api/wireguard/client/${clientName}/configuration`,
                    { responseType: 'text' }
                );
                
                if (response.data.includes('[Interface]')) {
                    config = response.data;
                    break;
                }
            } catch (error) {
                if (i === 2) throw error;
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }

        if (!config) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
        }

        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
        return config;

    } catch (error) {
        console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
            message: error.message,
            stack: error.stack,
            response: error.response?.data
        });
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        try {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
            const config = await getConfigViaWebInterface(clientName);
            return config;
        } catch (fallbackError) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message} | Fallback —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${fallbackError.message}`);
        }
    }
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function getConfigViaWebInterface(clientName) {
    const puppeteer = require('puppeteer');
    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();

    try {
        await page.goto(`${process.env.WG_API_URL}/login`, { waitUntil: 'networkidle2' });
        await page.type('input[name="password"]', process.env.WG_API_PASSWORD);
        await page.click('button[type="submit"]');
        await page.waitForNavigation();
        
        await page.goto(`${process.env.WG_API_URL}/client/${clientName}/download`);
        const config = await page.evaluate(() => document.body.innerText);
        
        if (!config.includes('[Interface]')) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }
        
        return config;
    } finally {
        await browser.close();
    }
}