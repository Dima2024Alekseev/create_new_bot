const User = require('../models/User');
const Review = require('../models/Review');
const { Markup } = require('telegraf');
const { formatDate } = require('../utils/helpers');

/**
 * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
 */
exports.startReview = async (ctx) => {
    const userId = ctx.from.id;

    try {
        const user = await User.findOne({ userId });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if (!user || user.status !== 'active') {
            return ctx.reply('‚ö†Ô∏è –û—Ç–∑—ã–≤ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤ –Ω–µ–¥–∞–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        const recentReview = await Review.findOne({
            userId,
            createdAt: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }
        });

        if (recentReview) {
            return ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º reviewData –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        delete ctx.session.reviewData;
        ctx.session.reviewData = {};

        await ctx.reply(
            '‚≠ê *–û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã VPN*\n\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã VPN –æ—Ç 1 –¥–æ 5 –∑–≤—ë–∑–¥:',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚≠ê 1', callback_data: 'review_rating_1' },
                            { text: '‚≠ê‚≠ê 2', callback_data: 'review_rating_2' },
                            { text: '‚≠ê‚≠ê‚≠ê 3', callback_data: 'review_rating_3' }
                        ],
                        [
                            { text: '‚≠ê‚≠ê‚≠ê‚≠ê 4', callback_data: 'review_rating_4' },
                            { text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5', callback_data: 'review_rating_5' }
                        ],
                        [
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'review_cancel' }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
 */
exports.handleRating = async (ctx) => {
    const rating = parseInt(ctx.match[1]);
    const userId = ctx.from.id;

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.reviewData = {
            rating,
            userId,
            username: ctx.from.username,
            firstName: ctx.from.first_name
        };

        await ctx.editMessageText(
            `‚≠ê *–û—Ü–µ–Ω–∫–∞: ${rating} –∏–∑ 5*\n\n` +
            '–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã VPN:',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üöÄ –û—Ç–ª–∏—á–Ω–æ', callback_data: 'review_speed_excellent' },
                            { text: 'üëç –•–æ—Ä–æ—à–æ', callback_data: 'review_speed_good' }
                        ],
                        [
                            { text: 'üëå –°—Ä–µ–¥–Ω–µ', callback_data: 'review_speed_average' },
                            { text: 'üëé –ü–ª–æ—Ö–æ', callback_data: 'review_speed_poor' }
                        ],
                        [
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'review_cancel' }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏
 */
exports.handleSpeed = async (ctx) => {
    const speed = ctx.match[1];

    try {
        ctx.session.reviewData.vpnSpeed = speed;

        const speedText = getSpeedText(speed);

        await ctx.editMessageText(
            `‚≠ê *–û—Ü–µ–Ω–∫–∞: ${ctx.session.reviewData.rating} –∏–∑ 5*\n` +
            `üöÄ *–°–∫–æ—Ä–æ—Å—Ç—å: ${speedText}*\n\n` +
            '–û—Ü–µ–Ω–∏—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîí –û—Ç–ª–∏—á–Ω–æ', callback_data: 'review_stability_excellent' },
                            { text: 'üëç –•–æ—Ä–æ—à–æ', callback_data: 'review_stability_good' }
                        ],
                        [
                            { text: 'üëå –°—Ä–µ–¥–Ω–µ', callback_data: 'review_stability_average' },
                            { text: 'üëé –ü–ª–æ—Ö–æ', callback_data: 'review_stability_poor' }
                        ],
                        [
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'review_cancel' }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫–æ—Ä–æ—Å—Ç–∏:', error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
 */
exports.handleStability = async (ctx) => {
    const stability = ctx.match[1];

    try {
        if (!['excellent', 'good', 'average', 'poor'].includes(stability)) {
            throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
        }
        ctx.session.reviewData.vpnStability = stability;

        const speedText = getSpeedText(ctx.session.reviewData.vpnSpeed);
        const stabilityText = getStabilityText(stability);

        await ctx.editMessageText(
            `‚≠ê *–û—Ü–µ–Ω–∫–∞: ${ctx.session.reviewData.rating} –∏–∑ 5*\n` +
            `üöÄ *–°–∫–æ—Ä–æ—Å—Ç—å: ${speedText}*\n` +
            `üîí *–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${stabilityText}*\n\n` +
            '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'review_add_comment' },
                            { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data: 'review_finish' }
                        ],
                        [
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'review_cancel' }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:', error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
exports.requestComment = async (ctx) => {
    try {
        ctx.session.awaitingReviewComment = true;

        await ctx.editMessageText(
            '‚úçÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è*\n\n' +
            '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ä–∞–±–æ—Ç–µ VPN (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'review_cancel' }]
                    ]
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
 */
exports.finishReview = async (ctx, comment = null) => {
    try {
        const reviewData = ctx.session.reviewData;

        if (!reviewData) {
            return ctx.reply('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!reviewData.vpnSpeed) reviewData.vpnSpeed = 'not_specified';
        if (!reviewData.vpnStability) reviewData.vpnStability = 'not_specified';
        if (comment) {
            reviewData.comment = comment.trim(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        } else {
            delete reviewData.comment; // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤–≤–µ–¥—ë–Ω
        }

        // –°–æ–∑–¥–∞—ë–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        const review = new Review({
            userId: reviewData.userId,
            username: reviewData.username,
            firstName: reviewData.firstName,
            rating: reviewData.rating,
            comment: reviewData.comment,
            vpnSpeed: reviewData.vpnSpeed,
            vpnStability: reviewData.vpnStability
        });
        await review.save();

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.reviewData;
        delete ctx.session.awaitingReviewComment;

        const speedText = getSpeedText(reviewData.vpnSpeed);
        const stabilityText = getStabilityText(reviewData.vpnStability);

        let message = `‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!*\n\n` +
            `‚≠ê –û—Ü–µ–Ω–∫–∞: ${reviewData.rating} –∏–∑ 5\n` +
            `üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ${speedText}\n` +
            `üîí –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${stabilityText}`;

        if (reviewData.comment) {
            message += `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${reviewData.comment}"`;
        } else {
            message += '\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
        }

        message += `\n\n_–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞!_`;

        if (ctx.callbackQuery) {
            await ctx.editMessageText(message, { parse_mode: 'Markdown' });
        } else {
            await ctx.replyWithMarkdown(message);
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üìù *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ VPN*\n\n` +
            `–û—Ç: ${reviewData.firstName || reviewData.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (ID: ${reviewData.userId})\n` +
            `‚≠ê –û—Ü–µ–Ω–∫–∞: ${reviewData.rating}/5\n` +
            `üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ${speedText}\n` +
            `üîí –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${stabilityText}` +
            (reviewData.comment ? `\nüí¨ "${reviewData.comment}"` : '\nüí¨ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'),
            { parse_mode: 'Markdown' }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

/**
 * –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
 */
exports.cancelReview = async (ctx) => {
    try {
        delete ctx.session.reviewData;
        delete ctx.session.awaitingReviewComment;

        await ctx.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        await ctx.answerCbQuery();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–∑—ã–≤–∞:', error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
 */
const getSpeedText = (speed) => {
    switch (speed) {
        case 'excellent': return '–û—Ç–ª–∏—á–Ω–æ';
        case 'good': return '–•–æ—Ä–æ—à–æ';
        case 'average': return '–°—Ä–µ–¥–Ω–µ';
        case 'poor': return '–ü–ª–æ—Ö–æ';
        case 'not_specified': return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        default: return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
 */
const getStabilityText = (stability) => {
    switch (stability) {
        case 'excellent': return '–û—Ç–ª–∏—á–Ω–æ';
        case 'good': return '–•–æ—Ä–æ—à–æ';
        case 'average': return '–°—Ä–µ–¥–Ω–µ';
        case 'poor': return '–ü–ª–æ—Ö–æ';
        case 'not_specified': return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        default: return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }
};