const cron = require('node-cron');
const User = require('../models/User');
const Question = require('../models/Question');
const { paymentDetails, formatDate } = require('../utils/helpers');

exports.setupReminders = (bot) => {
  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 10:00
  cron.schedule('0 10 * * *', async () => {
    try {
      // 1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
      const expiringUsers = await User.find({
        status: 'active',
        expireDate: { 
          $lte: new Date(Date.now() + process.env.REMIND_DAYS * 86400000),
          $gt: new Date()
        },
        $or: [
          { lastReminder: { $exists: false } },
          { lastReminder: { $lt: new Date(Date.now() - 86400000) } }
        ]
      });

      for (const user of expiringUsers) {
        try {
          const daysLeft = Math.ceil((user.expireDate - new Date()) / 86400000);
          
          await bot.telegram.sendMessage(
            user.userId,
            `‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π!*\n\n` +
            `–ü—Ä–æ–¥–ª–∏—Ç–µ VPN –∑–∞ ${process.env.VPN_PRICE} —Ä—É–±.\n\n` +
            paymentDetails(user.userId),
            { parse_mode: 'Markdown' }
          );
          
          await User.updateOne(
            { userId: user.userId },
            { lastReminder: new Date() }
          );
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${user.userId}:`, e.message);
        }
      }

      // 2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
      const pendingQuestions = await Question.countDocuments({ 
        status: 'pending',
        createdAt: { $gt: new Date(Date.now() - 7 * 86400000) } // –¢–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      });

      if (pendingQuestions > 0) {
        await bot.telegram.sendMessage(
          process.env.ADMIN_ID,
          `üîî –£ –≤–∞—Å ${pendingQuestions} –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /questions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n` +
          `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: ${formatDate(new Date())}`
        );
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
    }
  });

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –æ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
  cron.schedule('0 */3 * * *', async () => {
    const urgentQuestions = await Question.countDocuments({
      status: 'pending',
      createdAt: { $lt: new Date(Date.now() - 86400000) } // –°—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã (>24 —á–∞—Å–æ–≤)
    });
    
    if (urgentQuestions > 0) {
      await bot.telegram.sendMessage(
        process.env.ADMIN_ID,
        `üö® –°—Ä–æ—á–Ω–æ! ${urgentQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤!`
      );
    }
  });
};