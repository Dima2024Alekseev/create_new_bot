const User = require('../models/User');
const Question = require('../models/Question');
const { Markup } = require('telegraf');
const { checkAdmin } = require('../utils/auth');
const { formatDate } = require('../utils/helpers');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.handleQuestion = async (ctx) => {
    const userId = ctx.from.id;
    const questionText = ctx.message.text;

    try {
        const user = await User.findOne({ userId });
        const name = user?.firstName || user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        const newQuestion = new Question({
            userId,
            questionText: questionText,
            status: 'pending'
        });

        await newQuestion.save();

        const questionId = newQuestion._id.toString();

        const keyboard = Markup.inlineKeyboard([
            Markup.button.callback('‚û°Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `answer_${questionId}`)
        ]);

        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `‚ùì *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç ${name}* (ID: ${userId}):\n` +
            `\n${questionText}`,
            { parse_mode: 'Markdown', ...keyboard }
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (user && user.status === 'active') {
            await ctx.reply('‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        } else {
            await ctx.reply(
                '‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' +
                '\n\n' +
                '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É. ' +
                '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.'
            );
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.');
    }
};

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.listQuestions = async (ctx) => {
    if (!checkAdmin(ctx)) {
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.');
        }
        return ctx.reply('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.');
    }

    if (ctx.callbackQuery) {
        await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å—ã...');
    }

    try {
        const questions = await Question.find({ status: 'pending' }).sort({ createdAt: -1 }).limit(10);

        if (!questions.length) {
            return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.');
        }

        let message = 'üìã *–û–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å—ã:*\n\n';
        const keyboardButtons = [];

        for (const question of questions) {
            const user = await User.findOne({ userId: question.userId });
            const name = user?.firstName || user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            const questionId = question._id.toString();
            const date = new Date(question.createdAt).toLocaleString('ru-RU', { timeZone: 'Asia/Krasnoyarsk' });

            message += `*–í–æ–ø—Ä–æ—Å –æ—Ç ${name}* (ID: ${question.userId}) ${date}:\n` +
                `_${question.questionText.slice(0, 50)}..._\n\n`;

            keyboardButtons.push(
                Markup.button.callback(`‚û°Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç ${name}`, `answer_${questionId}`)
            );
        }
        
        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard(keyboardButtons, { columns: 1 }).reply_markup
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.');
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.handleAnswer = async (ctx) => {
    const questionId = ctx.session.awaitingAnswerFor;
    const answerText = ctx.message.text;

    try {
        const question = await Question.findById(questionId);
        if (!question) {
            return ctx.reply('‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // ‚ö†Ô∏è –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await ctx.telegram.sendMessage(
            question.userId,
            `‚úÖ *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n\n` +
            `"${answerText}"\n\n` +
            `_–í–∞—à –≤–æ–ø—Ä–æ—Å: "${question.questionText}"_`,
            { parse_mode: 'Markdown' }
        );

        question.status = 'answered';
        question.answer = answerText;
        await question.save();

        await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
        ctx.session.awaitingAnswerFor = null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.');
    }
};