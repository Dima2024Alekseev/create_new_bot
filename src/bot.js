require('dotenv').config({ path: __dirname + '/../primer.env' });

const { Telegraf, session, Markup } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const connectDB = require('./config/db');
const User = require('./models/User');

const {
  handleStart,
  checkSubscriptionStatus,
  extendSubscription,
  promptForQuestion,
  handleVpnConfigured,
  promptVpnFailure,
  promptCancelSubscription,
  cancelSubscriptionFinal,
  cancelSubscriptionAbort
} = require('./controllers/userController');

const {
  handlePhoto,
  handleApprove,
  handleReject,
  handleRejectSimple,
  handleRejectWithComment,
  handleCancelRejection,
  handleReviewLater,
  finalizeRejectionWithComment
} = require('./controllers/paymentController');
const {
  checkPayments,
  stats,
  checkAdminMenu,
  handlePaymentsPage,
  listUsers,
  handleUsersPage,
  listReviews,
  handleReviewsPage,
  showBroadcastMenu,
  startBroadcast,
  executeBroadcast,
  cancelBroadcast
} = require('./controllers/adminController');
const { handleQuestion, handleAnswer, listQuestions } = require('./controllers/questionController');
const {
  startReview,
  handleRating,
  handleSpeed,
  handleStability,
  requestComment,
  finishReview,
  cancelReview
} = require('./controllers/reviewController');
const { setupReminders } = require('./services/reminderService');
const { checkAdmin } = require('./utils/auth');
const { setConfig, getConfig } = require('./services/configService');

const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: {
    agent: null,
    handshakeTimeout: 30000
  }
});

bot.use((new LocalSession({ database: 'session_db.json' })).middleware());

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
async function finalizePriceChange(ctx, newPrice) {
  const oldPrice = await getConfig('vpn_price', 132);
  await setConfig('vpn_price', newPrice);

  delete ctx.session.awaitingNewPrice;
  delete ctx.session.pendingPriceChange;

  await ctx.reply(`‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${oldPrice} ‚ÇΩ –Ω–∞ ${newPrice} ‚ÇΩ`);
  await checkAdminMenu(ctx);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log(`[PRICE CHANGE] Admin ${ctx.from.id} changed price from ${oldPrice} to ${newPrice} RUB`);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
async function finalizePaymentDetailsChange(ctx, newPhone, newCard, newBank) {
  const oldPhone = await getConfig('payment_phone', '+7 (995) 431-34-57');
  const oldCard = await getConfig('payment_card', '2202 2050 2287 6913');
  const oldBank = await getConfig('payment_bank', '–°–±–µ—Ä–±–∞–Ω–∫');

  await setConfig('payment_phone', newPhone);
  await setConfig('payment_card', newCard);
  await setConfig('payment_bank', newBank);

  delete ctx.session.awaitingPaymentPhone;
  delete ctx.session.awaitingPaymentCard;
  delete ctx.session.awaitingPaymentBank;
  delete ctx.session.pendingPaymentDetailsChange;

  await ctx.reply(
    `‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã:\n` +
    `–¢–µ–ª–µ—Ñ–æ–Ω: ${oldPhone} ‚Üí ${newPhone}\n` +
    `–ö–∞—Ä—Ç–∞: ${oldCard} ‚Üí ${newCard}\n` +
    `–ë–∞–Ω–∫: ${oldBank} ‚Üí ${newBank}`
  );
  await checkAdminMenu(ctx);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log(`[PAYMENT DETAILS CHANGE] Admin ${ctx.from.id} changed payment details: ` +
    `phone from ${oldPhone} to ${newPhone}, ` +
    `card from ${oldCard} to ${newCard}, ` +
    `bank from ${oldBank} to ${newBank}`);
}

connectDB().catch(err => {
  console.error('‚ùå MongoDB connection failed:', err);
  process.exit(1);
});

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ---
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ö†Ô∏è Unhandled Rejection at:', promise, 'reason:', reason);
  console.error('Stack trace:', reason.stack);
});

process.on('uncaughtException', async (err) => {
  console.error('‚ö†Ô∏è Uncaught Exception:', err);
  console.error('Stack trace:', err.stack);
  try {
    await bot.telegram.sendMessage(process.env.ADMIN_ID, `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: ${err.message}\n\`\`\`\n${err.stack}\n\`\`\``, { parse_mode: 'Markdown' }).catch(e => console.error("Error sending exception to admin:", e));
  } catch (e) {
    console.error("Failed to send uncaught exception to admin:", e);
  }
  await bot.stop().catch(e => console.error("Error stopping bot on uncaught exception:", e));
  process.exit(1);
});

// --- Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ ---
bot.use(async (ctx, next) => {
  if (ctx.from?.id === parseInt(process.env.ADMIN_ID)) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.session?.awaitingAnswerFor && ctx.message?.text) {
      await handleAnswer(ctx);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å VPN
    if (ctx.session?.awaitingAnswerVpnIssueFor && ctx.message?.text) {
      const targetUserId = ctx.session.awaitingAnswerVpnIssueFor;
      const adminAnswer = ctx.message.text;

      try {
        await ctx.telegram.sendMessage(
          targetUserId,
          `üõ†Ô∏è *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN:*\n\n` +
          `"${adminAnswer}"`,
          { parse_mode: 'Markdown' }
        );
        await ctx.reply(`‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}:`, error);
        await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.`);
      } finally {
        ctx.session.awaitingAnswerVpnIssueFor = null;
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    if (ctx.session?.awaitingBroadcastMessage && ctx.message?.text) {
      const broadcastMessage = ctx.message.text.trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      if (broadcastMessage.length < 1) {
        return ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:');
      }

      if (broadcastMessage.length > 4000) {
        return ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤:');
      }

      ctx.session.awaitingBroadcastMessage = false;
      const { confirmBroadcast } = require('./controllers/adminController');
      await confirmBroadcast(ctx, broadcastMessage);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞
    if (ctx.session?.awaitingRejectionCommentFor && ctx.message?.text) {
      const rejectionComment = ctx.message.text.trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      if (rejectionComment.length < 5) {
        return ctx.reply('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤:');
      }

      if (rejectionComment.length > 500) {
        return ctx.reply('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤:');
      }

      await finalizeRejectionWithComment(ctx, rejectionComment);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
    if (ctx.session?.awaitingNewPrice && ctx.message?.text) {
      const newPrice = parseInt(ctx.message.text);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (isNaN(newPrice)) {
        return ctx.reply('‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      }

      if (newPrice < 50) {
        return ctx.reply('‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 50 ‚ÇΩ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:');
      }

      if (newPrice > 5000) {
        return ctx.reply('‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 5000 ‚ÇΩ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:');
      }

      const oldPrice = await getConfig('vpn_price', 132);

      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 500 —Ä—É–± - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      if (Math.abs(newPrice - oldPrice) > 500) {
        ctx.session.pendingPriceChange = {
          newPrice,
          oldPrice
        };

        return ctx.reply(
          `‚ö†Ô∏è –í—ã –∏–∑–º–µ–Ω—è–µ—Ç–µ —Ü–µ–Ω—É –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 500 ‚ÇΩ\n` +
          `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${oldPrice} ‚ÇΩ\n` +
          `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice} ‚ÇΩ\n\n` +
          `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:`,
          Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_price_change')],
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_price_change')]
          ])
        );
      }

      await finalizePriceChange(ctx, newPrice);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    if (ctx.session?.awaitingPaymentPhone && ctx.message?.text) {
      const newPhone = ctx.message.text.trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneRegex = /^\+?\d{1,4}?[-.\s]?\(?\d{1,3}?\)?[-.\s]?\d{1,4}[-.\s]?\d{1,4}[-.\s]?\d{1,9}$/;
      if (!phoneRegex.test(newPhone)) {
        return ctx.reply('‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:');
      }

      ctx.session.pendingPaymentDetailsChange = ctx.session.pendingPaymentDetailsChange || {};
      ctx.session.pendingPaymentDetailsChange.phone = newPhone;
      ctx.session.awaitingPaymentPhone = false;
      ctx.session.awaitingPaymentCard = true;

      return ctx.reply('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1234 5678 9012 3456):');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if (ctx.session?.awaitingPaymentCard && ctx.message?.text) {
      const newCard = ctx.message.text.trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
      const cardRegex = /^\d{4}\s?\d{4}\s?\d{4}\s?\d{4}$/;
      if (!cardRegex.test(newCard)) {
        return ctx.reply('‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1234 5678 9012 3456):');
      }

      ctx.session.pendingPaymentDetailsChange.card = newCard;
      ctx.session.awaitingPaymentCard = false;
      ctx.session.awaitingPaymentBank = true;

      return ctx.reply('üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
    if (ctx.session?.awaitingPaymentBank && ctx.message?.text) {
      const newBank = ctx.message.text.trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
      if (newBank.length < 2 || newBank.length > 50) {
        return ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤:');
      }

      const newPhone = ctx.session.pendingPaymentDetailsChange.phone;
      const newCard = ctx.session.pendingPaymentDetailsChange.card;

      ctx.session.awaitingPaymentBank = false;

      return ctx.reply(
        `üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤*\n\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${newPhone}\n` +
        `–ö–∞—Ä—Ç–∞: ${newCard}\n` +
        `–ë–∞–Ω–∫: ${newBank}\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_payment_details_change')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_payment_details_change')]
        ])
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  if (ctx.session?.awaitingReviewComment && ctx.message?.text) {
    const reviewComment = ctx.message.text.trim();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if (reviewComment.length > 500) {
      return ctx.reply('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤:');
    }

    ctx.session.awaitingReviewComment = false;
    await finishReview(ctx, reviewComment);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (ctx.session?.awaitingVpnTroubleshoot && ctx.from?.id === ctx.session.awaitingVpnTroubleshoot && ctx.message?.text) {
    const userId = ctx.from.id;
    const problemDescription = ctx.message.text;
    const user = await User.findOne({ userId });

    let userName = user?.firstName || user?.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    if (user?.username) {
      userName = `${userName} (@${user.username})`;
    }

    await ctx.telegram.sendMessage(
      process.env.ADMIN_ID,
      `üö® *–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} (ID: ${userId}):*\n\n` +
      `"${problemDescription}"`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚û°Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data: `answer_vpn_issue_${userId}` }]
          ]
        }
      }
    );

    await ctx.reply('‚úÖ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.');
    ctx.session.awaitingVpnTroubleshoot = null;
    return;
  }

  return next();
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
bot.start(async (ctx) => {
  if (checkAdmin(ctx)) {
    await checkAdminMenu(ctx);
  } else {
    await handleStart(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx, next) => {
  if (ctx.from?.id === parseInt(process.env.ADMIN_ID) && (ctx.session?.awaitingAnswerFor || ctx.session?.awaitingAnswerVpnIssueFor || ctx.session?.awaitingNewPrice || ctx.session?.awaitingRejectionCommentFor || ctx.session?.awaitingBroadcastMessage || ctx.session?.awaitingPaymentPhone || ctx.session?.awaitingPaymentCard || ctx.session?.awaitingPaymentBank)) {
    return next();
  }

  if (ctx.session?.awaitingReviewComment) {
    return next();
  }

  if (ctx.session?.awaitingPaymentProof) {
    return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, –∞ –Ω–µ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ /start.');
  }

  if (ctx.message.text.startsWith('/')) {
    return next();
  }

  if (checkAdmin(ctx)) {
    return ctx.reply("–û –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –Ω–µ —ç—Ç–æ... –¢—ã –¥–æ—à—ë–ª –¥–æ —Å—Ç–∞–¥–∏–∏ '–Ω–∞–ø–∏—à—É –±–æ—Ç—É, –≤–¥—Ä—É–≥ –æ—Ç–≤–µ—Ç–∏—Ç'? üò≠ –ë—Ä–æ, —Å—Ä–æ—á–Ω–æ –∂–º–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚Äî –æ–Ω–∞ —Ö–æ—Ç—è –±—ã –¥–µ–ª–∞–µ—Ç –≤–∏–¥, —á—Ç–æ —Å–ª—É—à–∞–µ—Ç, –∞ –Ω–µ —Ç—É–ø–æ —à–ª—ë—Ç —Å—Ç–∏–∫–µ—Ä—ã. üö®ü§ñ");
  } else {
    await handleQuestion(ctx);
  }
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('admin', checkAdminMenu);
bot.command('check', checkPayments);
bot.command('stats', stats);
bot.command('questions', listQuestions);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (—Ñ–æ—Ç–æ)
bot.on('photo', handlePhoto);

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (callback_data) ---

// –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
bot.action(/approve_(\d+)/, handleApprove);
bot.action(/reject_(\d+)/, handleReject);
bot.action(/reject_simple_(\d+)/, handleRejectSimple);
bot.action(/reject_with_comment_(\d+)/, handleRejectWithComment);
bot.action(/cancel_rejection_(\d+)/, handleCancelRejection);
bot.action(/review_later_(\d+)/, handleReviewLater);
bot.action('list_questions', listQuestions);
bot.action('check_payments_admin', checkPayments);
bot.action('show_stats_admin', stats);
bot.action('refresh_stats', stats);
bot.action('list_users_admin', listUsers);
bot.action('list_reviews_admin', listReviews);
bot.action('mass_broadcast_admin', showBroadcastMenu);
bot.action(/payments_page_(\d+)/, handlePaymentsPage);
bot.action(/users_page_(\d+)/, handleUsersPage);
bot.action(/reviews_page_(\d+)/, handleReviewsPage);
bot.action(/broadcast_(.+)/, startBroadcast);
bot.action('execute_broadcast', executeBroadcast);
bot.action('cancel_broadcast', cancelBroadcast);
bot.action('back_to_admin_menu', checkAdminMenu);
bot.action('set_price_admin', async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const currentPrice = await getConfig('vpn_price', 132);
  ctx.session.awaitingNewPrice = true;

  await ctx.reply(
    `‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n` +
    `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${currentPrice} ‚ÇΩ</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–æ—Ç 50 –¥–æ 5000 ‚ÇΩ):`,
    {
      parse_mode: 'HTML',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_price_change')]
      ])
    }
  );

  await ctx.answerCbQuery();
});

bot.action('set_payment_details_admin', async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  ctx.session.awaitingPaymentPhone = true;
  ctx.session.pendingPaymentDetailsChange = {};

  await ctx.reply(
    `‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79954313457):`,
    {
      parse_mode: 'HTML',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_payment_details_change')]
      ])
    }
  );

  await ctx.answerCbQuery();
});

bot.action('confirm_price_change', async (ctx) => {
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  const { newPrice, oldPrice } = ctx.session.pendingPriceChange;
  await finalizePriceChange(ctx, newPrice);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log(`–ê–¥–º–∏–Ω ${ctx.from.id} –∏–∑–º–µ–Ω–∏–ª —Ü–µ–Ω—É —Å ${oldPrice} –Ω–∞ ${newPrice} —Ä—É–±`);
  await ctx.answerCbQuery();
});

bot.action('cancel_price_change', async (ctx) => {
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  delete ctx.session.pendingPriceChange;
  delete ctx.session.awaitingNewPrice;

  await ctx.reply('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ');
  await ctx.answerCbQuery();
  await checkAdminMenu(ctx);
});

bot.action('confirm_payment_details_change', async (ctx) => {
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  const { phone, card, bank } = ctx.session.pendingPaymentDetailsChange;
  await finalizePaymentDetailsChange(ctx, phone, card, bank);

  await ctx.answerCbQuery();
});

bot.action('cancel_payment_details_change', async (ctx) => {
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  delete ctx.session.pendingPaymentDetailsChange;
  delete ctx.session.awaitingPaymentPhone;
  delete ctx.session.awaitingPaymentCard;
  delete ctx.session.awaitingPaymentBank;

  await ctx.reply('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  await ctx.answerCbQuery();
  await checkAdminMenu(ctx);
});

bot.action(/answer_([0-9a-fA-F]{24})/, async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  ctx.session.awaitingAnswerFor = ctx.match[1];
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  await ctx.answerCbQuery();
});

bot.action(/answer_vpn_issue_(\d+)/, async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  const targetUserId = parseInt(ctx.match[1]);
  ctx.session.awaitingAnswerVpnIssueFor = targetUserId;
  await ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –ø–æ –µ–≥–æ –ø—Ä–æ–±–ª–µ–º–µ —Å VPN:`);
  await ctx.answerCbQuery();
});

// –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('check_subscription', async (ctx) => {
  await checkSubscriptionStatus(ctx);
  await ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]])
  );
});
bot.action('ask_question', promptForQuestion);
bot.action('extend_subscription', async (ctx) => {
  await extendSubscription(ctx);
  await ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]])
  );
});
bot.action('leave_review', async (ctx) => {
  await startReview(ctx);
  await ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]])
  );
});
bot.action(/vpn_configured_(\d+)/, handleVpnConfigured);
bot.action(/vpn_failed_(\d+)/, promptVpnFailure);
bot.action('back_to_user_menu', async (ctx) => {
  await ctx.answerCbQuery();
  await handleStart(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('cancel_subscription_confirm', async (ctx) => {
  await promptCancelSubscription(ctx);
  await ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.inlineKeyboard([[Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]])
  );
});
bot.action('cancel_subscription_final', cancelSubscriptionFinal);
bot.action('cancel_subscription_abort', cancelSubscriptionAbort);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
bot.action(/review_rating_(\d+)/, handleRating);
bot.action(/review_speed_(.+)/, handleSpeed);
bot.action(/review_stability_(.+)/, handleStability);
bot.action('review_add_comment', requestComment);
bot.action('review_finish', finishReview);
bot.action('review_cancel', cancelReview);

// --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
setupReminders(bot);

// --- –ó–∞–ø—É—Å–∫ ---
bot.launch()
  .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Q&A + Payments)'))
  .catch(err => {
    console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  });

// Graceful shutdown
['SIGINT', 'SIGTERM'].forEach(signal => {
  process.once(signal, async () => {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
    try {
      await bot.stop();
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
      process.exit(1);
    }
  });
});