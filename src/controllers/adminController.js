const User = require('../models/User');
const Question = require('../models/Question');
const { formatDate } = require('../utils/helpers');
const { Markup } = require('telegraf');
const { checkAdmin } = require('../utils/auth');
const { getConfig, setConfig } = require('../services/configService');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 */
exports.checkPayments = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }

    try {
        const pendingUsers = await User.find({ status: 'pending' }).sort({ createdAt: 1 });

        if (pendingUsers.length === 0) {
            await ctx.reply('‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
            return ctx.answerCbQuery();
        }

        for (const user of pendingUsers) {
            let message = `üì∏ *–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
                `ID: ${user.userId}\n` +
                `–ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${formatDate(user.paymentPhotoDate || user.createdAt)}\n` +
                `–ü–æ–ø—ã—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã: ${user.subscriptionCount || 0}`;

            if (user.rejectionComment) {
                message += `\n\n*–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:*\n"${user.rejectionComment}"`;
            }

            if (user.paymentPhotoId) {
                await ctx.telegram.sendPhoto(
                    ctx.chat.id,
                    user.paymentPhotoId,
                    {
                        caption: message,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${user.userId}` },
                                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º', callback_data: `reject_${user.userId}` }
                                ],
                                [
                                    { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ', callback_data: 'defer_payment' }
                                ]
                            ]
                        }
                    }
                );
            } else {
                await ctx.replyWithMarkdown(
                    `‚ö†Ô∏è *–ó–∞—è–≤–∫–∞ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç ${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${user.userId})*\n\n` +
                    message,
                    { parse_mode: 'Markdown' }
                );
            }
        }
        await ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ!');
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
 */
exports.stats = async (ctx) => {
    if (!checkAdmin(ctx)) {
        if (ctx.callbackQuery) {
            return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
        }
        return;
    }

    try {
        const [
            totalUsers,
            activeUsers,
            pendingPayments,
            pendingQuestions,
            last7DaysUsers
        ] = await Promise.all([
            User.countDocuments(),
            User.countDocuments({ status: 'active' }),
            User.countDocuments({ status: 'pending' }),
            Question.countDocuments({ status: 'pending' }),
            User.countDocuments({
                createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
            })
        ]);

        const latestSubscription = await User.findOne({
            status: 'active',
            expireDate: { $exists: true }
        }).sort({ expireDate: -1 }).limit(1);

        let latestExpireDate = 'N/A';
        if (latestSubscription && latestSubscription.expireDate) {
            latestExpireDate = formatDate(latestSubscription.expireDate, true);
        }

        const currentPrice = await getConfig('vpn_price', 132);

        let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞*\n\n` +
            `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${currentPrice} ‚ÇΩ*\n` +
            `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${totalUsers}*\n` +
            `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: *${activeUsers}*\n` +
            `‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: *${pendingPayments}*\n` +
            `‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: *${pendingQuestions}*\n` +
            `üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (7 –¥–Ω–µ–π): *${last7DaysUsers}*\n` +
            `üóì –°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: *${latestExpireDate}*`;

        await ctx.replyWithMarkdown(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }],
                    [{ text: 'üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏', callback_data: 'check_payments_admin' }]
                ]
            }
        });

        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        if (ctx.callbackQuery) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');
        } else {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
    }
};

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
exports.checkAdminMenu = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return;
    }

    const currentPrice = await getConfig('vpn_price', 132);
    const pendingPayments = await User.countDocuments({ status: 'pending' });
    const pendingQuestions = await Question.countDocuments({ status: 'pending' });

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(`üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ (${pendingPayments})`, 'check_payments_admin')],
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats_admin')],
        [Markup.button.callback(`‚ùì –í–æ–ø—Ä–æ—Å—ã (${pendingQuestions})`, 'list_questions')],
        [
            Markup.button.callback(
                `üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É (–¢–µ–∫—É—â–∞—è: ${currentPrice} ‚ÇΩ)`,
                'set_price_admin'
            )
        ],
        [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã', 'check_new_questions')]
    ]);

    await ctx.reply('‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*', {
        parse_mode: 'Markdown',
        ...keyboard
    });
};

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
 */
exports.listQuestions = async (ctx) => {
    if (!checkAdmin(ctx)) {
        if (ctx.callbackQuery) {
            return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
        }
        return;
    }

    try {
        const questions = await Question.find({ status: 'pending' })
            .sort({ createdAt: 1 })
            .limit(20);

        if (questions.length === 0) {
            await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.');
            return ctx.answerCbQuery();
        }

        for (const question of questions) {
            const user = await User.findOne({ userId: question.userId });
            const name = user?.firstName || user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

            const message = `‚ùì *–í–æ–ø—Ä–æ—Å –æ—Ç ${name}* (ID: ${question.userId})\n` +
                `–î–∞—Ç–∞: ${formatDate(question.createdAt, true)}\n\n` +
                `${question.questionText}\n\n` +
                `_–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞_`;

            await ctx.replyWithMarkdown(message, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚û°Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `answer_${question._id}` },
                            { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_question_${question._id}` }
                        ]
                    ]
                }
            });
        }

        await ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.');
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');
    }
};