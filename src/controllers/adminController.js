const User = require('../models/User');
const Question = require('../models/Question');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∂–∏–º–æ–≤ –∞–¥–º–∏–Ω–∞
const adminModes = {};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞
function checkAdmin(ctx) {
  return ctx.from.id === parseInt(process.env.ADMIN_ID) && 
         (!adminModes[ctx.from.id] || adminModes[ctx.from.id] === 'admin');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
exports.switchMode = async (ctx) => {
  if (ctx.from.id !== parseInt(process.env.ADMIN_ID)) {
    return ctx.reply('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const currentMode = adminModes[ctx.from.id] || 'admin';
  const newMode = currentMode === 'admin' ? 'user' : 'admin';

  adminModes[ctx.from.id] = newMode;

  await ctx.reply(
    `üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: ${newMode === 'admin' ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 'üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n` +
    `–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—Å –∫–∞–∫ –Ω–∞ ${newMode === 'admin' ? '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : '–æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}.\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /switchmode –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.`
  );
};

exports.checkPayments = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.reply('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  try {
    const pendingUsers = await User.find({ status: 'pending' })
      .sort({ createdAt: 1 })
      .limit(50);
    
    if (!pendingUsers.length) {
      return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
    }

    let message = '‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n';
    pendingUsers.forEach((user, index) => {
      message += `${index + 1}. ${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`;
      if (user.username) message += ` (@${user.username})`;
      message += `\nID: ${user.userId}\n`;
      message += `–î–∞—Ç–∞: ${new Date(user.createdAt).toLocaleString('ru-RU')}\n\n`;
    });

    const buttons = [];
    if (pendingUsers.length > 10) {
      buttons.push([{ text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', callback_data: 'clear_payments' }]);
    }

    await ctx.reply(message, {
      reply_markup: { inline_keyboard: buttons }
    });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', err);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
  }
};

exports.stats = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.reply('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const currentMode = adminModes[ctx.from.id] || 'admin';

  try {
    const [usersStats, questionsStats, expiringSoon] = await Promise.all([
      User.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]),
      Question.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]),
      User.find({ 
        status: 'active',
        expireDate: { $lt: new Date(Date.now() + 7 * 86400000) }
      }).sort({ expireDate: 1 }).limit(5)
    ]);

    let statsText = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n';
    
    statsText += 'üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n';
    usersStats.forEach(stat => {
      statsText += `- ${stat._id}: ${stat.count}\n`;
    });

    statsText += '\n‚ùì *–í–æ–ø—Ä–æ—Å—ã:*\n';
    questionsStats.forEach(stat => {
      statsText += `- ${stat._id}: ${stat.count}\n`;
    });

    statsText += '\nüîî *–ë–ª–∏–∂–∞–π—à–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è:*\n';
    if (expiringSoon.length > 0) {
      expiringSoon.forEach(user => {
        const daysLeft = Math.ceil((user.expireDate - new Date()) / 86400000);
        statsText += `- ${user.firstName}: —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π (${user.expireDate.toLocaleDateString('ru-RU')})\n`;
      });
    } else {
      statsText += '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é\n';
    }

    statsText += `\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${currentMode === 'admin' ? 'üëë –ê–¥–º–∏–Ω' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;

    await ctx.replyWithMarkdown(statsText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }],
          [{ text: 'üîÄ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', callback_data: 'switch_mode' }]
        ]
      }
    });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
};