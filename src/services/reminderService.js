const cron = require('node-cron');
const User = require('../models/User');
const Question = require('../models/Question');
const { paymentDetails, formatDate } = require('../utils/helpers');
const { revokeVpnClient } = require('./vpnService');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—á–µ–Ω–æ.
 */
const checkUnansweredQuestions = async (bot) => {
    try {
        const now = new Date();
        const urgentQuestions = await Question.countDocuments({
            status: 'pending',
            createdAt: { $lt: new Date(now.getTime() - 86400000) }
        });

        if (urgentQuestions > 0) {
            await bot.telegram.sendMessage(
                process.env.ADMIN_ID,
                `üö® –°—Ä–æ—á–Ω–æ! ${urgentQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤!`
            );
            console.log(`[Cron] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ ${urgentQuestions} —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.`);
        }
    } catch (err) {
        console.error('[Cron] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
 */
const checkExpiringSubscriptions = async (bot) => {
    try {
        const now = new Date();
        const expiringUsers = await User.find({
            status: 'active',
            expireDate: {
                $lte: new Date(now.getTime() + process.env.REMIND_DAYS * 86400000),
                $gt: now
            },
            $or: [
                { lastReminder: { $exists: false } },
                { lastReminder: { $lt: new Date(now.getTime() - 86400000) } }
            ]
        });

        console.log(`[Cron] –ù–∞–π–¥–µ–Ω–æ ${expiringUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.`);

        for (const user of expiringUsers) {
            try {
                const daysLeft = Math.ceil((user.expireDate - now) / 86400000);
                await bot.telegram.sendMessage(
                    user.userId,
                    `‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π!*\n\n` +
                    `–ü—Ä–æ–¥–ª–∏—Ç–µ VPN –∑–∞ ${process.env.VPN_PRICE} —Ä—É–±.\n\n` +
                    paymentDetails(user.userId, user.firstName || user.username),
                    { parse_mode: 'Markdown', disable_web_page_preview: true }
                );

                await User.updateOne(
                    { userId: user.userId },
                    { lastReminder: now }
                );
                console.log(`[Cron] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}.`);
            } catch (e) {
                console.error(`[Cron] –û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${user.userId}:`, e.message);
            }
        }
    } catch (err) {
        console.error('[Cron] –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø.
 */
const checkExpiredSubscriptions = async (bot) => {
    try {
        const now = new Date();
        console.log(`[Cron] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);

        const expiredUsers = await User.find({
            status: 'active',
            expireDate: { $lte: now }
        });

        console.log(`[Cron] –ù–∞–π–¥–µ–Ω–æ ${expiredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.`);

        if (expiredUsers.length > 0) {
            console.log('[Cron] –î–∞–Ω–Ω—ã–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', expiredUsers.map(u => ({ userId: u.userId, expireDate: u.expireDate })));
        }

        for (const user of expiredUsers) {
            try {
                await User.updateOne(
                    { userId: user.userId },
                    { status: 'inactive' }
                );
                console.log(`[Cron] –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId} –∏—Å—Ç–µ–∫–ª–∞, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'inactive'.`);

                await bot.telegram.sendMessage(
                    user.userId,
                    '‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!* –î–æ—Å—Ç—É–ø –∫ VPN –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω.\n\n' +
                    '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
                    { parse_mode: 'Markdown' }
                );

                try {
                    const clientName = user.vpnClientName;
                    if (clientName) {
                        await revokeVpnClient(clientName);
                        console.log(`[Cron] VPN-–∫–ª–∏–µ–Ω—Ç "${clientName}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω.`);
                    } else {
                        console.warn(`[Cron] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ VPN-–∫–ª–∏–µ–Ω—Ç–∞.`);
                        await bot.telegram.sendMessage(
                            process.env.ADMIN_ID,
                            `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ VPN-–∫–ª–∏–µ–Ω—Ç–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.`
                        );
                    }
                } catch (vpnError) {
                    console.error(`[Cron] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ VPN-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è ${user.userId}:`, vpnError);
                    await bot.telegram.sendMessage(
                        process.env.ADMIN_ID,
                        `üö® *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}.`
                    );
                }

            } catch (e) {
                console.error(`[Cron] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${user.userId}:`, e.message);
            }
        }
    } catch (err) {
        console.error('[Cron] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', err);
    }
};

exports.setupReminders = (bot) => {
    cron.schedule('0 10 * * *', () => checkExpiringSubscriptions(bot));
    cron.schedule('0 */3 * * *', () => checkUnansweredQuestions(bot));
    cron.schedule('*/1 * * * *', () => checkExpiredSubscriptions(bot));
    console.log('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è cron –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.');
};