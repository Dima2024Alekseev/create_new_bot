const { Markup } = require('telegraf');
const Question = require('../models/Question');
const { checkAdmin } = require('./adminController');
const { formatDate } = require('../utils/helpers');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.handleQuestion = async (ctx) => {
  if (ctx.message.text.startsWith('/') || !ctx.message.text) return;
  try {
    await Question.create({
      userId: ctx.from.id,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      questionText: ctx.message.text,
      status: 'pending'
    });
    await ctx.reply('‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    await notifyAdminAboutQuestion(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', err);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å.');
  }
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
async function notifyAdminAboutQuestion(ctx) {
  try {
    await ctx.telegram.sendMessage(
      process.env.ADMIN_ID,
      `‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç ${ctx.from.first_name} (@${ctx.from.username || '–Ω–µ—Ç'}):
"${ctx.message.text}"
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from.id}`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìù –û—Ç–≤–µ—Ç–∏—Ç—å', `answer_${ctx.from.id}`)],
        [Markup.button.callback('üëÄ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', 'list_questions')]
      ])
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', err);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
exports.handleAnswer = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.reply('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.');
  }

  const userId = ctx.session.awaitingAnswerFor;
  const answerText = ctx.message.text;

  try {
    const question = await Question.findOneAndUpdate(
      { userId, status: 'pending' },
      {
        answerText,
        status: 'answered',
        answeredAt: new Date()
      },
      { new: true }
    );

    if (!question) {
      return ctx.reply('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    await ctx.telegram.sendMessage(
      userId,
      `üì© –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
"${answerText}"

–í–∞—à –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: "${question.questionText}"`,
      { parse_mode: 'Markdown' }
    );

    await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
    ctx.session.awaitingAnswerFor = null;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', err);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.');
  }
};

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
exports.listQuestions = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.reply('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.');
  }

  try {
    const questions = await Question.find({ status: 'pending' }).sort({ createdAt: -1 }).limit(10);
    if (!questions.length) {
      return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.');
    }

    let message = 'üìã –û–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å—ã:\n';
    questions.forEach((q, i) => {
      message += `${i + 1}. ${q.firstName} (@${q.username || '–Ω–µ—Ç'})\n`;
      message += `"${q.questionText}"\n`;
      message += `–î–∞—Ç–∞: ${formatDate(q.createdAt)}\n\n`;
    });

    await ctx.reply(message, Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'list_questions')]
    ]));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', err);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.');
  }
};