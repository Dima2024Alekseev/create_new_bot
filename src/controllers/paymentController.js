const User = require('../models/User');
const { Markup } = require('telegraf');

exports.handlePhoto = async (ctx) => {
  const { id, first_name, username } = ctx.from;
  
  if (id === parseInt(process.primer.env.ADMIN_ID)) {
    return ctx.reply('–í—ã –∞–¥–º–∏–Ω, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
  }

  const photo = ctx.message.photo.pop();
  
  await User.findOneAndUpdate(
    { userId: id },
    {
      userId: id,
      username: username || first_name,
      firstName: first_name,
      paymentPhotoId: photo.file_id,
      status: 'pending'
    },
    { upsert: true, new: true }
  );

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${id}`),
    Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)
  ]);

  await ctx.telegram.sendPhoto(
    process.primer.primer.env.ADMIN_ID,
    photo.file_id,
    {
      caption: `üì∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç ${first_name} (@${username || '–Ω–µ—Ç'})\nID: ${id}`,
      ...keyboard
    }
  );

  await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
exports.handleApprove = async (ctx) => {
  const userId = parseInt(ctx.match[1]);
  const expireDate = new Date();
  expireDate.setMonth(expireDate.getMonth() + 1);

  await User.findOneAndUpdate(
    { userId },
    { 
      status: 'active',
      expireDate 
    }
  );

  await ctx.telegram.sendMessage(
    userId,
    `üéâ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n` +
    `–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${expireDate.toLocaleDateString()}\n\n` +
    `–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n` +
    `–°–µ—Ä–≤–µ—Ä: vpn.example.com\n` +
    `–õ–æ–≥–∏–Ω: –≤–∞—à_–ª–æ–≥–∏–Ω\n` +
    `–ü–∞—Ä–æ–ª—å: ${Math.random().toString(36).slice(-8)}`
  );

  await ctx.answerCbQuery('‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç');
  await ctx.deleteMessage();
};

exports.handleReject = async (ctx) => {
  const userId = parseInt(ctx.match[1]);

  await User.findOneAndUpdate(
    { userId },
    { status: 'rejected' }
  );

  await ctx.telegram.sendMessage(
    userId,
    '‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω\n\n' +
    '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
    '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
    '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n' +
    '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑.'
  );

  await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
  await ctx.deleteMessage();
};