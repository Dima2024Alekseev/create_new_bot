// controllers/paymentController.js
const User = require('../models/User');
const { createWgClient } = require('../services/wireguardService'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WireGuard —Å–µ—Ä–≤–∏—Å
const { checkAdmin } = require('./adminController'); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
const { formatDate } = require('../utils/helpers'); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
const { Markup } = require('telegraf'); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

// === handlePhoto ===
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å!
exports.handlePhoto = async (ctx) => {
    try {
        if (!ctx.message.photo || ctx.message.photo.length === 0) {
            return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.');
        }

        const photo = ctx.message.photo.pop(); // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        const fileId = photo.file_id;
        const userId = ctx.from.id;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.findOneAndUpdate(
            { userId },
            {
                paymentPhotoId: fileId,
                status: 'pending', // –°—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
                lastPaymentAttemptAt: new Date()
            },
            { upsert: true, new: true } // –°–æ–∑–¥–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç, –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        const user = await User.findOne({ userId }); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üí∞ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç:* ${user.firstName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${userId})\n` +
            `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `approve_${userId}`),
                            Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${userId}`)
                        ]
                    ]
                }
            }
        );

        await ctx.reply('‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
    }
};

// === handleApprove ===
exports.handleApprove = async (ctx) => {
¬† if (!checkAdmin(ctx)) {
¬† ¬† return ctx.answerCbQuery('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
¬† }

¬† const userId = parseInt(ctx.match[1]);
¬† const user = await User.findOne({ userId });

¬† if (!user) {
¬† ¬† return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
¬† }

¬† if (user.status === 'active') {
¬† ¬† return ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.');
¬† }

¬† try {
¬† ¬† let clientData;
¬† ¬† // 1. –°–æ–∑–¥–∞–Ω–∏–µ WireGuard –∫–ª–∏–µ–Ω—Ç–∞
¬† ¬† try {
¬† ¬† ¬† clientData = await createWgClient(user.userId, user.firstName || user.username);
¬† ¬† ¬† // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ WireGuard –≤ MongoDB
¬† ¬† ¬† user.wireguardPeerId = clientData.peerId;
¬† ¬† ¬† user.wireguardClientName = clientData.clientName;
¬† ¬† } catch (wgError) {
¬† ¬† ¬† console.error(`[Approve] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WG –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è ${userId}:`, wgError.message);
¬† ¬† ¬† await ctx.telegram.sendMessage(
¬† ¬† ¬† ¬† process.env.ADMIN_ID,
¬† ¬† ¬† ¬† `‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WireGuard –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username} (ID: ${userId}). ` +
¬† ¬† ¬† ¬† `–ü—Ä–∏—á–∏–Ω–∞: ${wgError.message}. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.`,
¬† ¬† ¬† ¬† { reply_to_message_id: ctx.callbackQuery.message.message_id }
¬† ¬† ¬† );
¬† ¬† ¬† return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WireGuard –∫–ª–∏–µ–Ω—Ç–∞.');
¬† ¬† }

¬† ¬† // 2. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≤–∞—à–µ–π –ë–î
¬† ¬† const newExpireDate = user.expireDate && user.expireDate > new Date()
¬† ¬† ¬† ? new Date(user.expireDate.getTime() + 30 * 24 * 60 * 60 * 1000) // –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
¬† ¬† ¬† : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // –ò–ª–∏ 30 –¥–Ω–µ–π –æ—Ç —Å–µ–π—á–∞—Å

¬† ¬† const update = {
¬† ¬† ¬† status: 'active',
¬† ¬† ¬† expireDate: newExpireDate,
¬† ¬† ¬† paymentPhotoId: null, // –û—á–∏—â–∞–µ–º ID —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
¬† ¬† ¬† paymentConfirmedAt: new Date(),
¬† ¬† ¬† $inc: { subscriptionCount: 1 }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫
¬† ¬† ¬† wireguardPeerId: clientData.peerId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∏—Ä–∞ WireGuard
¬† ¬† ¬† wireguardClientName: clientData.clientName // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ WireGuard
¬† ¬† };

¬† ¬† const updatedUser = await User.findOneAndUpdate(
¬† ¬† ¬† { userId },
¬† ¬† ¬† update,
¬† ¬† ¬† { new: true }
¬† ¬† );

¬† ¬† // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
¬† ¬† const configBuffer = Buffer.from(clientData.configFileContent, 'utf-8');
¬† ¬† await ctx.telegram.sendDocument(userId, { source: configBuffer, filename: `${clientData.clientName}.conf` }, {
¬† ¬† ¬† ¬† caption: 'üìÅ –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN WireGuard:'
¬† ¬† });

¬† ¬† // 4. –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–∫–∞–∫ —É –≤–∞—Å —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
¬† ¬† // –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
¬† ¬† ctx.session.awaitingVpnVideoFor = userId; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
¬† ¬† await ctx.telegram.sendMessage(
¬† ¬† ¬† process.env.ADMIN_ID,
¬† ¬† ¬† `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username} (ID: ${userId}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ${formatDate(updatedUser.expireDate, true)}. ` +
¬† ¬† ¬† `–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (${clientData.clientName}). ` +
¬† ¬† ¬† `*–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*`,
¬† ¬† ¬† { parse_mode: 'Markdown', reply_to_message_id: ctx.callbackQuery.message.message_id }
¬† ¬† );
¬† ¬† await ctx.telegram.sendMessage(userId, 'üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.');

¬† ¬† await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');

¬† } catch (error) {
¬† ¬† console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è ${userId}:`, error);
¬† ¬† await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è ${user.firstName || user.username}. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
¬† ¬† await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
¬† }
};

// === handleReject ===
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å!
exports.handleReject = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const userId = parseInt(ctx.match[1]);
    const user = await User.findOne({ userId });

    if (!user) {
        return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "rejected" –∏ –æ—á–∏—â–∞–µ–º photoId
    await User.findOneAndUpdate(
        { userId },
        { status: 'rejected', paymentPhotoId: null },
        { new: true }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.telegram.sendMessage(
        userId,
        '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await ctx.telegram.sendMessage(
        process.env.ADMIN_ID,
        `–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username} (ID: ${userId}).`,
        { reply_to_message_id: ctx.callbackQuery.message.message_id }
    );

    await ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
};