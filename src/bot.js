require('dotenv').config({ path: __dirname + '/../primer.env' });
const { Telegraf, Markup, session } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const connectDB = require('./config/db');

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
const { handleStart } = require('./controllers/userController');
const { handlePhoto, handleApprove, handleReject } = require('./controllers/paymentController');
const { 
  showMainMenu,
  showPaymentsMenu,
  showQuestionsMenu,
  handleAdminActions,
  switchMode,
  stats,
  checkAdmin
} = require('./controllers/adminController');
const { handleQuestion, handleAnswer, listQuestions } = require('./controllers/questionController');

// –°–µ—Ä–≤–∏—Å—ã
const { setupReminders } = require('./services/reminderService');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { 
    agent: null,
    handshakeTimeout: 30000
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
bot.use((new LocalSession({ database: 'session_db.json' })).middleware());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
connectDB().catch(err => {
  console.error('‚ùå MongoDB connection failed:', err);
  process.exit(1);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (err) => {
  console.error('‚ö†Ô∏è Unhandled Rejection:', err);
});

process.on('uncaughtException', async (err) => {
  console.error('‚ö†Ô∏è Uncaught Exception:', err);
  await bot.stop();
  process.exit(1);
});

// ===== Middleware =====
bot.use(async (ctx, next) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  console.log(`[${new Date().toISOString()}] Update from ${ctx.from?.id}:`, ctx.message?.text || ctx.updateType);
  return next();
});

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =====

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.start(handleStart);

// –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
bot.command('admin', async (ctx) => {
  if (checkAdmin(ctx)) {
    await showMainMenu(ctx);
  } else {
    await ctx.reply('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.command('stats', stats);

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
bot.command('switchmode', switchMode);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
bot.command('check', async (ctx) => {
  if (checkAdmin(ctx)) {
    await showPaymentsMenu(ctx);
  }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏
bot.command('questions', async (ctx) => {
  if (checkAdmin(ctx)) {
    await showQuestionsMenu(ctx);
  }
});

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π =====

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–ø–ª–∞—Ç–µ–∂–∏)
bot.on('photo', handlePhoto);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å—ã)
bot.hears(/^[^\/].*/, async (ctx) => {
  if (ctx.session?.awaitingAnswerFor) {
    // –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    await handleAnswer(ctx, ctx.session.awaitingAnswerFor, ctx.message.text);
    ctx.session.awaitingAnswerFor = null;
  } else if (!ctx.message.text.startsWith('/')) {
    // –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await handleQuestion(ctx);
  }
});

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ =====

// –ü–ª–∞—Ç–µ–∂–∏
bot.action(/approve_(\d+)/, handleApprove);
bot.action(/reject_(\d+)/, handleReject);
bot.action(/pending_payments|active_payments|rejected_payments|expiring_payments/, handleAdminActions);
bot.action('back_to_payments', showPaymentsMenu);

// –í–æ–ø—Ä–æ—Å—ã
bot.action(/answer_(\d+)/, async (ctx) => {
  ctx.session.awaitingAnswerFor = ctx.match[1];
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
});
bot.action(/pending_questions|answered_questions|clear_questions/, handleAdminActions);
bot.action('back_to_questions', showQuestionsMenu);

// –û–±—â–∏–µ
bot.action('back_to_main', showMainMenu);
bot.action('refresh_stats', stats);

// –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', stats);
bot.hears('üìù –í–æ–ø—Ä–æ—Å—ã', showQuestionsMenu);
bot.hears('üí≥ –ü–ª–∞—Ç–µ–∂–∏', showPaymentsMenu);
bot.hears('üîÑ –†–µ–∂–∏–º', switchMode);

// ===== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====
setupReminders(bot);

// ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
bot.launch()
  .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Q&A + Payments)'))
  .catch(err => {
    console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  });

// Graceful shutdown
['SIGINT', 'SIGTERM'].forEach(signal => {
  process.once(signal, async () => {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
    try {
      await bot.stop();
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
      process.exit(1);
    }
  });
});

module.exports = bot;