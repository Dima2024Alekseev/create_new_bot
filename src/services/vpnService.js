const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
  BASE_URL: 'http://37.233.85.212:51821',
  PASSWORD: process.env.WG_API_PASSWORD,
  SERVER_PUBLIC_KEY: '+VmjO9mBKNMW7G7sdn6Haqxzx2YXgi592/LfepbRLDU=',
  TIMEOUT: 30000 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
};

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
console.log('[DEBUG] WG_API_PASSWORD:', API_CONFIG.PASSWORD ? '***' : '–Ω–µ –∑–∞–¥–∞–Ω');

let sessionCookie = null;

const api = axios.create({
  baseURL: API_CONFIG.BASE_URL,
  timeout: API_CONFIG.TIMEOUT,
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'Origin': API_CONFIG.BASE_URL
  },
  withCredentials: true // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∏
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
api.interceptors.request.use(config => {
  if (sessionCookie) {
    config.headers.Cookie = sessionCookie;
    console.log('[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –∫—É–∫–∏:', config.headers.Cookie);
  }
  return config;
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
api.interceptors.response.use(response => {
  console.log('[DEBUG] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
    status: response.status,
    headers: response.headers
  });
  return response;
}, error => {
  console.error('[DEBUG] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
    status: error.response?.status,
    data: error.response?.data,
    headers: error.response?.headers,
    config: error.config
  });
  return Promise.reject(error);
});

async function login() {
  try {
    console.log('[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const response = await api.post('/api/session', {
      password: API_CONFIG.PASSWORD
    }, {
      validateStatus: (status) => status === 204 // –†–∞–∑—Ä–µ—à–∞–µ–º 204 —Å—Ç–∞—Ç—É—Å
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const cookies = response.headers['set-cookie'];
    sessionCookie = Array.isArray(cookies) ? cookies.join('; ') : cookies;

    if (!sessionCookie) {
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ö—É–∫–∏:', sessionCookie);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data,
      headers: error.response?.headers
    });
    throw new Error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
  }
}

async function createClient(clientName) {
  try {
    console.log(`[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    const response = await api.post('/api/wireguard/client', {
      name: clientName,
      allowedIPs: '10.8.0.0/24'
    });
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.`);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', {
      status: error.response?.status,
      data: error.response?.data,
      config: error.config
    });
    throw error;
  }
}

async function getClientData(clientName) {
  try {
    console.log(`[DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    const response = await api.get('/api/wireguard/client');
    const client = response.data.find(c => c.name === clientName);
    if (!client) throw new Error(`–ö–ª–∏–µ–Ω—Ç "${clientName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return client;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞:', {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data
    });
    throw error;
  }
}

async function getClientConfigFromText(clientId) {
  const endpoint = `/api/wireguard/client/${clientId}/configuration`;
  console.log(`üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ URL: ${API_CONFIG.BASE_URL + endpoint}`);
  
  try {
    const response = await api.get(endpoint, {
      responseType: 'text'
    });

    const configText = response.data;
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...');

    const privateKeyMatch = configText.match(/PrivateKey = (.+)/);
    const presharedKeyMatch = configText.match(/PresharedKey = (.+)/);

    if (!privateKeyMatch) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ PrivateKey –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }

    return {
      privateKey: privateKeyMatch[1].trim(),
      presharedKey: presharedKeyMatch ? presharedKeyMatch[1].trim() : null
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', {
      status: error.response?.status,
      data: error.response?.data,
      config: error.config
    });
    throw error;
  }
}

function generateConfig(configData) {
  if (!configData.privateKey || !configData.address || !API_CONFIG.SERVER_PUBLIC_KEY) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
  }

  const presharedKeyLine = configData.presharedKey ? `PresharedKey = ${configData.presharedKey}` : '';

  return `[Interface]
PrivateKey = ${configData.privateKey}
Address = ${configData.address}/24
DNS = 1.1.1.1

[Peer]
PublicKey = ${API_CONFIG.SERVER_PUBLIC_KEY}
${presharedKeyLine}
Endpoint = ${API_CONFIG.BASE_URL.replace('http://', '').replace(':51821', '')}:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25`;
}

exports.createVpnClient = async (clientName) => {
  try {
    console.log('[DEBUG] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è VPN –∫–ª–∏–µ–Ω—Ç–∞...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await login();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    console.log(`‚åõ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    await createClient(clientName);
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.log('‚è≥ –û–∂–∏–¥–∞—é 1 —Å–µ–∫—É–Ω–¥—É...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    const clientData = await getClientData(clientName);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (ID: ${clientData.id})`);
    const { privateKey, presharedKey } = await getClientConfigFromText(clientData.id);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è: ${clientName}`);
    const config = generateConfig({
      privateKey,
      presharedKey,
      address: clientData.address,
    });
    
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    return config;
  } catch (error) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack,
      response: error.response?.data
    });
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
  }
};