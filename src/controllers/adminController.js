const User = require('../models/User');
const Question = require('../models/Question');
const { Markup } = require('telegraf');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function getAdminKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫', 'view_applications')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'view_stats')],
    [Markup.button.callback('‚ùì –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã', 'view_questions')]
  ]);
}

exports.checkPayments = async (ctx) => {
  if (ctx.from.id !== parseInt(process.env.ADMIN_ID)) {
    return ctx.reply('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  try {
    const pendingUsers = await User.find({ status: 'pending' })
      .sort({ createdAt: 1 })
      .limit(50);

    if (!pendingUsers.length) {
      return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
    }

    let message = '‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n';
    pendingUsers.forEach((user, index) => {
      message += `${index + 1}. ${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`;
      if (user.username) message += ` (@${user.username})`;
      message += `\nID: ${user.userId}\n`;
      message += `–î–∞—Ç–∞: ${new Date(user.createdAt).toLocaleString('ru-RU')}\n\n`;
    });

    await ctx.reply(message, getAdminKeyboard());
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', err);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
  }
};

exports.stats = async (ctx) => {
  if (ctx.from.id !== parseInt(process.env.ADMIN_ID)) {
    return ctx.reply('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  try {
    const [usersStats, questionsStats, expiringSoon] = await Promise.all([
      User.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]),
      Question.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]),
      User.find({
        status: 'active',
        expireDate: { $lt: new Date(Date.now() + 7 * 86400000) }
      }).sort({ expireDate: 1 }).limit(5)
    ]);

    let statsText = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n';

    statsText += 'üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n';
    usersStats.forEach(stat => {
      statsText += `- ${stat._id}: ${stat.count}\n`;
    });

    statsText += '\n‚ùì *–í–æ–ø—Ä–æ—Å—ã:*\n';
    questionsStats.forEach(stat => {
      statsText += `- ${stat._id}: ${stat.count}\n`;
    });

    statsText += '\nüîî *–ë–ª–∏–∂–∞–π—à–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è:*\n';
    if (expiringSoon.length > 0) {
      expiringSoon.forEach(user => {
        const daysLeft = Math.ceil((user.expireDate - new Date()) / 86400000);
        statsText += `- ${user.firstName}: —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π (${user.expireDate.toLocaleDateString('ru-RU')})\n`;
      });
    } else {
      statsText += '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é\n';
    }

    await ctx.replyWithMarkdown(statsText, {
      reply_markup: getAdminKeyboard()
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
};

exports.listQuestions = async (ctx) => {
  try {
    const questions = await Question.find()
      .sort({ createdAt: -1 })
      .limit(10);

    if (!questions.length) {
      return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ');
    }

    let message = 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n';
    questions.forEach((q, i) => {
      message += `${i+1}. ${q.firstName} (@${q.username || '–Ω–µ—Ç'}):\n` +
                 `"${q.questionText}"\n` +
                 `–°—Ç–∞—Ç—É—Å: ${q.status === 'answered' ? '‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç'}\n` +
                 `–î–∞—Ç–∞: ${q.createdAt.toLocaleString()}\n\n`;
    });

    await ctx.reply(message, getAdminKeyboard());
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', err);
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã');
  }
};
