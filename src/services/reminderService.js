// services/reminderService.js
const cron = require('node-cron');
const User = require('../models/User');
const Question = require('../models/Question');
const { paymentDetails, formatDate } = require('../utils/helpers');
const { deleteWgClient } = require('./wireguardService'); // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è WG –∫–ª–∏–µ–Ω—Ç–∞

exports.setupReminders = (bot) => {
  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ
  cron.schedule('0 10 * * *', async () => {
    console.log('[Cron] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏ –≤–æ–ø—Ä–æ—Å–∞—Ö...');
    try {
      const now = new Date();

      const expiringUsers = await User.find({
        status: 'active',
        expireDate: {
          $lte: new Date(now.getTime() + process.env.REMIND_DAYS * 86400000), // –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è <= (—Å–µ–π—á–∞—Å + REMIND_DAYS –¥–Ω–µ–π)
          $gt: now                                                        // –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è > (—Å–µ–π—á–∞—Å)
        },
        $or: [
          { lastReminder: { $exists: false } },
          { lastReminder: { $lt: new Date(now.getTime() - 86400000) } }
        ]
      });

      console.log(`[Cron] –ù–∞–π–¥–µ–Ω–æ ${expiringUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.`);

      for (const user of expiringUsers) {
        try {
          const daysLeft = Math.ceil((user.expireDate - now) / 86400000);

          await bot.telegram.sendMessage(
            user.userId,
            `‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π!*\n\n` +
            `–ü—Ä–æ–¥–ª–∏—Ç–µ VPN –∑–∞ ${process.env.VPN_PRICE} —Ä—É–±.\n\n` +
            paymentDetails(user.userId, user.firstName || user.username),
            { parse_mode: 'Markdown', disable_web_page_preview: true }
          );

          await User.updateOne(
            { userId: user.userId },
            { lastReminder: now }
          );
          console.log(`[Cron] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}.`);
        } catch (e) {
          console.error(`[Cron] –û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${user.userId}:`, e.message);
        }
      }

      // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö (–¥–ª—è –∞–¥–º–∏–Ω–∞)
      const pendingQuestions = await Question.countDocuments({
        status: 'pending',
        createdAt: { $gt: new Date(now.getTime() - 7 * 86400000) } // –¢–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      });

      if (pendingQuestions > 0) {
        await bot.telegram.sendMessage(
          process.env.ADMIN_ID,
          `üîî –£ –≤–∞—Å ${pendingQuestions} –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /questions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n` +
          `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: ${formatDate(now)}`
        );
        console.log(`[Cron] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ ${pendingQuestions} –≤–æ–ø—Ä–æ—Å–∞—Ö.`);
      }

    } catch (err) {
      console.error('[Cron] –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
    }
  });

  // –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –£–ñ–ï –ò–°–¢–ï–ö–õ–ê
  // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 11:00 –ø–æ –ú–æ—Å–∫–≤–µ (—á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
  cron.schedule('0 11 * * *', async () => {
    console.log('[Cron] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');
    try {
      const now = new Date();

      const expiredUsers = await User.find({
        status: 'active',
        expireDate: { $lte: now }
      });

      console.log(`[Cron] –ù–∞–π–¥–µ–Ω–æ ${expiredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.`);

      for (const user of expiredUsers) {
        try {
          await bot.telegram.sendMessage(
            user.userId,
            `üö´ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN –∏—Å—Ç–µ–∫–ª–∞!*` +
            `\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.` +
            `\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ VPN –∑–∞ ${process.env.VPN_PRICE} —Ä—É–±.\n\n` +
            paymentDetails(user.userId, user.firstName || user.username),
            { parse_mode: 'Markdown', disable_web_page_preview: true }
          );

          // !!! –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–î–ê–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê WIREGUARD !!!
          if (user.wireguardPeerId) {
            try {
              await deleteWgClient(user.wireguardPeerId); // <-- –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è WireGuard –∫–ª–∏–µ–Ω—Ç–∞
              console.log(`[Cron] –ö–ª–∏–µ–Ω—Ç WireGuard ${user.wireguardPeerId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId} —É–¥–∞–ª–µ–Ω.`);
              await bot.telegram.sendMessage(
                process.env.ADMIN_ID,
                `‚úÖ –ö–ª–∏–µ–Ω—Ç WireGuard ${user.wireguardClientName} (ID: ${user.wireguardPeerId}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username} (ID: ${user.userId}) –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω.`
              );
            } catch (wgDeleteError) {
              console.error(`[Cron] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ WireGuard –∫–ª–∏–µ–Ω—Ç–∞ ${user.wireguardPeerId} –¥–ª—è ${user.userId}:`, wgDeleteError.message);
              await bot.telegram.sendMessage(
                process.env.ADMIN_ID,
                `‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è WireGuard –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username} (ID: ${user.userId}). ` +
                `Peer ID: ${user.wireguardPeerId}. –ü—Ä–∏—á–∏–Ω–∞: ${wgDeleteError.message}. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.`
              );
            }
          }

          await User.updateOne(
            { userId: user.userId },
            {
              status: 'inactive',
              lastReminder: now,
              wireguardPeerId: null, // –û—á–∏—â–∞–µ–º ID –ø–∏—Ä–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
              wireguardClientName: null // –û—á–∏—â–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
            }
          );
          console.log(`[Cron] –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId} –∏—Å—Ç–µ–∫–ª–∞, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'inactive'.`);
        } catch (e) {
          console.error(`[Cron] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${user.userId}:`, e.message);
        }
      }
    } catch (err) {
      console.error('[Cron] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', err);
    }
  });

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –æ –≤–∞–∂–Ω—ã—Ö (—Å—Ç–∞—Ä—ã—Ö) –≤–æ–ø—Ä–æ—Å–∞—Ö (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  cron.schedule('0 */3 * * *', async () => {
    console.log('[Cron] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–æ–ø—Ä–æ—Å–∞—Ö...');
    try {
      const now = new Date();
      const urgentQuestions = await Question.countDocuments({
        status: 'pending',
        createdAt: { $lt: new Date(now.getTime() - 86400000) } // –í–æ–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
      });

      if (urgentQuestions > 0) {
        await bot.telegram.sendMessage(
          process.env.ADMIN_ID,
          `üö® –°—Ä–æ—á–Ω–æ! ${urgentQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤!`
        );
        console.log(`[Cron] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ ${urgentQuestions} —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.`);
      }
    } catch (err) {
      console.error('[Cron] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
    }
  });

  console.log('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è cron –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.');
};