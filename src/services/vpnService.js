const axios = require('axios');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
  BASE_URL: process.env.WG_API_URL || 'http://localhost:51821',
  PASSWORD: process.env.WG_API_PASSWORD,
  TIMEOUT: 15000
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è
let sessionCookie = null;

const api = axios.create({
  baseURL: API_CONFIG.BASE_URL,
  timeout: API_CONFIG.TIMEOUT,
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∫
api.interceptors.request.use(config => {
  if (sessionCookie) {
    config.headers.Cookie = sessionCookie;
  }
  return config;
});

async function login() {
  try {
    const response = await api.post('/api/session', {
      password: API_CONFIG.PASSWORD
    });

    sessionCookie = response.headers['set-cookie']?.toString();
    if (!sessionCookie) {
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      status: error.response?.status,
      data: error.response?.data
    });
    throw new Error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
  }
}

async function createClient(clientName) {
  try {
    const response = await api.post('/api/wireguard/client', {
      name: clientName,
      allowedIPs: '10.8.0.0/24'
    });
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', {
      status: error.response?.status,
      data: error.response?.data
    });
    throw error;
  }
}

async function getConfigFromAPI(clientName) {
  const endpoints = [
    `/api/wireguard/client/${clientName}/configuration`,
    `/api/wireguard/config/${clientName}`,
    `/api/wireguard/download/${clientName}`
  ];

  const maxRetries = 5;
  const retryDelay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

  for (const endpoint of endpoints) {
    for (let i = 0; i < maxRetries; i++) {
      try {
        const response = await api.get(endpoint, {
          responseType: 'text'
        });

        if (response.data.includes('[Interface]')) {
          return response.data;
        }
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      } catch (error) {
        if (error.response?.status === 404 && i < maxRetries - 1) {
          console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries}: –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω (404) –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint}, –ø–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ ${retryDelay / 1000} —Å–µ–∫.`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
        } else {
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ API –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint}:`, error.message);
        }
      }
    }
  }

  return null;
}

exports.createVpnClient = async (clientName) => {
  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await login();

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    console.log(`‚åõ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    await createClient(clientName);

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const config = await getConfigFromAPI(clientName);

    if (!config) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API');
    }

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
    return config;
  } catch (error) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack
    });
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
  }
};
