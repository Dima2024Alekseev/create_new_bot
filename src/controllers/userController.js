const User = require('../models/User');
const Question = require('../models/Question');
const { Markup } = require('telegraf');
const { formatDate, formatDuration, paymentDetails } = require('../utils/helpers');
const { createVpnClient, revokeVpnClient, enableVpnClient } = require('../services/vpnService');
const path = require('path');

exports.handleStart = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;

    try {
        const user = await User.findOneAndUpdate(
            { userId },
            {
                userId,
                firstName: first_name,
                username,
                lastSeen: new Date()
            },
            { upsert: true, new: true, setDefaultsOnInsert: true }
        );

        let statusText = '';
        let keyboardButtons = [];

        if (user.status === 'active') {
            const now = new Date();
            let expireDate = user.expireDate;

            if (expireDate && expireDate < now) {
                user.status = 'inactive';
                await user.save();
                statusText = '‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.*\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.';
                keyboardButtons.push(
                    [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }],
                    [{ text: 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'back_to_user_menu' }]
                );
            } else {
                const timeLeft = expireDate - now;
                const daysLeft = Math.ceil(timeLeft / (1000 * 60 * 60 * 24));
                const duration = formatDuration(timeLeft);
                statusText = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!* –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë *${duration}*.\n`;

                if (daysLeft < 7) {
                    statusText += `\n‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n`;
                }

                keyboardButtons.push(
                    [{ text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }],
                    [{ text: 'üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }],
                    [{ text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ VPN', callback_data: 'leave_review' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'cancel_subscription_confirm' }],
                    [{ text: 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'back_to_user_menu' }]
                );
            }
        } else if (user.status === 'inactive') {
            statusText = '‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.*\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.';
            keyboardButtons.push(
                [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }],
                [{ text: 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'back_to_user_menu' }]
            );
        } else if (user.status === 'pending') {
            statusText = '‚è≥ *–í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –µ–≥–æ.';
            keyboardButtons.push(
                [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }],
                [{ text: 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'back_to_user_menu' }]
            );
        } else if (user.status === 'rejected') {
            statusText = '‚ùå *–í–∞—à –ø–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â—ë —Ä–∞–∑, —É–±–µ–¥–∏–≤—à–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.';
            keyboardButtons.push(
                [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }],
                [{ text: 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'back_to_user_menu' }]
            );
        }

        await ctx.reply(
            `üëã –ü—Ä–∏–≤–µ—Ç, *${user.firstName}!* –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN.\n\n` + statusText,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: keyboardButtons
                }
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

exports.checkSubscriptionStatus = async (ctx) => {
    const userId = ctx.from.id;
    try {
        const user = await User.findOne({ userId });
        await ctx.answerCbQuery();

        if (!user || user.status !== 'active') {
            return ctx.reply('‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.');
        }

        const now = new Date();
        const timeLeft = user.expireDate - now;

        if (timeLeft > 0) {
            const duration = formatDuration(timeLeft);
            await ctx.reply(
                `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!*` +
                `\n\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *${formatDate(user.expireDate, true)}*` +
                `\n–û—Å—Ç–∞–ª–æ—Å—å: *${duration}*`,
                { parse_mode: 'Markdown' }
            );
        } else {
            user.status = 'inactive';
            await user.save();
            await ctx.reply('‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ checkSubscriptionStatus:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.');
    }
};

exports.extendSubscription = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;
    const name = first_name || username;

    try {
        await ctx.answerCbQuery();
        const paymentMessage = await paymentDetails(userId, name);
        await ctx.replyWithMarkdown(
            paymentMessage +
            `\n\n*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.*`,
            {
                disable_web_page_preview: true
            }
        );
        ctx.session.awaitingPaymentProof = true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ extendSubscription:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.');
    }
};

exports.promptForQuestion = async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
};

exports.promptCancelSubscription = async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n\n' +
        '–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN. ' +
        '–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –µ—ë –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞?',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', 'cancel_subscription_final'),
                Markup.button.callback('‚úÖ –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', 'cancel_subscription_abort')
            ],
            [Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]
        ])
    );
};

exports.cancelSubscriptionFinal = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;
    const name = first_name || username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`;

    try {
        const user = await User.findOne({ userId });

        if (!user) {
            await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return ctx.editMessageText('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        if (user.vpnClientName) {
            await revokeVpnClient(user.vpnClientName);
            console.log(`üîí VPNmeln –¥–ª—è ${user.vpnClientName} (ID: ${userId})`);
        }

        await User.updateOne(
            { userId },
            {
                status: 'inactive',
                expireDate: null,
                vpnConfigured: false
            }
        );

        await ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        await ctx.editMessageText('–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ VPN –ø—Ä–µ–∫—Ä–∞—â—ë–Ω.');

        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üîî *–û–ø–æ–≤–µ—â–µ–Ω–∏–µ:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${name}* (ID: ${userId}) –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.\n` +
            `VPN-–∫–ª–∏–µ–Ω—Ç *${user.vpnClientName || '–Ω–µ —É–∫–∞–∑–∞–Ω'}* –æ—Ç–∫–ª—é—á—ë–Ω.`,
            { parse_mode: 'Markdown' }
        );

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ (ID: ${userId}):`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏!');
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.');
    }
};

exports.cancelSubscriptionAbort = async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    await ctx.editMessageText('–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Å—Ç–∞—Ç—É—Å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (/start).');
};

exports.handleVpnConfigured = async (ctx) => {
    const userId = ctx.match[1];
    const user = await User.findOne({ userId });
    const name = user?.firstName || user?.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`;

    await ctx.answerCbQuery('–û—Ç–ª–∏—á–Ω–æ!');
    await ctx.editMessageText(
        '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.‚úåÔ∏è\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É üòä',
        Markup.inlineKeyboard([
            [Markup.button.callback('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'ask_question')],
            [Markup.button.callback('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'back_to_user_menu')]
        ])
    );

    try {
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `‚úÖ *–û–ø–æ–≤–µ—â–µ–Ω–∏–µ:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${name}* (ID: ${userId}) —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª VPN.`,
            { parse_mode: 'Markdown' }
        );
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    }
};

exports.promptVpnFailure = async (ctx) => {
    const userId = ctx.from.id;
    await ctx.answerCbQuery();
    ctx.session.awaitingVpnTroubleshoot = userId;
    await ctx.reply(
        '–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π. ' +
        '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ.'
    );
};