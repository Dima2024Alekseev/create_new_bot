const cron = require('node-cron');
const User = require('../models/User');
const Question = require('../models/Question');
const { paymentDetails, formatDate } = require('../utils/helpers');
const { revokeVpnClient, deleteVpnClient } = require('./vpnService');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞ (GMT+7)
process.env.TZ = 'Asia/Krasnoyarsk';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
 */
const checkUnansweredQuestions = async (bot) => {
    try {
        const now = new Date();
        const urgentQuestions = await Question.countDocuments({
            status: 'pending',
            createdAt: { $lt: new Date(now.getTime() - 86400000) }
        });

        if (urgentQuestions > 0) {
            await bot.telegram.sendMessage(
                process.env.ADMIN_ID,
                `üö® *–°—Ä–æ—á–Ω–æ!* ${urgentQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤!`,
                { parse_mode: 'Markdown' }
            );
            console.log(`[Cron][${now.toLocaleString('ru-RU', { timeZone: 'Asia/Krasnoyarsk' })}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ ${urgentQuestions} –≤–æ–ø—Ä–æ—Å–∞—Ö.`);
        }
    } catch (err) {
        console.error('[Cron] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', err);
    }
};

/**
 * –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ REMIND_DAYS –¥–Ω–µ–π
 */
const checkExpiringSubscriptions = async (bot) => {
    try {
        const now = new Date();
        const expiringUsers = await User.find({
            status: 'active',
            expireDate: {
                $lte: new Date(now.getTime() + process.env.REMIND_DAYS * 86400000),
                $gt: now
            },
            $or: [
                { lastReminder: { $exists: false } },
                { lastReminder: { $lt: new Date(now.getTime() - 86400000) } }
            ]
        });

        console.log(`[Cron][${now.toLocaleString('ru-RU', { timeZone: 'Asia/Krasnoyarsk' })}] –ù–∞–π–¥–µ–Ω–æ ${expiringUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.`);

        for (const user of expiringUsers) {
            try {
                const daysLeft = Math.ceil((user.expireDate - now) / 86400000);
                const paymentMessage = await paymentDetails(user.userId, user.firstName || user.username);

                await bot.telegram.sendMessage(
                    user.userId,
                    `‚ö†Ô∏è *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π!*\n\n` + paymentMessage,
                    { parse_mode: 'Markdown', disable_web_page_preview: true }
                );

                await User.updateOne(
                    { userId: user.userId },
                    { lastReminder: now }
                );
            } catch (e) {
                console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${user.userId}:`, e.message);
            }
        }
    } catch (err) {
        console.error('[Cron] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', err);
    }
};

/**
 * –û—Ç–∫–ª—é—á–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
 */
const checkExpiredSubscriptions = async (bot) => {
    try {
        const now = new Date();
        const expiredUsers = await User.find({
            status: 'active',
            expireDate: { $lte: now }
        });

        console.log(`[Cron][${now.toLocaleString('ru-RU', { timeZone: 'Asia/Krasnoyarsk' })}] –ù–∞–π–¥–µ–Ω–æ ${expiredUsers.length} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.`);

        for (const user of expiredUsers) {
            try {
                await User.updateOne(
                    { userId: user.userId },
                    { status: 'inactive' }
                );

                await bot.telegram.sendMessage(
                    user.userId,
                    '‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!* –î–æ—Å—Ç—É–ø –∫ VPN –æ—Ç–∫–ª—é—á—ë–Ω.\n\n' +
                    '–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.',
                    { parse_mode: 'Markdown' }
                );

                if (user.vpnClientName) {
                    await revokeVpnClient(user.vpnClientName);
                    console.log(`–û—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø –¥–ª—è ${user.userId} (${user.vpnClientName})`);
                } else {
                    console.warn(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö VPN –¥–ª—è ${user.userId}`);
                    await bot.telegram.sendMessage(
                        process.env.ADMIN_ID,
                        `‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId} –Ω–µ—Ç VPN-–∫–ª–∏–µ–Ω—Ç–∞`,
                        { parse_mode: 'Markdown' }
                    );
                }
            } catch (e) {
                console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è ${user.userId}:`, e.message);
            }
        }
    } catch (err) {
        console.error('[Cron] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:', err);
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–æ–±–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã
 */
const checkExpiredTrials = async (bot) => {
    try {
        const now = new Date();
        const expiredTrials = await User.find({
            trialUsed: true,
            trialExpire: { $lte: now },
            trialClientName: { $ne: null }
        });

        console.log(`[Cron] –ù–∞–π–¥–µ–Ω–æ ${expiredTrials.length} –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–±–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤.`);

        for (const user of expiredTrials) {
            try {
                await deleteVpnClient(user.trialClientName);

                user.trialClientName = null;
                user.trialExpire = null;
                await user.save();

                await bot.telegram.sendMessage(
                    user.userId,
                    '‚è∞ *–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫!* –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –º–µ–Ω—é (/start).',
                    { parse_mode: 'Markdown' }
                );

                await bot.telegram.sendMessage(
                    process.env.ADMIN_ID,
                    `üîî *–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫ –¥–ª—è:* ${user.firstName || user.username} (ID: ${user.userId})`,
                    { parse_mode: 'Markdown' }
                );

            } catch (e) {
                console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è trial –¥–ª—è ${user.userId}:`, e);
                await bot.telegram.sendMessage(
                    process.env.ADMIN_ID,
                    `üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è trial –¥–ª—è ${user.userId}: ${e.message}`,
                    { parse_mode: 'Markdown' }
                );
            }
        }
    } catch (err) {
        console.error('[Cron] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ trial:', err);
    }
};

/**
 * –£–¥–∞–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
 */
const cleanInactiveUsers = async (bot) => {
    try {
        const now = new Date();
        const deletionThreshold = new Date(now.getTime() - 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ 5 –º–∏–Ω—É—Ç
        const inactiveUsers = await User.find({
            status: { $in: ['inactive', 'pending', 'rejected'] },
            lastInteraction: { $lte: deletionThreshold },
            subscriptionCount: 0,
            expireDate: null
        });

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π, –Ω–µ –ø—Ä–æ–¥–ª–∏–≤—à–∏–µ 5 –º–∏–Ω—É—Ç
        const expiredSubscriptionUsers = await User.find({
            status: 'inactive',
            subscriptionCount: { $gt: 0 },
            expireDate: { $lte: deletionThreshold },
            lastInteraction: { $lte: deletionThreshold }
        });

        console.log(`[Cron][${now.toLocaleString('ru-RU', { timeZone: 'Asia/Krasnoyarsk' })}] –ù–∞–π–¥–µ–Ω–æ ${inactiveUsers.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ${expiredSubscriptionUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);

        // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)
        for (const user of inactiveUsers) {
            try {
                if (user.trialClientName) {
                    await deleteVpnClient(user.trialClientName);
                    console.log(`[DEBUG] –£–¥–∞–ª—ë–Ω –ø—Ä–æ–±–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: ${user.trialClientName} –¥–ª—è ${user.userId}`);
                }
                await User.deleteOne({ userId: user.userId });
                console.log(`[DEBUG] –£–¥–∞–ª—ë–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.userId}`);

                await bot.telegram.sendMessage(
                    process.env.ADMIN_ID,
                    `üóë *–£–¥–∞–ª—ë–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.firstName || user.username} (ID: ${user.userId})`,
                    { parse_mode: 'Markdown' }
                );
            } catch (e) {
                console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}:`, e);
            }
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        for (const user of expiredSubscriptionUsers) {
            try {
                if (user.vpnClientName) {
                    await deleteVpnClient(user.vpnClientName);
                    console.log(`[DEBUG] –£–¥–∞–ª—ë–Ω VPN-–∫–ª–∏–µ–Ω—Ç: ${user.vpnClientName} –¥–ª—è ${user.userId}`);
                }
                if (user.trialClientName) {
                    await deleteVpnClient(user.trialClientName);
                    console.log(`[DEBUG] –£–¥–∞–ª—ë–Ω –ø—Ä–æ–±–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: ${user.trialClientName} –¥–ª—è ${user.userId}`);
                }
                await User.deleteOne({ userId: user.userId });
                console.log(`[DEBUG] –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: ${user.userId}`);

                await bot.telegram.sendMessage(
                    process.env.ADMIN_ID,
                    `üóë *–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:* ${user.firstName || user.username} (ID: ${user.userId})`,
                    { parse_mode: 'Markdown' }
                );
            } catch (e) {
                console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π ${user.userId}:`, e);
            }
        }
    } catch (err) {
        console.error('[Cron] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
    }
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á
 */
exports.setupReminders = (bot) => {
    // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00 –ø–æ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫—É - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    cron.schedule('0 10 * * *', () => checkExpiringSubscriptions(bot), {
        timezone: 'Asia/Krasnoyarsk'
    });

    // –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    cron.schedule('0 */3 * * *', () => checkUnansweredQuestions(bot), {
        timezone: 'Asia/Krasnoyarsk'
    });

    // –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    cron.schedule('0 */6 * * *', () => checkExpiredSubscriptions(bot), {
        timezone: 'Asia/Krasnoyarsk'
    });

    // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–±–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤
    cron.schedule('0 */10 * * * *', () => checkExpiredTrials(bot), {
        timezone: 'Asia/Krasnoyarsk'
    });

    // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç - –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    cron.schedule('*/5 * * * * *', () => cleanInactiveUsers(bot), {
        timezone: 'Asia/Krasnoyarsk'
    });

    console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è GMT+7 (–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫)');
    console.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:');
    console.log('- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00');
    console.log('- –í–æ–ø—Ä–æ—Å—ã: –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ (0,3,6,9,12,15,18,21)');
    console.log('- –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ (0,6,12,18)');
    console.log('- –ò—Å—Ç–µ–∫—à–∏–µ –ø—Ä–æ–±–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
    console.log('- –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
};