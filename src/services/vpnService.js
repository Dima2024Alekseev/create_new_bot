const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
    BASE_URL: 'http://37.233.85.212:51821',
    PASSWORD: process.env.WG_API_PASSWORD,
    TIMEOUT: 15000,
    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ó–ù–ê–ß–ï–ù–ò–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ö–õ–Æ–ß –°–ï–†–í–ï–†–ê
    SERVER_PUBLIC_KEY: '+VmjO9mBKNMW7G7sdn6Haqxzx2YXgi592/LfepbRLDU=' 
};

let sessionCookie = null;

const api = axios.create({
    baseURL: API_CONFIG.BASE_URL,
    timeout: API_CONFIG.TIMEOUT,
    headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }
});

api.interceptors.request.use(config => {
    if (sessionCookie) {
        config.headers.Cookie = sessionCookie;
    }
    return config;
});

async function login() {
    try {
        const response = await api.post('/api/session', { password: API_CONFIG.PASSWORD });
        sessionCookie = response.headers['set-cookie']?.toString();
        if (!sessionCookie) {
            throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
        console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
            status: error.response?.status,
            data: error.response?.data
        });
        throw new Error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    }
}

async function createClient(clientName) {
    try {
        const response = await api.post('/api/wireguard/client', {
            name: clientName,
            allowedIPs: '10.8.0.0/24'
        });
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', {
            status: error.response?.status,
            data: error.response?.data
        });
        throw error;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ API_CONFIG
function generateConfig(clientData) {
    return `[Interface]
PrivateKey = ${clientData.privateKey}
Address = ${clientData.address}
DNS = 1.1.1.1

[Peer]
PublicKey = ${API_CONFIG.SERVER_PUBLIC_KEY}
Endpoint = ${API_CONFIG.BASE_URL.replace('http://', '').replace(':51821', '')}:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25`;
}

exports.createVpnClient = async (clientName) => {
    try {
        await login();

        console.log(`‚åõ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
        const clientData = await createClient(clientName);

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ clientData.publicKey
        if (!clientData || !clientData.privateKey || !clientData.publicKey) {
             console.error('‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.');
             console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(clientData, null, 2));
             throw new Error('–û—Ç API –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–ª—é—á–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }

        console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è: ${clientName}`);
        const config = generateConfig(clientData);

        if (!config) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
        }

        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
        return config;
    } catch (error) {
        console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
            message: error.message,
            stack: error.stack
        });
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
    }
};