// controllers/userController.js

const User = require('../models/User');
const Question = require('../models/Question'); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
const { paymentDetails, formatDate, formatDuration } = require('../utils/helpers');
const { checkAdmin } = require('./adminController');
const { Markup } = require('telegraf');

// === handleStart ===
exports.handleStart = async (ctx) => {
  const { id, first_name } = ctx.from;

  // === –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ê ===
  if (id === parseInt(process.env.ADMIN_ID) && checkAdmin(ctx)) {
    return ctx.replyWithMarkdown(
      'üëã *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n' +
      '–ö–æ–º–∞–Ω–¥—ã:\n' +
      '/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏\n' +
      '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
      '/questions - –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã',
      {
        reply_markup: { // –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardMarkup
          inline_keyboard: [
            [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏', callback_data: 'check_payments_admin' }],
            [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats_admin' }],
            [{ text: '–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'list_questions' }]
          ]
        }
      }
    );
  }

  // === –õ–û–ì–ò–ö–ê –î–õ–Ø –û–ë–´–ß–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
  const user = await User.findOne({ userId: id });

  let message = '';
  let keyboardButtons = [];

  const hasActiveOrPendingSubscription = user?.status === 'active' || user?.status === 'pending';

  if (user?.status === 'active' && user.expireDate) {
    const timeLeft = user.expireDate.getTime() - new Date().getTime();

    message = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(user.expireDate, true)}*`;
    if (timeLeft > 0) {
      message += `\n–û—Å—Ç–∞–ª–æ—Å—å: ${formatDuration(timeLeft)}.`;
    } else {
      message += `\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫.`;
    }

    keyboardButtons.push([{ text: 'üóì –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if (!user.subscriptionCount || user.subscriptionCount === 1) {
      keyboardButtons.push([{ text: 'üìÅ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', callback_data: `send_vpn_info_${id}` }]);
    }

  } else {
    message = `üîê *VPN –ø–æ–¥–ø–∏—Å–∫–∞: ${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
      `${paymentDetails(id, first_name)}\n\n` +
      '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_';
  }

  if (hasActiveOrPendingSubscription) {
    keyboardButtons.push(
      [{ text: 'üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }]
    );
  }

  keyboardButtons.push(
    [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }]
  );

  // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å InlineKeyboard
  ctx.replyWithMarkdown(
    message,
    {
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: keyboardButtons
      }
    }
  );
};

// === checkSubscriptionStatus ===
exports.checkSubscriptionStatus = async (ctx) => {
  const { id, first_name } = ctx.from;
  const user = await User.findOne({ userId: id });

  if (!user || (user.status !== 'active' && user.status !== 'pending')) {
    await ctx.replyWithMarkdown(
      `–í—ã –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. VPN –ø–æ–¥–ø–∏—Å–∫–∞: *${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
      `${paymentDetails(id, first_name)}\n\n` +
      '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
      { disable_web_page_preview: true }
    );
    return ctx.answerCbQuery();
  }

  if (user?.status === 'active' && user.expireDate) {
    const timeLeft = user.expireDate.getTime() - new Date().getTime();

    let message = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(user.expireDate, true)}*`;
    if (timeLeft > 0) {
      message += `\n–û—Å—Ç–∞–ª–æ—Å—å: ${formatDuration(timeLeft)}.`;
    } else {
      message += `\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫.`;
    }

    await ctx.replyWithMarkdown(message);
  } else if (user?.status === 'pending') {
    await ctx.reply('‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
  } else if (user?.status === 'rejected') {
    await ctx.reply('‚ùå –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.');
  } else {
    await ctx.replyWithMarkdown(
      `–í—ã –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. VPN –ø–æ–¥–ø–∏—Å–∫–∞: *${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
      `${paymentDetails(id, first_name)}\n\n` +
      '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
      { disable_web_page_preview: true }
    );
  }
  await ctx.answerCbQuery();
};

// === extendSubscription ===
exports.extendSubscription = async (ctx) => {
  const { id, first_name } = ctx.from;
  await ctx.replyWithMarkdown(
    `–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n\n` +
    `üîê *VPN –ø–æ–¥–ø–∏—Å–∫–∞: ${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
    `${paymentDetails(id, first_name)}\n\n` +
    '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
    { disable_web_page_preview: true }
  );
  await ctx.answerCbQuery();
};

// === promptForQuestion ===
exports.promptForQuestion = async (ctx) => {
  await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  await ctx.answerCbQuery();
};

// === requestVpnInfo ===
exports.requestVpnInfo = async (ctx) => {
  const userId = parseInt(ctx.match[1]);
  const user = await User.findOne({ userId });

  if (!user || user.status !== 'active' || (user.subscriptionCount && user.subscriptionCount > 1)) {
    await ctx.reply('‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.');
    return ctx.answerCbQuery();
  }

  await ctx.telegram.sendMessage(
    process.env.ADMIN_ID,
    `üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${userId}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', `send_instruction_to_${userId}`)]
    ])
  );

  await ctx.reply('‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω –≤—ã—à–ª–µ—Ç –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
  await ctx.answerCbQuery();
};

// === handleVpnConfigured ===
exports.handleVpnConfigured = async (ctx) => {
  const userId = parseInt(ctx.match[1]);
  const user = await User.findOne({ userId });

  if (!user) {
    return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  if (user.vpnConfigured) {
    return ctx.answerCbQuery('–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–Ω–µ–µ.');
  }

  await User.findOneAndUpdate(
    { userId },
    { vpnConfigured: true },
    { new: true }
  );

  await ctx.telegram.sendMessage(
    process.env.ADMIN_ID,
    `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${userId}) —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª VPN!`
  );

  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN.');
  await ctx.answerCbQuery('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!');
};

// === handleUserReplyKeyboard (–Ω–æ–≤—ã–π) ===
exports.handleUserReplyKeyboard = async (ctx) => {
    const text = ctx.message.text;
    switch (text) {
        case 'üóì –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞':
            await exports.checkSubscriptionStatus(ctx);
            break;
        case '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
            await exports.promptForQuestion(ctx);
            break;
        case 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å VPN':
            await exports.extendSubscription(ctx);
            break;
        case 'üìö –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã':
            await exports.showUserQuestions(ctx); // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            break;
        default:
            // –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —è–≤–Ω–æ.
            // –ù–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.');
            break;
    }
};

// === showUserQuestions (–Ω–æ–≤—ã–π) ===
exports.showUserQuestions = async (ctx) => {
    try {
        const userId = ctx.from.id;

        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –º–æ–¥–µ–ª—å Question –≤–≤–µ—Ä—Ö—É
        const Question = require('../models/Question'); // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

        const userQuestions = await Question.find({ userId: userId })
                                          .sort({ createdAt: -1 })
                                          .limit(10);

        if (userQuestions.length === 0) {
            return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.');
        }

        let message = 'üìö *–í–∞—à–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n';

        for (const [index, question] of userQuestions.entries()) {
            message += `*${index + 1}. –í–æ–ø—Ä–æ—Å –æ—Ç ${formatDate(question.createdAt, true)}:*\n`;
            message += `> ${question.questionText}\n`;
            if (question.status === 'answered' && question.answerText) {
                message += `*–û—Ç–≤–µ—Ç:* ${question.answerText}\n`;
            } else if (question.status === 'pending') {
                message += `_–°—Ç–∞—Ç—É—Å:_ ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞\n`;
            } else {
                 message += `_–°—Ç–∞—Ç—É—Å:_ ${question.status}\n`;
            }
            message += '\n';
        }

        await ctx.reply(message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};