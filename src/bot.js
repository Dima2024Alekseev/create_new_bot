require('dotenv').config({ path: __dirname + '/../primer.env' });

const { Telegraf, session, Markup } = require('telegraf');
// ‚ö†Ô∏è –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LocalSession –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const LocalSession = require('telegraf-session-local');
const connectDB = require('./config/db');
const User = require('./models/User');

const {
    handleStart,
    checkSubscriptionStatus,
    extendSubscription,
    promptForQuestion,
    handleVpnConfigured,
    promptVpnFailure,
    promptCancelSubscription,
    cancelSubscriptionFinal,
    cancelSubscriptionAbort
} = require('./controllers/userController');

// ‚ö†Ô∏è –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ paymentController
const { handlePhoto, handleApprove, handleReject } = require('./controllers/paymentController');
const { checkPayments, stats, checkAdminMenu } = require('./controllers/adminController');
const { handleQuestion, handleAnswer, listQuestions } = require('./controllers/questionController');
const { setupReminders } = require('./services/reminderService');
const { checkAdmin } = require('./utils/auth');

const bot = new Telegraf(process.env.BOT_TOKEN, {
    telegram: {
        agent: null,
        handshakeTimeout: 30000
    }
});

// ‚ö†Ô∏è –ù–û–í–û–ï: –í–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –≤ –±–æ—Ç–∞. –¢–µ–ø–µ—Ä—å ctx.session –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.
bot.use((new LocalSession({ database: 'session_db.json' })).middleware());

connectDB().catch(err => {
    console.error('‚ùå MongoDB connection failed:', err);
    process.exit(1);
});

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ---
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ö†Ô∏è Unhandled Rejection at:', promise, 'reason:', reason);
    console.error('Stack trace:', reason.stack);
});

process.on('uncaughtException', async (err) => {
    console.error('‚ö†Ô∏è Uncaught Exception:', err);
    console.error('Stack trace:', err.stack);
    try {
        await bot.telegram.sendMessage(process.env.ADMIN_ID, `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: ${err.message}\n\`\`\`\n${err.stack}\n\`\`\``, { parse_mode: 'Markdown' }).catch(e => console.error("Error sending exception to admin:", e));
    } catch (e) {
        console.error("Failed to send uncaught exception to admin:", e);
    }
    await bot.stop().catch(e => console.error("Error stopping bot on uncaught exception:", e));
    process.exit(1);
});

// --- Middleware –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ê–î–ú–ò–ù–ê –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º ---
bot.use(async (ctx, next) => {
    if (ctx.from?.id === parseInt(process.env.ADMIN_ID)) {
        if (ctx.session?.awaitingAnswerFor && ctx.message?.text) {
            await handleAnswer(ctx);
            return;
        }

        if (ctx.session?.awaitingAnswerVpnIssueFor && ctx.message?.text) {
            const targetUserId = ctx.session.awaitingAnswerVpnIssueFor;
            const adminAnswer = ctx.message.text;

            try {
                await ctx.telegram.sendMessage(
                    targetUserId,
                    `üõ†Ô∏è *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN:*\n\n` +
                    `"${adminAnswer}"`,
                    { parse_mode: 'Markdown' }
                );
                await ctx.reply(`‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}:`, error);
                await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.`);
            } finally {
                ctx.session.awaitingAnswerVpnIssueFor = null;
            }
            return;
        }
    }

    if (ctx.session?.awaitingVpnTroubleshoot && ctx.from?.id === ctx.session.awaitingVpnTroubleshoot && ctx.message?.text) {
        const userId = ctx.from.id;
        const problemDescription = ctx.message.text;
        const user = await User.findOne({ userId });

        let userName = user?.firstName || user?.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
        if (user?.username) {
            userName = `${userName} (@${user.username})`;
        }

        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üö® *–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} (ID: ${userId}):*\n\n` +
            `"${problemDescription}"`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚û°Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data: `answer_vpn_issue_${userId}` }]
                    ]
                }
            }
        );

        await ctx.reply('‚úÖ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.');
        ctx.session.awaitingVpnTroubleshoot = null;
        return;
    }

    return next();
});


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
bot.start(async (ctx) => {
    if (checkAdmin(ctx)) {
        await checkAdminMenu(ctx);
    } else {
        await handleStart(ctx);
    }
});

bot.on('text', async (ctx, next) => {
    if (ctx.session?.awaitingVpnTroubleshoot || ctx.from?.id === parseInt(process.env.ADMIN_ID)) {
        return next();
    }
    
    // ‚ö†Ô∏è –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    if (ctx.session?.awaitingPaymentProof) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, –∞ –Ω–µ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ /start.');
    }

    if (!ctx.message.text.startsWith('/')) {
        const userId = ctx.from.id;
        const user = await User.findOne({ userId });

        if (user && (user.status === 'inactive' || user.status === 'rejected') && !ctx.session?.awaitingAnswerFor) {
            await ctx.reply(
                '–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. üòî\n\n' +
                '–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞–º, ' +
                '–∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–∫—Ä—ã—Ç, ' +
                '–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â—ë —Ä–∞–∑.\n\n' +
                '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –≤—ã –º–æ–∂–µ—Ç–µ **–¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è** –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ' +
                'Telegram (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å).\n\n' +
                '–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. **–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—à–ª—ë—Ç –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.**'
            );
            return;
        }
        await handleQuestion(ctx);
    } else {
        return next();
    }
});


// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('admin', checkAdminMenu);
bot.command('check', checkPayments);
bot.command('stats', stats);
bot.command('questions', listQuestions);


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (—Ñ–æ—Ç–æ)
bot.on('photo', handlePhoto);


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (callback_data) ---

// –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
bot.action(/approve_(\d+)/, handleApprove);
bot.action(/reject_(\d+)/, handleReject);
bot.action('list_questions', listQuestions);
bot.action('check_payments_admin', checkPayments);
bot.action('show_stats_admin', stats);
bot.action('refresh_stats', stats);

bot.action(/answer_(\d+)/, async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }
    ctx.session.awaitingAnswerFor = ctx.match[1];
    await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    await ctx.answerCbQuery();
});

bot.action(/answer_vpn_issue_(\d+)/, async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }
    const targetUserId = parseInt(ctx.match[1]);
    ctx.session.awaitingAnswerVpnIssueFor = targetUserId;
    await ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –ø–æ –µ–≥–æ –ø—Ä–æ–±–ª–µ–º–µ —Å VPN:`);
    await ctx.answerCbQuery();
});


// –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('check_subscription', checkSubscriptionStatus);
bot.action('ask_question', promptForQuestion);
bot.action('extend_subscription', extendSubscription);
bot.action(/vpn_configured_(\d+)/, handleVpnConfigured);
bot.action(/vpn_failed_(\d+)/, promptVpnFailure);

// –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('cancel_subscription_confirm', promptCancelSubscription);
bot.action('cancel_subscription_final', cancelSubscriptionFinal);
bot.action('cancel_subscription_abort', cancelSubscriptionAbort);


// --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
setupReminders(bot);


// --- –ó–∞–ø—É—Å–∫ ---
bot.launch()
    .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Q&A + Payments)'))
    .catch(err => {
        console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
        process.exit(1);
    });

// Graceful shutdown
['SIGINT', 'SIGTERM'].forEach(signal => {
    process.once(signal, async () => {
        console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
        try {
            await bot.stop();
            console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            process.exit(0);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
            process.exit(1);
        }
    });
});