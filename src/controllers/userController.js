const User = require('../models/User');
const Question = require('../models/Question');
const { Markup } = require('telegraf');
const { formatDate, formatDuration, paymentDetails, transliterate, escapeMarkdownV2 } = require('../utils/helpers');
const { createVpnClient, revokeVpnClient, enableVpnClient } = require('../services/vpnService');
const path = require('path');
const fs = require('fs').promises;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ MarkdownV2
function escapeMarkdownV2(text) {
    if (!text) return '';
    return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

exports.handleStart = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;

    try {
        const user = await User.findOneAndUpdate(
            { userId },
            {
                userId,
                firstName: first_name,
                username,
                lastSeen: new Date()
            },
            { upsert: true, new: true, setDefaultsOnInsert: true }
        );

        let statusText = '';
        let keyboardButtons = [];

        if (user.status === 'active') {
            const now = new Date();
            let expireDate = user.expireDate;

            if (expireDate && expireDate < now) {
                user.status = 'inactive';
                await user.save();
                statusText = '‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\\.*\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\\.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã \\- –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º\\.';
                keyboardButtons.push(
                    [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]
                );
            } else {
                const timeLeft = expireDate - now;
                const daysLeft = Math.ceil(timeLeft / (1000 * 60 * 60 * 24));
                const duration = formatDuration(timeLeft);
                statusText = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\\!* –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë *${escapeMarkdownV2(duration)}*\\.`;

                if (daysLeft < 7) {
                    statusText += `\n\n‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç\\. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\\.`;
                }

                keyboardButtons.push(
                    [{ text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }],
                    [{ text: 'üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }],
                    [{ text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ VPN', callback_data: 'leave_review' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'cancel_subscription_confirm' }]
                );
            }
        } else if (user.status === 'inactive') {
            statusText = '‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\\.*\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\\.';
            keyboardButtons.push(
                [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]
            );
            if (!user.trialUsed) {
                keyboardButtons.push(
                    [{ text: 'üÜì –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø \\(1 —á–∞—Å\\)', callback_data: 'request_trial' }]
                );
            }
        } else if (user.status === 'pending') {
            statusText = '‚è≥ *–í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ\\.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –µ–≥–æ\\.';
            keyboardButtons.push(
                [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }]
            );
        } else if (user.status === 'rejected') {
            statusText = '‚ùå *–í–∞—à –ø–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω\\.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â—ë —Ä–∞–∑, —É–±–µ–¥–∏–≤—à–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö\\.';
            keyboardButtons.push(
                [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]
            );
            if (!user.trialUsed) {
                keyboardButtons.push(
                    [{ text: 'üÜì –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø \\(1 —á–∞—Å\\)', callback_data: 'request_trial' }]
                );
            }
        }

        await ctx.reply(
            `üëã –ü—Ä–∏–≤–µ—Ç, *${escapeMarkdownV2(user.firstName)}*\\! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN\\.\n\n${statusText}`,
            {
                parse_mode: 'MarkdownV2',
                reply_markup: {
                    inline_keyboard: keyboardButtons
                }
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.', { parse_mode: 'MarkdownV2' });
    }
};

exports.checkSubscriptionStatus = async (ctx) => {
    const userId = ctx.from.id;
    try {
        const user = await User.findOne({ userId });
        await ctx.answerCbQuery();

        if (!user || user.status !== 'active') {
            return ctx.reply('‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\\. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\\.', { parse_mode: 'MarkdownV2' });
        }

        const now = new Date();
        const timeLeft = user.expireDate - now;

        if (timeLeft > 0) {
            const duration = formatDuration(timeLeft);
            await ctx.reply(
                `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\\!*` +
                `\n\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *${escapeMarkdownV2(formatDate(user.expireDate, true))}*` +
                `\n–û—Å—Ç–∞–ª–æ—Å—å: *${escapeMarkdownV2(duration)}*`,
                { parse_mode: 'MarkdownV2' }
            );
        } else {
            user.status = 'inactive';
            await user.save();
            await ctx.reply('‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë\\.', { parse_mode: 'MarkdownV2' });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ checkSubscriptionStatus:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞\\.', { parse_mode: 'MarkdownV2' });
    }
};

exports.extendSubscription = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;
    const name = first_name || username;

    try {
        await ctx.answerCbQuery();
        const paymentMessage = await paymentDetails(userId, name);
        await ctx.reply(
            escapeMarkdownV2(paymentMessage) +
            `\n\n*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞\\. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É\\.*`,
            {
                parse_mode: 'MarkdownV2',
                disable_web_page_preview: true
            }
        );
        ctx.session.awaitingPaymentProof = true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ extendSubscription:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\\.', { parse_mode: 'MarkdownV2' });
    }
};

exports.promptForQuestion = async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\\. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\\.', { parse_mode: 'MarkdownV2' });
};

exports.promptCancelSubscription = async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\\?\n\n' +
        '–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN\\. ' +
        '–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –µ—ë –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞\\?',
        {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([
                [
                    Markup.button.callback('‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', 'cancel_subscription_final'),
                    Markup.button.callback('‚úÖ –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', 'cancel_subscription_abort')
                ]
            ])
        }
    );
};

exports.cancelSubscriptionFinal = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;
    const name = first_name || username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`;

    try {
        const user = await User.findOne({ userId });

        if (!user) {
            await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\\.');
            return ctx.editMessageText('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\\.', { parse_mode: 'MarkdownV2' });
        }

        if (user.vpnClientName) {
            await revokeVpnClient(user.vpnClientName);
            console.log(`üîí VPNmeln –¥–ª—è ${user.vpnClientName} (ID: ${userId})`);
        }

        await User.updateOne(
            { userId },
            {
                status: 'inactive',
                expireDate: null,
                vpnConfigured: false
            }
        );

        await ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\\.');
        await ctx.editMessageText('–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\\. –î–æ—Å—Ç—É–ø –∫ VPN –ø—Ä–µ–∫—Ä–∞—â—ë–Ω\\.', { parse_mode: 'MarkdownV2' });

        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üîî *–û–ø–æ–≤–µ—â–µ–Ω–∏–µ:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${escapeMarkdownV2(name)}* \\(ID: ${userId}\\) –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É\\.\n` +
            `VPN\\-–∫–ª–∏–µ–Ω—Ç *${escapeMarkdownV2(user.vpnClientName || '–Ω–µ —É–∫–∞–∑–∞–Ω')}* –æ—Ç–∫–ª—é—á—ë–Ω\\.`,
            { parse_mode: 'MarkdownV2' }
        );

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ (ID: ${userId}):`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏\\!');
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º\\.', { parse_mode: 'MarkdownV2' });
    }
};

exports.cancelSubscriptionAbort = async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\\.');
    await ctx.editMessageText('–û—Ç–ª–∏—á–Ω–æ\\! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π\\. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Å—Ç–∞—Ç—É—Å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é \\(/start\\)\\.', { parse_mode: 'MarkdownV2' });
};

exports.handleVpnConfigured = async (ctx) => {
    const userId = ctx.match[1];
    const user = await User.findOne({ userId });
    const name = user?.firstName || user?.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`;

    await ctx.answerCbQuery('–û—Ç–ª–∏—á–Ω–æ\\!');
    await ctx.editMessageText(
        '–û—Ç–ª–∏—á–Ω–æ\\! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\\.‚úåÔ∏è\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ\\! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É üòä',
        {
            parse_mode: 'MarkdownV2',
            reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'ask_question')]
            ])
        }
    );

    try {
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `‚úÖ *–û–ø–æ–≤–µ—â–µ–Ω–∏–µ:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${escapeMarkdownV2(name)}* \\(ID: ${userId}\\) —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª VPN\\.`,
            { parse_mode: 'MarkdownV2' }
        );
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    }
};

exports.promptVpnFailure = async (ctx) => {
    const userId = ctx.from.id;
    await ctx.answerCbQuery();
    ctx.session.awaitingVpnTroubleshoot = userId;
    await ctx.reply(
        '–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π\\. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ\\.',
        { parse_mode: 'MarkdownV2' }
    );
};

exports.handleTrialRequest = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;

    try {
        let user = await User.findOne({ userId });
        if (!user) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º
            user = new User({ userId, firstName: first_name, username });
            await user.save();
        }

        if (user.trialUsed) {
            return ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø\\. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É \\(/start\\)\\.', { parse_mode: 'MarkdownV2' });
        }

        if (user.status === 'active') {
            return ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\\. –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\\.', { parse_mode: 'MarkdownV2' });
        }

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ VPN-–∫–ª–∏–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º –∏–º–µ–Ω–µ–º 'trial'
        const baseName = 'trial';
        const { config, clientName } = await createVpnClient(baseName);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const now = new Date();
        user.trialUsed = true;
        user.trialClientName = clientName;
        user.trialStart = now;
        user.trialExpire = new Date(now.getTime() + 60 * 60 * 1000); // 1 —á–∞—Å
        await user.save();

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É configs, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const configDir = path.join(__dirname, '..', 'configs');
        await fs.mkdir(configDir, { recursive: true });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const configPath = path.join(configDir, `${clientName}.conf`);
        await fs.writeFile(configPath, config);
        await ctx.telegram.sendDocument(userId, { source: configPath, filename: `${clientName}.conf` });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        const videoPath = path.join(__dirname, '..', 'videos', 'instruction.mp4');
        await ctx.telegram.sendVideo(userId, { source: videoPath, filename: 'instruction.mp4' }, {
            caption: 'üìπ *–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN*\n\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –≤–∏–¥–µ–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\\.',
            parse_mode: 'MarkdownV2'
        });

        await ctx.reply(
            'üÜì *–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –Ω–∞ 1 —á–∞—Å\\!*' +
            '\n\n–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–ª–µ–¥—É–π—Ç–µ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN\\. –ß–µ—Ä–µ–∑ 1 —á–∞—Å –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\\.' +
            '\n\n–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –º–µ–Ω—é \\(/start\\)\\.',
            { parse_mode: 'MarkdownV2' }
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        const adminMessage = `üîî *–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${escapeMarkdownV2(first_name || username)}* \\(ID: ${userId}\\), –∫–ª–∏–µ–Ω—Ç: ${escapeMarkdownV2(clientName)}\\. –ò—Å—Ç–µ–∫–∞–µ—Ç: ${escapeMarkdownV2(formatDate(user.trialExpire, true))}`;
        console.log('[DEBUG] –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', adminMessage);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            adminMessage,
            { parse_mode: 'MarkdownV2' }
        );

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await fs.unlink(configPath);

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è ${userId}:`, error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\\. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º\\.', { parse_mode: 'MarkdownV2' });
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üö® *–û—à–∏–±–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ VPN –¥–ª—è* ${escapeMarkdownV2(userId.toString())}: ${escapeMarkdownV2(error.message)}`,
            { parse_mode: 'MarkdownV2' }
        );
    }
};