const User = require('../models/User');
const { Markup } = require('telegraf');
const { checkAdmin } = require('./adminController');
const { formatDate } = require('../utils/helpers');

exports.handlePhoto = async (ctx) => {
  const { id, first_name, username } = ctx.from;

  if (id === parseInt(process.env.ADMIN_ID) && checkAdmin(ctx)) {
    return ctx.reply('–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
  }
  const photo = ctx.message.photo.pop();

  await User.findOneAndUpdate(
    { userId: id },
    {
      userId: id,
      username: username || first_name,
      firstName: first_name,
      paymentPhotoId: photo.file_id,
      status: 'pending'
    },
    { upsert: true, new: true }
  );
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${id}`),
    Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)
  ]);
  await ctx.telegram.sendPhoto(
    process.env.ADMIN_ID,
    photo.file_id,
    {
      caption: `üì∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç ${first_name} (@${username || '–Ω–µ—Ç'})\nID: ${id}`,
      ...keyboard
    }
  );
  await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
};

exports.handleApprove = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  const userId = parseInt(ctx.match[1]);

  const user = await User.findOne({ userId });

  let newExpireDate = new Date();

  if (user && user.expireDate && user.expireDate > new Date()) {
    newExpireDate = new Date(user.expireDate);
  }

  newExpireDate.setMonth(newExpireDate.getMonth() + 1);
  newExpireDate.setHours(23, 59, 59, 999);

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫
  const updatedUser = await User.findOneAndUpdate(
    { userId },
    {
      status: 'active',
      expireDate: newExpireDate,
      paymentPhotoId: null,
      $inc: { subscriptionCount: 1 } // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º subscriptionCount –Ω–∞ 1
    },
    { new: true, upsert: true } // new: true - –≤–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, upsert: true - —Å–æ–∑–¥–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  );

  let message = `üéâ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n` +
    `–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${formatDate(newExpireDate, true)}\n\n`;

  let keyboard = Markup.inlineKeyboard([]);

  // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (subscriptionCount === 1), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É
  if (updatedUser.subscriptionCount === 1) {
    message += `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.`;
    keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìÅ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', `send_vpn_info_${userId}`)]
    ]);
  } else {
    // –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    message += `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞.`;
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
    // –ù–æ –ø–æ —É—Å–ª–æ–≤–∏—é, –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º.
  }

  await ctx.telegram.sendMessage(
    userId,
    message,
    keyboard.reply_markup ? keyboard : {} // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
  );
  await ctx.answerCbQuery('‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç');
  await ctx.deleteMessage();
};

exports.handleReject = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  const userId = parseInt(ctx.match[1]);
  await User.findOneAndUpdate(
    { userId },
    { status: 'rejected' }
  );
  await ctx.telegram.sendMessage(
    userId,
    '‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω\n\n' +
    '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
    '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
    '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n' +
    '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑.'
  );
  await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
  await ctx.deleteMessage();
};