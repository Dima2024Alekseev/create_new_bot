// controllers/paymentController.js
const User = require('../models/User');
const { Markup } = require('telegraf');
const { checkAdmin } = require('./adminController');
const { formatDate } = require('../utils/helpers');
// –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å wireguardService, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω,
// –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏ –µ–≥–æ –≤ handleApprove, –æ–Ω –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
// const { createWgClient } = require('../services/wireguardService'); 

exports.handlePhoto = async (ctx) => {
    const { id, first_name, username } = ctx.from;

    if (id === parseInt(process.env.ADMIN_ID) && checkAdmin(ctx)) {
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ checkAdmin(ctx) –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ,
        // –∏–ª–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.
        // –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥–µ—Ç /start, –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ.
        return ctx.reply('–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.');
    }
    if (!ctx.message.photo || ctx.message.photo.length === 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.');
    }

    const photo = ctx.message.photo.pop(); // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

    await User.findOneAndUpdate(
        { userId: id },
        {
            userId: id,
            username: username || first_name,
            firstName: first_name,
            paymentPhotoId: photo.file_id,
            status: 'pending'
        },
        { upsert: true, new: true }
    );
    const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${id}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)
    ]);
    await ctx.telegram.sendPhoto(
        process.env.ADMIN_ID,
        photo.file_id,
        {
            caption: `üì∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç ${first_name} (@${username || '–Ω–µ—Ç'})\nID: ${id}`,
            ...keyboard
        }
    );
    await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
};

exports.handleApprove = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }
    const userId = parseInt(ctx.match[1]);
    const user = await User.findOne({ userId });

    if (!user) {
        return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–ª–∏ –¥–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    // if (user.status === 'active') {
    //     return ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.');
    // }

    let newExpireDate = new Date();

    if (user && user.expireDate && user.expireDate > new Date()) {
        newExpireDate = new Date(user.expireDate);
    }

    newExpireDate.setMonth(newExpireDate.getMonth() + 1);
    newExpireDate.setHours(23, 59, 59, 999);

    let clientData = null; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º clientData

    try {
        // !!! –í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å WG –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏,
        // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é createWgClient –∑–¥–µ—Å—å.
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'wireguardService' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.
        // –ü—Ä–∏–º–µ—Ä:
        /*
        try {
            clientData = await createWgClient(user.userId, user.firstName || user.username);
            user.wireguardPeerId = clientData.peerId;
            user.wireguardClientName = clientData.clientName;
        } catch (wgError) {
            console.error(`[Approve] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WG –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è ${userId}:`, wgError.message);
            await ctx.telegram.sendMessage(
                process.env.ADMIN_ID,
                `‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WireGuard –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username} (ID: ${userId}). ` +
                `–ü—Ä–∏—á–∏–Ω–∞: ${wgError.message}. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.`,
                { reply_to_message_id: ctx.callbackQuery.message.message_id }
            );
            return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WireGuard –∫–ª–∏–µ–Ω—Ç–∞.');
        }
        */

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        const updatedUser = await User.findOneAndUpdate(
            { userId },
            {
                status: 'active',
                expireDate: newExpireDate,
                paymentPhotoId: null,
                $inc: { subscriptionCount: 1 }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º subscriptionCount –Ω–∞ 1
                // wireguardPeerId: clientData?.peerId, // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ WG
                // wireguardClientName: clientData?.clientName // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ WG
            },
            { new: true, upsert: true }
        );

        let messageToUser = `üéâ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(newExpireDate, true)}.\n\n`;
        let userKeyboard = Markup.inlineKeyboard([]);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ `requestVpnInfo`
        // –∏–ª–∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ `send_instruction_to_`
        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤—ã *—Ö–æ—Ç–∏—Ç–µ*, —á—Ç–æ–±—ã —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –°–†–ê–ó–£ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏,
        // —Ç–æ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏ –≤–∏–¥–µ–æ –∑–¥–µ—Å—å,
        // –∏ —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

        // –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username} (ID: ${userId}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ${formatDate(updatedUser.expireDate, true)}.`,
            { reply_to_message_id: ctx.callbackQuery.message.message_id }
        );

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏,
        // –ï–°–õ–ò —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        // –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.
        if (updatedUser.subscriptionCount === 1) { // –ò–ª–∏ –µ—Å–ª–∏ –≤—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∂–¥–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
             messageToUser += '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:';
             userKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª', `vpn_configured_${userId}`)],
                [Markup.button.callback('‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', `vpn_failed_${userId}`)]
             ]);
        } else {
             messageToUser += '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞.';
             // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        }

        await ctx.telegram.sendMessage(
            userId,
            messageToUser,
            userKeyboard.reply_markup ? userKeyboard : {} // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        );

        await ctx.answerCbQuery('‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç');
        await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è ${userId}:`, error);
        await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è ${user.firstName || user.username}. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
};

exports.handleReject = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }
    const userId = parseInt(ctx.match[1]);
    const user = await User.findOne({ userId }); // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–º–µ–Ω–∏

    await User.findOneAndUpdate(
        { userId },
        { status: 'rejected', paymentPhotoId: null } // –û—á–∏—â–∞–µ–º photoId –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.telegram.sendMessage(
        userId,
        '‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω\n\n' +
        '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
        '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
        '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n' +
        '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑.'
    );
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª
    await ctx.telegram.sendMessage(
        process.env.ADMIN_ID,
        `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user?.firstName || user?.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${userId}).`,
        { reply_to_message_id: ctx.callbackQuery.message.message_id } // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º
    );

    await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
    await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º
};