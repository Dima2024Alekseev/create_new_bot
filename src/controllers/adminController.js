const User = require('../models/User');
const Question = require('../models/Question');
const { formatDate } = require('../utils/helpers');
const { Markup } = require('telegraf');

exports.checkAdmin = (ctx) => {
    return ctx.from && ctx.from.id === parseInt(process.env.ADMIN_ID);
};

exports.checkPayments = async (ctx) => {
    if (!exports.checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }

    try {
        const pendingUsers = await User.find({ status: 'pending' });

        if (pendingUsers.length === 0) {
            await ctx.reply('‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
            return ctx.answerCbQuery(); // –ó–¥–µ—Å—å answerCbQuery —É–º–µ—Å—Ç–µ–Ω, —Ç.–∫. —ç—Ç–æ —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ
        }

        for (const user of pendingUsers) {
            let message = `üì∏ *–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
                          `ID: ${user.userId}\n` +
                          `–ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                          `Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                          `–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${formatDate(user.paymentScreenshotDate)}`;

            await ctx.telegram.sendPhoto(
                ctx.chat.id, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞
                user.paymentScreenshotId,
                {
                    caption: message,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${user.userId}` },
                                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${user.userId}` }
                            ]
                        ]
                    }
                }
            );
        }
        await ctx.answerCbQuery(); // –ò –∑–¥–µ—Å—å, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–¥–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π.');
        if (ctx.callbackQuery) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ callbackQuery, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');
        }
    }
};

exports.stats = async (ctx) => {
    if (!exports.checkAdmin(ctx)) {
        // –ï—Å–ª–∏ —ç—Ç–æ callbackQuery, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if (ctx.callbackQuery) {
            return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
        }
        return; // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callbackQuery –∏ –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }

    try {
        const totalUsers = await User.countDocuments();
        const activeUsers = await User.countDocuments({ status: 'active' });
        const pendingPayments = await User.countDocuments({ status: 'pending' });
        const pendingQuestions = await Question.countDocuments({ status: 'pending' });
        const last7DaysUsers = await User.countDocuments({
            createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
        });

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        const latestSubscription = await User.findOne({ status: 'active', expireDate: { $exists: true } })
                                           .sort({ expireDate: -1 })
                                           .limit(1);

        let latestExpireDate = 'N/A';
        if (latestSubscription && latestSubscription.expireDate) {
            latestExpireDate = formatDate(latestSubscription.expireDate, true);
        }

        let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞*\n\n` +
                      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${totalUsers}*\n` +
                      `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: *${activeUsers}*\n` +
                      `‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: *${pendingPayments}*\n` +
                      `‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: *${pendingQuestions}*\n` +
                      `üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (7 –¥–Ω–µ–π): *${last7DaysUsers}*\n` +
                      `üóì –°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: *${latestExpireDate}*`;

        if (ctx.callbackQuery) {
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É (callbackQuery), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }]
                    ]
                }
            });
            await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!'); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (message), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.replyWithMarkdown(message, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }]
                    ]
                }
            });
            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º answerCbQuery() –∑–¥–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –Ω–µ callbackQuery
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        if (ctx.callbackQuery) {
             await ctx.editMessageText('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
             await ctx.answerCbQuery('–û—à–∏–±–∫–∞!'); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å –æ—à–∏–±–∫–æ–π
        } else {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
    }
};