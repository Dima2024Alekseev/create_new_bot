const User = require('../models/User');
const Question = require('../models/Question');
const { formatDate } = require('../utils/helpers');
const { Markup } = require('telegraf'); // –î–æ–±–∞–≤–∏–º Markup –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–µ–ø–µ—Ä—å –±–µ–∑ —É—á–µ—Ç–∞ adminModes, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω)
exports.checkAdmin = (ctx) => {
  return ctx.from?.id === parseInt(process.env.ADMIN_ID);
};

exports.checkPayments = async (ctx) => {
  if (!exports.checkAdmin(ctx)) {
    return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }
  const pendingPayments = await User.find({ status: 'pending' });

  if (pendingPayments.length === 0) {
    return ctx.reply('‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.');
  }

  for (const user of pendingPayments) {
    const keyboard = Markup.inlineKeyboard([
      Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${user.userId}`),
      Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${user.userId}`)
    ]);
    await ctx.telegram.sendPhoto(
      ctx.from.id,
      user.paymentPhotoId,
      {
        caption: `üì∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç ${user.firstName || user.username}\nID: ${user.userId}`,
        ...keyboard
      }
    );
  }
  await ctx.reply('üîç –í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
};

exports.stats = async (ctx) => {
  if (!exports.checkAdmin(ctx)) {
    return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }

  try {
    const [usersStats, questionsStats, expiringSoon] = await Promise.all([
      User.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]),
      Question.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]),
      User.find({ 
        status: 'active',
        expireDate: { $lt: new Date(Date.now() + 7 * 86400000) }
      }).sort({ expireDate: 1 }).limit(5),
      User.countDocuments({ vpnConfigured: true }) // –î–æ–±–∞–≤–∏–ª –ø–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–≤—à–∏—Ö
    ]);

    // –í–∞–∂–Ω–æ: –µ—Å–ª–∏ usersStats - —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ aggregation, –Ω—É–∂–Ω–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    const userStatusCounts = usersStats.reduce((acc, curr) => {
        acc[curr._id] = curr.count;
        return acc;
    }, {});

    const questionStatusCounts = questionsStats.reduce((acc, curr) => {
        acc[curr._id] = curr.count;
        return acc;
    }, {});

    const totalUsers = await User.countDocuments(); // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const activeUsers = userStatusCounts['active'] || 0;
    const pendingPayments = userStatusCounts['pending'] || 0;
    const totalQuestions = await Question.countDocuments(); // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    const pendingQuestions = questionStatusCounts['pending'] || 0;
    const configuredUsers = await User.countDocuments({ vpnConfigured: true }); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n` +
                  `üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
                  `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activeUsers}\n` +
                  `‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${pendingPayments}\n` +
                  `‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}\n` +
                  `üí¨ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${pendingQuestions}\n` +
                  `‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ VPN: ${configuredUsers}\n\n`;

    message += `üîî *–ë–ª–∏–∂–∞–π—à–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è:*\n`;
    if (expiringSoon.length > 0) {
      expiringSoon.forEach(user => {
        const daysLeft = Math.ceil((user.expireDate - new Date()) / 86400000);
        message += `- ${user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}: —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π (${formatDate(user.expireDate)})\n`;
      });
    } else {
      message += '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.\n';
    }

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }] // –£–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É '–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º'
        ]
      }
    });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
};

exports.listQuestions = async (ctx) => {
  if (!exports.checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const questions = await Question.find({ status: 'pending' }).sort({ createdAt: 1 });

  if (questions.length === 0) {
    await ctx.reply('‚úÖ –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.');
    return ctx.answerCbQuery();
  }

  for (const q of questions) {
    const keyboard = Markup.inlineKeyboard([
      Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `answer_${q.userId}`)
    ]);
    const user = await User.findOne({ userId: q.userId });
    await ctx.replyWithMarkdown(
      `‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç ${user ? user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (@${user?.username || '–Ω–µ—Ç'}):\n` +
      `"${q.text}"\n` +
      `ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${q.userId}\n` +
      `–í—Ä–µ–º—è: ${formatDate(q.createdAt)}`,
      keyboard
    );
  }
  await ctx.answerCbQuery();
};
