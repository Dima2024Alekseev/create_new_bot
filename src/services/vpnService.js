const axios = require('axios');
const tough = require('tough-cookie');
const { wrapper } = require('axios-cookiejar-support');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è HTTP-–∫–ª–∏–µ–Ω—Ç–∞
const cookieJar = new tough.CookieJar();
const api = wrapper(axios.create({
    baseURL: process.env.WG_API_URL,
    jar: cookieJar,
    withCredentials: true,
    timeout: 10000,
    headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }
}));

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ API wg-easy
 */
const login = async () => {
    try {
        const response = await api.post('/api/session', {
            password: process.env.WG_API_PASSWORD
        });
        
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ö—É–∫–∏:', response.headers['set-cookie']);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
            status: error.response?.status,
            data: error.response?.data,
            headers: error.response?.headers
        });
        throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ WG-Easy API');
    }
};

/**
 * –°–æ–∑–¥–∞–µ—Ç VPN-–∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */
exports.createVpnClient = async (clientName) => {
    try {
        // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await login();
        
        // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        console.log('‚åõ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞:', clientName);
        const createResponse = await api.post('/api/wireguard/client', {
            name: clientName,
            allowedIPs: '10.8.0.0/24'
        });

        // 3. –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
        const responseData = createResponse.data;
        console.log('üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(responseData, null, 2));

        // 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∫–ª–∏–µ–Ω—Ç–∞ (–≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        const clientId = responseData.id 
                      || responseData.clientId
                      || (responseData.data && responseData.data.id)
                      || (responseData.client && responseData.client.id)
                      || clientName; // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ ID

        if (!clientId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞');
        }

        console.log('üîë –ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞:', clientId);

        // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        console.log('‚åõ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ID:', clientId);
        const configResponse = await api.get(
            `/api/wireguard/client/${clientId}/configuration`,
            { responseType: 'text' }
        );

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (!configResponse.data.includes('[Interface]')) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
        }

        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
        return configResponse.data;

    } catch (error) {
        console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
            message: error.message,
            stack: error.stack,
            response: error.response?.data
        });
        
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
    }
};