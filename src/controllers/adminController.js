const User = require('../models/User');
const Question = require('../models/Question'); 
const { formatDate } = require('../utils/helpers');
const { Markup } = require('telegraf');
// –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç checkAdmin –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è utils/auth
const { checkAdmin } = require('../utils/auth');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.
 * –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–∞—Ö —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.
 * –ï—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ—Ç, –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.checkPayments = async (ctx) => {
    // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ checkAdmin –∏–∑ –∏–º–ø–æ—Ä—Ç–∞
    if (!checkAdmin(ctx)) { 
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }

    try {
        const pendingUsers = await User.find({ status: 'pending' });

        if (pendingUsers.length === 0) {
            await ctx.reply('‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
            return ctx.answerCbQuery();
        }

        for (const user of pendingUsers) {
            let message = `üì∏ *–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
                          `ID: ${user.userId}\n` +
                          `–ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                          `Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                          `–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${user.paymentPhotoDate ? formatDate(user.paymentPhotoDate) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`; 
            
            if (user.paymentPhotoId) { 
                await ctx.telegram.sendPhoto(
                    ctx.chat.id, 
                    user.paymentPhotoId, 
                    {
                        caption: message,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${user.userId}` },
                                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${user.userId}` }
                                ]
                            ]
                        }
                    }
                );
            } else {
                await ctx.replyWithMarkdown(
                    `‚ö†Ô∏è *–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${user.userId}) –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞!*\n` +
                    `–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n\n` +
                    `${message}`, 
                    { parse_mode: 'Markdown' }
                );
            }
        }
        await ctx.answerCbQuery();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ!');
        }
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
 * –í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.stats = async (ctx) => {
    // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ checkAdmin –∏–∑ –∏–º–ø–æ—Ä—Ç–∞
    if (!checkAdmin(ctx)) { 
        if (ctx.callbackQuery) {
            return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
        }
        return;
    }

    try {
        const totalUsers = await User.countDocuments();
        const activeUsers = await User.countDocuments({ status: 'active' });
        const pendingPayments = await User.countDocuments({ status: 'pending' });
        const pendingQuestions = await Question.countDocuments({ status: 'pending' });
        const last7DaysUsers = await User.countDocuments({
            createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
        });

        const latestSubscription = await User.findOne({ status: 'active', expireDate: { $exists: true } })
                                                 .sort({ expireDate: -1 })
                                                 .limit(1);

        let latestExpireDate = 'N/A';
        if (latestSubscription && latestSubscription.expireDate) {
            latestExpireDate = formatDate(latestSubscription.expireDate, true);
        }

        let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞*\n\n` +
                      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${totalUsers}*\n` +
                      `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: *${activeUsers}*\n` +
                      `‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: *${pendingPayments}*\n` +
                      `‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: *${pendingQuestions}*\n` +
                      `üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (7 –¥–Ω–µ–π): *${last7DaysUsers}*\n` +
                      `üóì –°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: *${latestExpireDate}*\n` +
                      `_–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}_`; 

        await ctx.replyWithMarkdown(message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }]
                ]
            }
        });
        
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        if (ctx.callbackQuery) {
             await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
             await ctx.answerCbQuery('–û—à–∏–±–∫–∞!');
        } else {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
    }
};

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.checkAdminMenu = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
    }

    try {
        await ctx.reply('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', Markup.inlineKeyboard([
            [Markup.button.callback('üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏', 'check_payments_admin')],
            [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats_admin')],
            [Markup.button.callback('‚ùì –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', 'list_questions')]
        ]));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
    }
};