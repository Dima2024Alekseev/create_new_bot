require('dotenv').config({ path: __dirname + '/../primer.env' });
const { Telegraf, session } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const connectDB = require('./config/db');
const { handleStart, checkSubscriptionStatus, extendSubscription, promptForQuestion, requestVpnInfo } = require('./controllers/userController'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
const { handlePhoto, handleApprove, handleReject } = require('./controllers/paymentController');
const { checkPayments, stats, switchMode } = require('./controllers/adminController');
const { handleQuestion, handleAnswer, listQuestions } = require('./controllers/questionController');
const { setupReminders } = require('./services/reminderService');
const { checkAdmin } = require('./controllers/adminController'); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ checkAdmin –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { 
    agent: null,
    handshakeTimeout: 30000
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑ –ø–µ—Ä–≤—ã—Ö)
bot.use((new LocalSession({ database: 'session_db.json' })).middleware());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
connectDB().catch(err => {
  console.error('‚ùå MongoDB connection failed:', err);
  process.exit(1);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (err) => {
  console.error('‚ö†Ô∏è Unhandled Rejection:', err);
});
process.on('uncaughtException', async (err) => {
  console.error('‚ö†Ô∏è Uncaught Exception:', err);
  await bot.stop();
  process.exit(1);
});

// ===== Middleware –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ê–î–ú–ò–ù–ê –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π =====
bot.use(async (ctx, next) => {
  if (ctx.from?.id === parseInt(process.env.ADMIN_ID)) {
    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if (ctx.session?.awaitingAnswerFor && ctx.message?.text) {
      console.log(`[AdminMiddleware] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.session.awaitingAnswerFor}`);
      await handleAnswer(ctx, ctx.session.awaitingAnswerFor, ctx.message.text);
      ctx.session.awaitingAnswerFor = null;
      return;
    }
    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞/–≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if (ctx.session?.awaitingVpnInfoFor && (ctx.message?.document || ctx.message?.video)) {
      const targetUserId = ctx.session.awaitingVpnInfoFor;
      try {
        if (ctx.message.document) {
          await ctx.telegram.sendDocument(targetUserId, ctx.message.document.file_id, {
            caption: 'üìÅ –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN:'
          });
          await ctx.reply(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
        } else if (ctx.message.video) {
          await ctx.telegram.sendVideo(targetUserId, ctx.message.video.file_id, {
            caption: 'üé¨ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:'
          });
          await ctx.reply(`‚úÖ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}:`, error);
        await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
      } finally {
        ctx.session.awaitingVpnInfoFor = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
      return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
  }
  return next();
});

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =====
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
bot.start(handleStart);
bot.hears(/^[^\/].*/, handleQuestion);

// –ê–¥–º–∏–Ω—Å–∫–∏–µ
bot.command('check', checkPayments);
bot.command('stats', stats);
bot.command('questions', listQuestions);
bot.command('switchmode', switchMode);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
bot.on('photo', handlePhoto);

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (callback_data) =====
// –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
bot.action(/approve_(\d+)/, handleApprove);
bot.action(/reject_(\d+)/, handleReject);
bot.action('list_questions', listQuestions);
bot.action('switch_mode', switchMode);
bot.action('check_payments_admin', checkPayments);
bot.action('show_stats_admin', stats);

bot.action(/answer_(\d+)/, async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  ctx.session.awaitingAnswerFor = ctx.match[1];
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  await ctx.answerCbQuery();
});

// –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–û–¢–ü–†–ê–í–ò–¢–¨ –ò–ù–°–¢–†–£–ö–¶–ò–Æ" –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.action(/send_instruction_to_(\d+)/, async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  const targetUserId = ctx.match[1];
  ctx.session.awaitingVpnInfoFor = targetUserId; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –∫–æ–º—É –∞–¥–º–∏–Ω —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
  await ctx.reply(`–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, .ovpn) –∏–ª–∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}:`);
  await ctx.answerCbQuery();
});

// –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('check_subscription', checkSubscriptionStatus);
bot.action('ask_question', promptForQuestion);
bot.action('extend_subscription', extendSubscription);
// –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–ü–û–õ–£–ß–ò–¢–¨ –§–ê–ô–õ –ò –ò–ù–°–¢–†–£–ö–¶–ò–Æ" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action(/send_vpn_info_(\d+)/, requestVpnInfo);


// ===== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====
setupReminders(bot);

// ===== –ó–∞–ø—É—Å–∫ =====
bot.launch()
  .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Q&A + Payments)'))
  .catch(err => {
    console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  });

// Graceful shutdown
['SIGINT', 'SIGTERM'].forEach(signal => {
  process.once(signal, async () => {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
    try {
      await bot.stop();
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
      process.exit(1);
    }
  });
});