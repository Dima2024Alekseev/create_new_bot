const User = require('../models/User');
const Question = require('../models/Question');
const { Markup } = require('telegraf');
const { formatDate, formatDuration, paymentDetails } = require('../utils/helpers');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.handleStart = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;

    try {
        const user = await User.findOneAndUpdate(
            { userId },
            {
                userId,
                firstName: first_name,
                username,
                lastSeen: new Date()
            },
            { upsert: true, new: true, setDefaultsOnInsert: true }
        );

        let statusText = '';
        let keyboardButtons = [];

        if (user.status === 'active') {
            const timeLeft = user.expireDate - new Date();
            const daysLeft = Math.ceil(timeLeft / (1000 * 60 * 60 * 24));
            statusText = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!* –î–æ—Å—Ç—É–ø–Ω–æ –µ—â—ë *${daysLeft}* –¥–Ω–µ–π.\n`;

            if (daysLeft < 7) {
                statusText += `\n‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n`;
                keyboardButtons.push([{ text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]);
            }
            keyboardButtons.push(
                [{ text: 'üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }]
            );

        } else if (user.status === 'inactive') {
            statusText = '‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.*\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.';
            keyboardButtons.push(
                [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]
            );

        } else if (user.status === 'pending') {
            statusText = '‚è≥ *–í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –µ–≥–æ.';
            keyboardButtons.push([{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }]);

        } else if (user.status === 'rejected') {
            statusText = '‚ùå *–í–∞—à –ø–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—â—ë —Ä–∞–∑, —É–±–µ–¥–∏–≤—à–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.';
            keyboardButtons.push(
                [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]
            );
        }

        keyboardButtons.push([{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }]);

        await ctx.reply(
            `üëã –ü—Ä–∏–≤–µ—Ç, *${user.firstName}!* –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN.\n\n` + statusText,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: keyboardButtons
                }
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.checkSubscriptionStatus = async (ctx) => {
    const userId = ctx.from.id;
    try {
        const user = await User.findOne({ userId });
        await ctx.answerCbQuery();

        if (!user || user.status !== 'active') {
            return ctx.reply('‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.');
        }

        const now = new Date();
        const timeLeft = user.expireDate - now;

        if (timeLeft > 0) {
            await ctx.reply(
                `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!*` +
                `\n\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *${formatDate(user.expireDate, true)}*` +
                `\n–û—Å—Ç–∞–ª–æ—Å—å: *${formatDuration(timeLeft)}*`,
                { parse_mode: 'Markdown' }
            );
        } else {
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º, –Ω–æ —Å—Ç–∞—Ç—É—Å 'active', –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            user.status = 'inactive';
            await user.save();
            await ctx.reply('‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ checkSubscriptionStatus:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.');
    }
};

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.extendSubscription = async (ctx) => {
    const userId = ctx.from.id;
    const { first_name, username } = ctx.from;
    const name = first_name || username;

    try {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
        await ctx.answerCbQuery();
        await ctx.reply(
            `*–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${process.env.VPN_PRICE} —Ä—É–±. –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ:*\n\n` +
            paymentDetails(userId, name) +
            `\n\n*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.*`,
            {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ extendSubscription:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.');
    }
};

/**
 * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.promptForQuestion = async (ctx) => {
    try {
        await ctx.answerCbQuery('‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.');
        await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ promptForQuestion:', error);
    }
};

// –§—É–Ω–∫—Ü–∏—è requestVpnInfo –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ paymentController.js
// –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏ "–£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª".
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.handleVpnConfigured = async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    try {
        const user = await User.findOneAndUpdate({ userId }, { vpnConfigured: true }, { new: true });
        
        // –ù–û–í–û–ï: –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        let userName = user?.firstName || user?.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
        if (user?.username) {
            userName = `${userName} (@${user.username})`;
        }
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üéâ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª VPN!* üéâ\n\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (ID: ${userId}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª".`
        );

        await ctx.answerCbQuery('‚úÖ –û—Ç–ª–∏—á–Ω–æ!');
        await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! VPN —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!');
        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        await ctx.deleteMessage().catch(e => console.error("Could not delete message:", e));
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ vpn_configured –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π".
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.promptVpnFailure = async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    try {
        await ctx.answerCbQuery('‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.');
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —Å —á–µ–º –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN. –Ø –ø–µ—Ä–µ—à–ª—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é, —á—Ç–æ –∂–¥–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ctx.session.awaitingVpnTroubleshoot = userId;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ vpn_failed –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.promptCancelSubscription = async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n\n' +
        '–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN. ' +
        '–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –µ—ë –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞?',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', 'cancel_subscription_final'),
                Markup.button.callback('‚úÖ –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', 'cancel_subscription_abort')
            ]
        ])
    );
};

/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.cancelSubscriptionFinal = async (ctx) => {
    const userId = ctx.from.id;
    await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    await User.findOneAndUpdate({ userId }, { status: 'inactive' });
    await ctx.reply('–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ VPN –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.');
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ VPN-—Å–µ—Ä–≤–µ—Ä–µ
};

/**
 * –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 */
exports.cancelSubscriptionAbort = async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π.');
};