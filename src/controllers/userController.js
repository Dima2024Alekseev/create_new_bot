const User = require('../models/User');
const { paymentDetails, formatDate, formatDuration } = require('../utils/helpers');
const { checkAdmin } = require('./adminController');
const { Markup } = require('telegraf');

exports.handleStart = async (ctx) => {
  const { id, first_name, username } = ctx.from;
  
  // === –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ê ===
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å INLINE-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  if (id === parseInt(process.env.ADMIN_ID) && checkAdmin(ctx)) {
    return ctx.replyWithMarkdown(
      'üëã *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n',
      {
        reply_markup: { // –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardMarkup
          inline_keyboard: [
            [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏', callback_data: 'check_payments_admin' }],
            [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats_admin' }],
            [{ text: '–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'list_questions' }]
          ]
        }
      }
    );
  }

  // === –õ–û–ì–ò–ö–ê –î–õ–Ø –û–ë–´–ß–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
  const user = await User.findOne({ userId: id });

  let message = '';
  let keyboardButtons = [];

  const hasActiveOrPendingSubscription = user?.status === 'active' || user?.status === 'pending';

  if (user?.status === 'active' && user.expireDate) {
    const timeLeft = user.expireDate.getTime() - new Date().getTime();
    
    message = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(user.expireDate, true)}*`;
    if (timeLeft > 0) {
        message += `\n–û—Å—Ç–∞–ª–æ—Å—å: ${formatDuration(timeLeft)}.`;
    } else {
        message += `\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫.`;
    }
    
    keyboardButtons.push([{ text: 'üóì –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ò–õ–ò –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    // –∏ –µ—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º)
    if ((!user.subscriptionCount || user.subscriptionCount === 1) && !user.vpnConfigured) {
      keyboardButtons.push([{ text: 'üìÅ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', callback_data: `send_vpn_info_${id}` }]);
    }
    
    // --- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
    keyboardButtons.push([{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'cancel_subscription_confirm' }]); 
    // ----------------------------------------------

  } else {
    message = `üîê *VPN –ø–æ–¥–ø–∏—Å–∫–∞: ${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
              `${paymentDetails(id, first_name)}\n\n` +
              '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_';
  }
  
  if (hasActiveOrPendingSubscription) {
    keyboardButtons.push(
      [{ text: 'üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }]
    );
  }

  keyboardButtons.push(
    [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }]
  );

  // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å InlineKeyboard
  ctx.replyWithMarkdown(
    message,
    { 
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: keyboardButtons
      }
    }
  );
};

exports.checkSubscriptionStatus = async (ctx) => {
  const { id, first_name } = ctx.from;
  const user = await User.findOne({ userId: id });

  if (!user || (user.status !== 'active' && user.status !== 'pending')) {
    await ctx.replyWithMarkdown(
      `–í—ã –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. VPN –ø–æ–¥–ø–∏—Å–∫–∞: *${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
      `${paymentDetails(id, first_name)}\n\n` +
      '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
      { disable_web_page_preview: true }
    );
    return ctx.answerCbQuery();
  }

  if (user?.status === 'active' && user.expireDate) {
    const timeLeft = user.expireDate.getTime() - new Date().getTime();
    
    let message = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(user.expireDate, true)}*`;
    if (timeLeft > 0) {
      message += `\n–û—Å—Ç–∞–ª–æ—Å—å: ${formatDuration(timeLeft)}.`;
    } else {
      message += `\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫.`;
    }
    
    await ctx.replyWithMarkdown(message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üóì –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }],
                [{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'cancel_subscription_confirm' }] // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–¥–µ—Å—å
            ]
        }
    });
  } else if (user?.status === 'pending') {
    await ctx.reply('‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
  } else if (user?.status === 'rejected') {
    await ctx.reply('‚ùå –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.');
  } else {
    // –≠—Ç–∞ –≤–µ—Ç–∫–∞, –ø–æ –∏–¥–µ–µ, –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—é –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.
    await ctx.replyWithMarkdown(
      `–í—ã –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. VPN –ø–æ–¥–ø–∏—Å–∫–∞: *${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
      `${paymentDetails(id, first_name)}\n\n` +
      '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
      { disable_web_page_preview: true }
    );
  }
  await ctx.answerCbQuery();
};

exports.extendSubscription = async (ctx) => {
  const { id, first_name } = ctx.from;
  await ctx.replyWithMarkdown(
    `–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n\n` +
    `üîê *VPN –ø–æ–¥–ø–∏—Å–∫–∞: ${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
    `${paymentDetails(id, first_name)}\n\n` +
    '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
    { disable_web_page_preview: true }
  );
  await ctx.answerCbQuery();
};

exports.promptForQuestion = async (ctx) => {
  await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  await ctx.answerCbQuery();
};

exports.requestVpnInfo = async (ctx) => {
  const userId = parseInt(ctx.match[1]);
  const user = await User.findOne({ userId });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É
  // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (—Ö–æ—Ç—è —Ñ–ª–∞–≥ vpnConfigured –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω)
  if (!user || user.status !== 'active' || user.vpnConfigured) {
    await ctx.reply('‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏ –µ—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.');
    return ctx.answerCbQuery();
  }

  await ctx.telegram.sendMessage(
    process.env.ADMIN_ID,
    `üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${userId}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', `send_instruction_to_${userId}`)]
    ])
  );

  await ctx.reply('‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω –≤—ã—à–ª–µ—Ç –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
  await ctx.answerCbQuery();
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª"
exports.handleVpnConfigured = async (ctx) => {
  const userId = parseInt(ctx.match[1]);
  const user = await User.findOne({ userId });

  if (!user) {
    return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
  if (user.vpnConfigured) {
    return ctx.answerCbQuery('–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–Ω–µ–µ.');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await User.findOneAndUpdate(
    { userId },
    { vpnConfigured: true },
    { new: true }
  );

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  await ctx.telegram.sendMessage(
    process.env.ADMIN_ID,
    `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${userId}) —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª VPN!`
  );

  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN.');
  await ctx.answerCbQuery('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!');
};

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN
exports.promptVpnFailure = async (ctx) => {
  const userId = parseInt(ctx.match[1]); 

  if (ctx.from.id !== userId) {
    return ctx.answerCbQuery('–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞.');
  }

  ctx.session.awaitingVpnTroubleshoot = userId;

  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN, –∏–ª–∏ –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞.');
  await ctx.answerCbQuery();
};

// --- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ ---
exports.promptCancelSubscription = async (ctx) => {
    const userId = ctx.from.id;
    const user = await User.findOne({ userId });

    if (!user || user.status !== 'active') {
        await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
        return ctx.answerCbQuery();
    }

    await ctx.reply(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? –û–Ω–∞ –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –∏ –¥–æ—Å—Ç—É–ø –∫ VPN –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.\n\n' +
        '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ' + formatDate(user.expireDate, true) + '.',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', 'cancel_subscription_final'),
                Markup.button.callback('‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', 'cancel_subscription_abort')
            ]
        ])
    );
    await ctx.answerCbQuery();
};

exports.cancelSubscriptionFinal = async (ctx) => {
    const userId = ctx.from.id;
    const user = await User.findOne({ userId });

    if (!user || user.status !== 'active') {
        await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
        return ctx.answerCbQuery();
    }

    try {
        await User.findOneAndUpdate(
            { userId },
            { 
                status: 'inactive', 
                expireDate: new Date(), 
                vpnConfigured: false 
            }
        );

        await ctx.reply('‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ VPN –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.');

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–º–µ–Ω–µ
        let userName = user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
        if (user.username) {
            userName = `${userName} (@${user.username})`;
        }
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (ID: ${userId}) –æ—Ç–º–µ–Ω–∏–ª —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É.`
        );

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    }
    await ctx.answerCbQuery();
};

exports.cancelSubscriptionAbort = async (ctx) => {
    await ctx.reply('–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.');
    await ctx.answerCbQuery();
};