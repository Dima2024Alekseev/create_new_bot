const User = require('../models/User');
const PaymentService = require('../services/paymentService');
const fs = require('fs');
const path = require('path');
const { formatDate } = require('../utils/helpers');

module.exports = {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  handlePhoto: async (ctx) => {
    const { id, first_name, username } = ctx.from;
    
    if (id === parseInt(process.env.ADMIN_ID)) {
      return ctx.reply('–í—ã –∞–¥–º–∏–Ω, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
    }

    const photo = ctx.message.photo.pop();
    
    try {
      await User.findOneAndUpdate(
        { userId: id },
        {
          userId: id,
          username: username || first_name,
          firstName: first_name,
          paymentPhotoId: photo.file_id,
          status: 'pending'
        },
        { upsert: true, new: true }
      );

      await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      await ctx.telegram.sendPhoto(
        process.env.ADMIN_ID,
        photo.file_id,
        {
          caption: `üì∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç ${first_name} (@${username || '–Ω–µ—Ç'})\nID: ${id}`,
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `approve_${id}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${id}` }
              ]
            ]
          }
        }
      );
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', err);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    }
  },

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º
   */
  const handleApprove = async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    const expireDate = new Date();
    expireDate.setDate(expireDate.getDate() + parseInt(process.env.VPN_DURATION));
  
    try {
      const user = await User.findOne({ userId });
  
      if (!user) {
        await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
  
      let configMessage = '';
      
      try {
        if (!user.configGenerated) {
          const vpnCredentials = await PaymentService.generateVpnCredentials(user);
          
          await ctx.telegram.sendDocument(
            userId,
            { source: fs.createReadStream(vpnCredentials.configPath) },
            {
              caption: `üîê –í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard\n\n` +
                       `–õ–æ–≥–∏–Ω: ${vpnCredentials.username}\n` +
                       `–ü–∞—Ä–æ–ª—å: ${vpnCredentials.password}\n\n` +
                       `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ ${expireDate.toLocaleDateString('ru-RU')}`
            }
          );
  
          fs.unlinkSync(vpnCredentials.configPath);
  
          configMessage = '\n\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞';
          
          await User.updateOne({ userId }, {
            configGenerated: true,
            wgUsername: vpnCredentials.username,
            wgConfigSent: true
          });
        }
  
        await User.updateOne({ userId }, {
          status: 'active',
          expireDate
        });
  
        await ctx.telegram.sendMessage(
          userId,
          `üéâ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n` +
          `–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${expireDate.toLocaleDateString('ru-RU')}`
        );
  
        await ctx.answerCbQuery(`‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç${configMessage}`);
      } catch (err) {
        console.error('Error in approval process:', err);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞');
        await ctx.telegram.sendMessage(
          process.env.ADMIN_ID,
          `üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ ${userId}\n` +
          `–û—à–∏–±–∫–∞: ${err.message}`
        );
      } finally {
        await ctx.deleteMessage();
      }
    } catch (err) {
      console.error('Approve payment error:', err);
      await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏');
    }
  },

  /**
   * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º
   */
  handleReject: async (ctx) => {
    const userId = parseInt(ctx.match[1]);

    try {
      const user = await User.findOne({ userId });
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WG-Easy –µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω
      if (user?.wgUsername) {
        await PaymentService.removeUserFromWg(user.wgUsername);
      }

      await User.updateOne(
        { userId },
        { status: 'rejected' }
      );

      await ctx.telegram.sendMessage(
        userId,
        '‚ùå –í–∞—à –ø–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω\n\n' +
        '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
        '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
        '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n' +
        '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑.'
      );

      await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
      await ctx.deleteMessage();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', err);
      await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏');
    }
  },

  /**
   * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
   */
  handleGetConfig: async (ctx) => {
    const userId = ctx.from.id;
    
    try {
      const user = await User.findOne({ 
        userId, 
        status: 'active',
        configGenerated: true
      });
      
      if (!user) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π VPN –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
      if (user.expireDate < new Date()) {
        return ctx.reply('‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WG-Easy
      const userExists = await PaymentService.checkUserInWg(user.wgUsername);
      if (!userExists) {
        await ctx.reply('‚ö†Ô∏è –í–∞—à –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.');
        
        await ctx.telegram.sendMessage(
          process.env.ADMIN_ID,
          `üö® –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è @${ctx.from.username || 'no_username'} (${userId})\n` +
          `WG username: ${user.wgUsername}\n` +
          `–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!`
        );
        return;
      }

      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
      const configPath = await PaymentService.downloadConfig(user.wgUsername);
      
      await ctx.replyWithDocument(
        { source: fs.createReadStream(configPath) },
        {
          caption: `üîê –í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard\n\n` +
                   `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ ${formatDate(user.expireDate)}\n` +
                   `–≠—Ç–æ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–ª–∏ —Ä–∞–Ω–µ–µ.`
        }
      );

      fs.unlinkSync(configPath);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /getconfig:', err);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
};