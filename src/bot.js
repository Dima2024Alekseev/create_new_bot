require('dotenv').config({ path: __dirname + '/../primer.env' });
const { Telegraf, session } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const connectDB = require('./config/db');
const { handleStart, checkSubscriptionStatus, extendSubscription, promptForQuestion, requestVpnInfo, handleVpnConfigured } = require('./controllers/userController');
const { handlePhoto, handleApprove, handleReject } = require('./controllers/paymentController');
const { checkPayments, stats } = require('./controllers/adminController'); // –£–±—Ä–∞–ª–∏ switchMode
const { handleQuestion, handleAnswer, listQuestions } = require('./controllers/questionController');
const { setupReminders } = require('./services/reminderService');
const { checkAdmin } = require('./controllers/adminController');
const { Markup } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { 
    agent: null,
    handshakeTimeout: 30000
  }
});

bot.use((new LocalSession({ database: 'session_db.json' })).middleware());

connectDB().catch(err => {
  console.error('‚ùå MongoDB connection failed:', err);
  process.exit(1);
});

process.on('unhandledRejection', (err) => {
  console.error('‚ö†Ô∏è Unhandled Rejection:', err);
});
process.on('uncaughtException', async (err) => {
  console.error('‚ö†Ô∏è Uncaught Exception:', err);
  await bot.stop();
  process.exit(1);
});

// ===== Middleware –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ê–î–ú–ò–ù–ê –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π =====
bot.use(async (ctx, next) => {
  console.log(`[Middleware Debug] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ${ctx.from?.id}`);
  console.log(`[Middleware Debug] awaitinAnswerFor: ${ctx.session?.awaitingAnswerFor}`);
  console.log(`[Middleware Debug] awaitingVpnFileFor: ${ctx.session?.awaitingVpnFileFor}`);
  console.log(`[Middleware Debug] awaitingVpnVideoFor: ${ctx.session?.awaitingVpnVideoFor}`);
  console.log(`[Middleware Debug] –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${Object.keys(ctx.message || {})}`);

  if (ctx.from?.id === parseInt(process.env.ADMIN_ID)) {
    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if (ctx.session?.awaitingAnswerFor && ctx.message?.text) {
      console.log(`[AdminMiddleware] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.session.awaitingAnswerFor}`);
      await handleAnswer(ctx, ctx.session.awaitingAnswerFor, ctx.message.text);
      ctx.session.awaitingAnswerFor = null;
      return;
    }

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –§–ê–ô–õ–ê –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
    if (ctx.session?.awaitingVpnFileFor && ctx.message?.document) {
      const targetUserId = ctx.session.awaitingVpnFileFor;
      try {
        console.log(`[AdminMiddleware] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
        await ctx.telegram.sendDocument(targetUserId, ctx.message.document.file_id, {
          caption: 'üìÅ –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN:'
        });
        await ctx.reply(`‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
        
        ctx.session.awaitingVpnFileFor = null;
        ctx.session.awaitingVpnVideoFor = targetUserId;
        await ctx.reply('–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        return;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}:`, error);
        await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
        ctx.session.awaitingVpnFileFor = null;
        ctx.session.awaitingVpnVideoFor = null;
        return;
      }
    }

    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –í–ò–î–ï–û –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
    if (ctx.session?.awaitingVpnVideoFor && ctx.message?.video) {
      const targetUserId = ctx.session.awaitingVpnVideoFor;
      try {
        console.log(`[AdminMiddleware] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}`);
        await ctx.telegram.sendVideo(targetUserId, ctx.message.video.file_id, {
          caption: 'üé¨ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:'
        });
        await ctx.reply(`‚úÖ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);

        await ctx.telegram.sendMessage(
            targetUserId,
            '–ï—Å–ª–∏ –≤—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
            Markup.inlineKeyboard([
                Markup.button.callback('‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª', `vpn_configured_${targetUserId}`)
            ])
        );

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}:`, error);
        await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`);
      } finally {
        ctx.session.awaitingVpnVideoFor = null;
      }
      return;
    }
    
    if (ctx.message) {
        console.log(`[AdminMiddleware] –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è: ${JSON.stringify(ctx.message)}`);
    }
  }
  return next();
});

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =====
bot.start(handleStart);
bot.hears(/^[^\/].*/, handleQuestion); 

// –ê–¥–º–∏–Ω—Å–∫–∏–µ
bot.command('check', checkPayments);
bot.command('stats', stats);
bot.command('questions', listQuestions);
// bot.command('switchmode', switchMode); // –£–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
bot.on('photo', handlePhoto);

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (callback_data) =====
// –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
bot.action(/approve_(\d+)/, handleApprove);
bot.action(/reject_(\d+)/, handleReject);
bot.action('list_questions', listQuestions);
// bot.action('switch_mode', switchMode); // –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
bot.action('check_payments_admin', checkPayments);
bot.action('show_stats_admin', stats);

bot.action(/answer_(\d+)/, async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  ctx.session.awaitingAnswerFor = ctx.match[1];
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  await ctx.answerCbQuery();
});

bot.action(/send_instruction_to_(\d+)/, async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  const targetUserId = ctx.match[1];
  ctx.session.awaitingVpnFileFor = targetUserId;
  ctx.session.awaitingVpnVideoFor = null;
  await ctx.reply(`–ó–∞–≥—Ä—É–∑–∏—Ç–µ *—Ñ–∞–π–ª* –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .ovpn) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}:`);
  await ctx.answerCbQuery();
});

// –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('check_subscription', checkSubscriptionStatus);
bot.action('ask_question', promptForQuestion);
bot.action('extend_subscription', extendSubscription);
bot.action(/send_vpn_info_(\d+)/, requestVpnInfo);
bot.action(/vpn_configured_(\d+)/, handleVpnConfigured);


// ===== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====
setupReminders(bot);

// ===== –ó–∞–ø—É—Å–∫ =====
bot.launch()
  .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Q&A + Payments)'))
  .catch(err => {
    console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  });

// Graceful shutdown
['SIGINT', 'SIGTERM'].forEach(signal => {
  process.once(signal, async () => {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
    try {
      await bot.stop();
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
      process.exit(1);
    }
  });
});