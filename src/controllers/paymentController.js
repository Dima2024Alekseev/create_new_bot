const User = require('../models/User');
const { Markup } = require('telegraf');
const { checkAdmin } = require('../utils/auth');
const { formatDate, escapeMarkdown, transliterate } = require('../utils/helpers');
const { createVpnClient } = require('../services/vpnService');
const path = require('path');

exports.handlePhoto = async (ctx) => {
    const { id, first_name, username } = ctx.from;
    if (id === parseInt(process.env.ADMIN_ID)) {
        return ctx.reply('–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.');
    }

    const photo = ctx.message.photo.pop();
    try {
        await User.findOneAndUpdate(
            { userId: id },
            {
                userId: id,
                username: username || first_name,
                firstName: first_name,
                paymentPhotoId: photo.file_id,
                paymentPhotoDate: new Date(),
                status: 'pending'
            },
            { upsert: true, new: true }
        );

        const keyboard = Markup.inlineKeyboard([
            Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${id}`),
            Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)
        ]);

        let userDisplay = '';
        const safeFirstName = escapeMarkdown(first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
        if (username) {
            userDisplay = `${safeFirstName} (@${escapeMarkdown(username)})`;
        } else {
            userDisplay = `${safeFirstName} (–±–µ–∑ username)`;
        }

        await ctx.telegram.sendPhoto(
            process.env.ADMIN_ID,
            photo.file_id,
            {
                caption: `üì∏ *–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n–ò–º—è: ${userDisplay}\nID: ${id}`,
                parse_mode: 'Markdown',
                ...keyboard
            }
        );
        await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ/–ø–ª–∞—Ç–µ–∂–∞:', error);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

exports.handleApprove = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }

    const userId = parseInt(ctx.match[1]);
    try {
        const user = await User.findOne({ userId });
        if (!user) {
            return ctx.answerCbQuery('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        const today = new Date();
        let newExpireDate = new Date();

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if (user.status === 'active' && user.expireDate && user.expireDate > today) {
            newExpireDate = new Date(user.expireDate);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º 1 –º–µ—Å—è—Ü (—É—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –≥–æ–¥)
        newExpireDate.setMonth(newExpireDate.getMonth() + 1);
        newExpireDate.setHours(23, 59, 59, 999);

        const updatedUser = await User.findOneAndUpdate(
            { userId },
            {
                status: 'active',
                expireDate: newExpireDate,
                paymentPhotoId: null,
                paymentPhotoDate: null,
                $inc: { subscriptionCount: 1 }
            },
            { new: true }
        );

        await ctx.answerCbQuery('‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç');
        await ctx.deleteMessage();

        if (updatedUser.subscriptionCount === 1) {
            try {
                let clientName = updatedUser.username 
                    ? transliterate(updatedUser.username).replace(/[^a-zA-Z0-9_]/g, '')
                    : `telegram_${userId}`;
                
                if (!clientName) clientName = `telegram_${userId}`;
                
                const configContent = await createVpnClient(clientName);
                
                await ctx.telegram.sendMessage(
                    userId,
                    `üéâ *–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!* üéâ\n\n–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ *${formatDate(newExpireDate, true)}*\n\nüìÅ –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN:`,
                    { parse_mode: 'Markdown' }
                );
                
                await ctx.telegram.sendDocument(
                    userId,
                    { source: Buffer.from(configContent), filename: `${clientName}.conf` }
                );
                
                const videoPath = path.join(__dirname, '../videos/instruction.mp4');
                await ctx.telegram.sendVideo(
                    userId,
                    { source: videoPath },
                    { caption: 'üé¨ *–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è* –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:' }
                );

                let userName = updatedUser.firstName || updatedUser.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
                if (updatedUser.username) {
                    userName = `${userName} (@${updatedUser.username})`;
                }

                await ctx.telegram.sendMessage(
                    process.env.ADMIN_ID,
                    `üéâ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName} (ID: ${userId}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.`
                );

                await ctx.telegram.sendMessage(
                    userId,
                    '–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ:',
                    Markup.inlineKeyboard([
                        [
                            Markup.button.callback('‚úÖ –£—Å–ø–µ—à–Ω–æ', `vpn_configured_${userId}`),
                            Markup.button.callback('‚ùå –ü—Ä–æ–±–ª–µ–º—ã', `vpn_failed_${userId}`)
                        ]
                    ])
                );
            } catch (vpnError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è ${userId}:`, vpnError);
                await ctx.telegram.sendMessage(
                    userId,
                    '‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥–∞*\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
                );
                await ctx.reply(
                    `‚ö†Ô∏è –û—à–∏–±–∫–∞ VPN –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è ${userId}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.`
                );
            }
        } else {
            await ctx.telegram.sendMessage(
                userId,
                `üéâ *–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!*\n\n–î–æ—Å—Ç—É–ø –¥–æ *${formatDate(newExpireDate, true)}*`,
                { parse_mode: 'Markdown' }
            );
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è ${userId}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏!');
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
    }
};

exports.handleReject = async (ctx) => {
    if (!checkAdmin(ctx)) {
        return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
    }

    const userId = parseInt(ctx.match[1]);
    try {
        await User.findOneAndUpdate(
            { userId },
            {
                status: 'rejected',
                paymentPhotoId: null,
                paymentPhotoDate: null
            }
        );

        await ctx.telegram.sendMessage(
            userId,
            '‚ùå *–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω*\n\n–ü—Ä–∏—á–∏–Ω—ã:\n- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –µ—â—ë —Ä–∞–∑.*',
            { parse_mode: 'Markdown' }
        );

        await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
        await ctx.deleteMessage();
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è ${userId}:`, error);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏!');
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
    }
};