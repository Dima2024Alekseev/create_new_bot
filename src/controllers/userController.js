const User = require('../models/User');
const { paymentDetails, formatDate, formatDuration } = require('../utils/helpers');
const { checkAdmin } = require('./adminController');
const { Markup } = require('telegraf');

exports.handleStart = async (ctx) => {
    const { id, first_name } = ctx.from;

    // === –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ê ===
    if (id === parseInt(process.env.ADMIN_ID) && checkAdmin(ctx)) {
        return ctx.replyWithMarkdown(
            'üëã *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n' +
            '–ö–æ–º–∞–Ω–¥—ã:\n' +
            '/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏\n' +
            '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
            '/questions - –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã',
            {
                reply_markup: { // –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardMarkup
                    inline_keyboard: [
                        [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏', callback_data: 'check_payments_admin' }],
                        [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats_admin' }],
                        [{ text: '–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'list_questions' }]
                    ]
                }
            }
        );
    }

    // === –õ–û–ì–ò–ö–ê –î–õ–Ø –û–ë–´–ß–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    const user = await User.findOne({ userId: id });

    let message = '';
    let keyboardButtons = [];

    const hasActiveOrPendingSubscription = user?.status === 'active' || user?.status === 'pending';

    if (user?.status === 'active' && user.expireDate) {
        const timeLeft = user.expireDate.getTime() - new Date().getTime();

        message = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(user.expireDate, true)}*`;
        if (timeLeft > 0) {
            message += `\n–û—Å—Ç–∞–ª–æ—Å—å: ${formatDuration(timeLeft)}.`;
        } else {
            message += `\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫.`;
        }

        keyboardButtons.push([{ text: 'üóì –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_subscription' }]);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        // –ò–õ–ò –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if ((!user.subscriptionCount || user.subscriptionCount === 1) && !user.vpnConfigured) {
            keyboardButtons.push([{ text: 'üìÅ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', callback_data: `send_vpn_info_${id}` }]);
        }
        // –ï—Å–ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∏ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —Ç–æ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∞–π–ª–æ–º –Ω–µ –Ω—É–∂–Ω–æ
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏–ª, –∞ –∫–Ω–æ–ø–∫–∞ "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å" –±—ã–ª–∞, —Ç–æ –µ–µ —Ç–æ–∂–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        // –ï—Å–ª–∏ –ù–ï –Ω–∞—Å—Ç—Ä–æ–∏–ª, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ –∫–Ω–æ–ø–∫–∏ "–£—Å–ø–µ—à–Ω–æ/–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å"
        if (user.subscriptionCount && user.subscriptionCount === 1 && !user.vpnConfigured) {
             keyboardButtons.push(
                [{ text: '‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª', callback_data: `vpn_configured_${id}` }],
                [{ text: '‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', callback_data: `vpn_failed_${id}` }]
            );
        }


    } else {
        message = `üîê *VPN –ø–æ–¥–ø–∏—Å–∫–∞: ${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
            `${paymentDetails(id, first_name)}\n\n` +
            '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_';
    }

    if (hasActiveOrPendingSubscription) {
        keyboardButtons.push(
            [{ text: 'üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }]
        );
    }

    keyboardButtons.push(
        [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }]
    );

    // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å InlineKeyboard
    ctx.replyWithMarkdown(
        message,
        {
            disable_web_page_preview: true,
            reply_markup: {
                inline_keyboard: keyboardButtons
            }
        }
    );
};

exports.checkSubscriptionStatus = async (ctx) => {
    const { id, first_name } = ctx.from;
    const user = await User.findOne({ userId: id });

    if (!user || (user.status !== 'active' && user.status !== 'pending')) {
        await ctx.replyWithMarkdown(
            `–í—ã –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. VPN –ø–æ–¥–ø–∏—Å–∫–∞: *${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
            `${paymentDetails(id, first_name)}\n\n` +
            '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
            { disable_web_page_preview: true }
        );
        return ctx.answerCbQuery();
    }

    if (user?.status === 'active' && user.expireDate) {
        const timeLeft = user.expireDate.getTime() - new Date().getTime();

        let message = `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(user.expireDate, true)}*`;
        if (timeLeft > 0) {
            message += `\n–û—Å—Ç–∞–ª–æ—Å—å: ${formatDuration(timeLeft)}.`;
        } else {
            message += `\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫.`;
        }

        await ctx.replyWithMarkdown(message);
    } else if (user?.status === 'pending') {
        await ctx.reply('‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
    } else if (user?.status === 'rejected') {
        await ctx.reply('‚ùå –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.');
    } else {
        await ctx.replyWithMarkdown(
            `–í—ã –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. VPN –ø–æ–¥–ø–∏—Å–∫–∞: *${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
            `${paymentDetails(id, first_name)}\n\n` +
            '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
            { disable_web_page_preview: true }
        );
    }
    await ctx.answerCbQuery();
};

exports.extendSubscription = async (ctx) => {
    const { id, first_name } = ctx.from;
    await ctx.replyWithMarkdown(
        `–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n\n` +
        `üîê *VPN –ø–æ–¥–ø–∏—Å–∫–∞: ${process.env.VPN_PRICE || 132} —Ä—É–±/–º–µ—Å*\n\n` +
        `${paymentDetails(id, first_name)}\n\n` +
        '_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞_',
        { disable_web_page_preview: true }
    );
    await ctx.answerCbQuery();
};

exports.promptForQuestion = async (ctx) => {
    await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    await ctx.answerCbQuery();
};

exports.requestVpnInfo = async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    const user = await User.findOne({ userId });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–¥–µ—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.from.id !== userId) {
        return ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    // –ò–∑–º–µ–Ω–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ: –¢–µ–ø–µ—Ä—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ vpnConfigured –Ω–µ true
    // –∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ï—Å–ª–∏ —É–∂–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª, —Ç–æ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    if (!user || user.status !== 'active' || user.vpnConfigured || (user.subscriptionCount && user.subscriptionCount > 1)) {
        let replyMessage = '‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.';
        if (!user || user.status !== 'active') {
            replyMessage = '‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.';
        } else if (user.vpnConfigured) {
            replyMessage = '‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É VPN —Ä–∞–Ω–µ–µ.';
        } else if (user.subscriptionCount && user.subscriptionCount > 1) {
             replyMessage = '‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.';
        }
        await ctx.reply(replyMessage);
        return ctx.answerCbQuery();
    }


    await ctx.telegram.sendMessage(
        process.env.ADMIN_ID,
        `üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName || user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${userId}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.`,
        Markup.inlineKeyboard([
            [Markup.button.callback('‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', `send_instruction_to_${userId}`)]
        ])
    );

    await ctx.reply('‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω –≤—ã—à–ª–µ—Ç –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    await ctx.answerCbQuery();
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª"
exports.handleVpnConfigured = async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (ctx.from.id !== userId) {
        return ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ VPN.');
    }

    try {
        const user = await User.findOne({ userId });

        if (!user) {
            return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if (user.vpnConfigured) {
            return ctx.answerCbQuery('–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–Ω–µ–µ.');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedUser = await User.findOneAndUpdate(
            { userId },
            { vpnConfigured: true, vpnConfiguredAt: new Date() }, // –î–æ–±–∞–≤–ª—è–µ–º vpnConfiguredAt
            { new: true }
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await ctx.telegram.sendMessage(
            process.env.ADMIN_ID,
            `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${updatedUser.firstName || updatedUser.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${updatedUser.userId}) *—É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª VPN!*`,
            { parse_mode: 'Markdown' }
        );

        await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –†–∞–¥, —á—Ç–æ –≤–∞–º —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üòä');
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –¥–ª—è ${userId}:`, error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
    } finally {
        await ctx.answerCbQuery('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!');
    }
};

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å"
exports.handleVpnFailed = async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (ctx.from.id !== userId) {
        return ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ VPN.');
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.awaitingVpnIssueFor = ctx.from.id;
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN:');
    await ctx.answerCbQuery();
};

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã
exports.handleUserVpnIssue = async (ctx) => {
    const userId = ctx.from.id;
    const issueDescription = ctx.message.text;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    ctx.session.awaitingVpnIssueFor = null;

    try {
        const user = await User.findOne({ userId });

        if (user) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await ctx.telegram.sendMessage(
                process.env.ADMIN_ID,
                `üö® *–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ${user.firstName || user.username} (ID: ${userId})\n\n` +
                `*–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n\`\`\`\n${issueDescription}\n\`\`\``, // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [Markup.button.callback('‚û°Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', `answer_${userId}`)]
                        ]
                    }
                }
            );
            await ctx.reply('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–º–æ—â–∏.');
        } else {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.');
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–±–ª–µ–º—ã VPN –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
    }
};