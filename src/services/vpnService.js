// src/services/vpnService.js
const axios = require('axios');
const tough = require('tough-cookie');
const { wrapper } = require('axios-cookiejar-support');

// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫—É–∫–∏
const cookieJar = new tough.CookieJar();

// –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios
const api = wrapper(axios.create({
    baseURL: process.env.WG_API_URL,
    jar: cookieJar,
    withCredentials: true,
}));

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ API wg-easy
 */
const login = async () => {
    try {
        await api.post('/api/session', {
            password: process.env.WG_API_PASSWORD
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message);
        throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ WG-Easy API');
    }
};

/**
 * –°–æ–∑–¥–∞–µ—Ç VPN-–∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */
exports.createVpnClient = async (clientName) => {
    try {
        await login();
        
        console.log('‚åõ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', clientName);
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º /api/clients –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        const createResponse = await api.post('/api/clients', {
            name: clientName,
            allowedIPs: '10.8.0.0/24'
        });

        const newClient = createResponse.data.data;
        const clientId = newClient.id;

        if (!clientId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
        }

        console.log('üîë –ü–æ–ª—É—á–µ–Ω–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞:', clientId);

        console.log('‚åõ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è:', clientId);
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const configResponse = await api.get(
            `/api/clients/${clientId}/configuration`,
            { responseType: 'text' }
        );

        if (!configResponse.data.includes('[Interface]')) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }

        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
        return configResponse.data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', {
            message: error.message,
            response: error.response?.data,
            url: error.config?.url
        });
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${error.message}`);
    }
};