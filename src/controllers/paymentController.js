const User = require('../models/User');
const { Markup } = require('telegraf');
const { checkAdmin } = require('./adminController');

exports.handlePhoto = async (ctx) => {
  const { id, first_name, username } = ctx.from;
  
  if (id === parseInt(process.env.ADMIN_ID) && checkAdmin(ctx)) {
    return ctx.reply('–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
  }

  const photo = ctx.message.photo.pop();
  const existingUser = await User.findOne({ userId: id });

  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
  if (existingUser?.status === 'active' && existingUser.expireDate > new Date()) {
    const confirmKeyboard = Markup.inlineKeyboard([
      Markup.button.callback('‚úÖ –î–∞, –ø—Ä–æ–¥–ª–∏—Ç—å', `confirm_extend_${id}`),
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_extend_${id}`)
    ]);
    
    return ctx.reply(
      `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ ${existingUser.expireDate.toLocaleDateString('ru-RU')}\n` +
      '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?',
      confirmKeyboard
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
  await User.findOneAndUpdate(
    { userId: id },
    {
      userId: id,
      username: username || first_name,
      firstName: first_name,
      paymentPhotoId: photo.file_id,
      status: 'pending'
    },
    { upsert: true, new: true }
  );

  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${id}`),
    Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)
  ]);

  await ctx.telegram.sendPhoto(
    process.env.ADMIN_ID,
    photo.file_id,
    {
      caption: `üì∏ ${existingUser?.status === 'active' ? '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏' : '–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂'} –æ—Ç ${first_name} (@${username || '–Ω–µ—Ç'})\nID: ${id}`,
      ...keyboard
    }
  );

  await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
};

exports.handleConfirmExtend = async (ctx) => {
  const userId = parseInt(ctx.match[1]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
  if (!ctx.message?.photo) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è');
  }

  const photo = ctx.message.photo.pop();
  await User.findOneAndUpdate(
    { userId },
    {
      paymentPhotoId: photo.file_id,
      status: 'pending'
    }
  );

  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${userId}`),
    Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${userId}`)
  ]);

  await ctx.telegram.sendPhoto(
    process.env.ADMIN_ID,
    photo.file_id,
    {
      caption: `üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç ID: ${userId}`,
      ...keyboard
    }
  );

  await ctx.reply('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  await ctx.deleteMessage();
};

exports.handleCancelExtend = async (ctx) => {
  await ctx.answerCbQuery('‚ùå –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  await ctx.deleteMessage();
};

exports.handleApprove = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const userId = parseInt(ctx.match[1]);
  const user = await User.findOne({ userId });
  let expireDate = new Date();

  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
  if (user.status === 'active' && user.expireDate > new Date()) {
    expireDate = new Date(user.expireDate);
  }
  expireDate.setMonth(expireDate.getMonth() + 1);
  expireDate.setHours(23, 59, 59, 999);

  await User.findOneAndUpdate(
    { userId },
    { 
      status: 'active',
      expireDate 
    }
  );

  const formatDate = (date) => {
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  await ctx.telegram.sendMessage(
    userId,
    `üéâ ${user.status === 'active' ? '–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞' : '–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω'}!\n\n` +
    `–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${formatDate(expireDate)}\n\n` +
    `–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${user.status === 'active' ? '–æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏' : '—É–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ'}:\n` +
    (user.status !== 'active' ? 
      `–°–µ—Ä–≤–µ—Ä: vpn.example.com\n` +
      `–õ–æ–≥–∏–Ω: –≤–∞—à_–ª–æ–≥–∏–Ω\n` +
      `–ü–∞—Ä–æ–ª—å: ${Math.random().toString(36).slice(-8)}` : '')
  );

  await ctx.answerCbQuery(`‚úÖ ${user.status === 'active' ? '–ü—Ä–æ–¥–ª–µ–Ω–æ' : '–ü—Ä–∏–Ω—è—Ç–æ'}`);
  await ctx.deleteMessage();
};

exports.handleReject = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const userId = parseInt(ctx.match[1]);

  await User.findOneAndUpdate(
    { userId },
    { status: 'rejected' }
  );

  await ctx.telegram.sendMessage(
    userId,
    '‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω\n\n' +
    '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
    '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
    '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n' +
    '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑.'
  );

  await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
  await ctx.deleteMessage();
};