const axios = require('axios');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
  BASE_URL: 'http://37.233.85.212:51821',
  PASSWORD: process.env.WG_API_PASSWORD,
  // –í–Ω–æ—Å–∏–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  SERVER_PUBLIC_KEY: '+VmjO9mBKNMW7G7sdn6Haqxzx2YXgi592/LfepbRLDU=', 
  TIMEOUT: 15000
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è
let sessionCookie = null;

const api = axios.create({
  baseURL: API_CONFIG.BASE_URL,
  timeout: API_CONFIG.TIMEOUT,
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∫
api.interceptors.request.use(config => {
  if (sessionCookie) {
    config.headers.Cookie = sessionCookie;
  }
  return config;
});

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—É –∫–ª—é—á–µ–π WireGuard (–ø—É–±–ª–∏—á–Ω—ã–π –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π) –ª–æ–∫–∞–ª—å–Ω–æ.
 * @returns {object} –û–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: { privateKey, publicKey }
 */
function generateKeys() {
  try {
    const privateKey = execSync('wg genkey').toString().trim();
    const publicKey = execSync(`echo "${privateKey}" | wg pubkey`).toString().trim();
    return { privateKey, publicKey };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:', error.message);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ WireGuard. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ `wireguard-tools` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  }
}

/**
 * –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ API.
 */
async function login() {
  try {
    const response = await api.post('/api/session', {
      password: API_CONFIG.PASSWORD
    });

    sessionCookie = response.headers['set-cookie']?.toString();
    if (!sessionCookie) {
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      status: error.response?.status,
      data: error.response?.data
    });
    throw new Error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É—è –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á.
 * @param {string} clientName –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞.
 * @param {string} publicKey –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns {Promise<object>} –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.
 */
async function createClient(clientName, publicKey) {
  try {
    const response = await api.post('/api/wireguard/client', {
      name: clientName,
      publicKey: publicKey,
      allowedIPs: '10.8.0.0/24'
    });
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.`);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', {
      status: error.response?.status,
      data: error.response?.data
    });
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ API.
 * @param {string} clientName –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns {Promise<object>} –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.
 */
async function getClientData(clientName) {
  try {
    const response = await api.get('/api/wireguard/client');
    const client = response.data.find(c => c.name === clientName);
    if (!client) {
      throw new Error(`–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º "${clientName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
    return client;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
 * @param {string} privateKey –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞.
 * @param {object} clientData –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ API.
 * @returns {string} –°—Ç—Ä–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
 */
function generateConfig(privateKey, clientData) {
  if (!privateKey || !clientData.address || !API_CONFIG.SERVER_PUBLIC_KEY) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
  }

  return `[Interface]
PrivateKey = ${privateKey}
Address = ${clientData.address}/32
DNS = 1.1.1.1

[Peer]
PublicKey = ${API_CONFIG.SERVER_PUBLIC_KEY}
Endpoint = ${API_CONFIG.BASE_URL.replace('http://', '').replace(':51821', '')}:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25`;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN-–∫–ª–∏–µ–Ω—Ç–∞.
 * @param {string} clientName –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns {Promise<string>} –°—Ç—Ä–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
 */
exports.createVpnClient = async (clientName) => {
  try {
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–ª—é—á–µ–π –ª–æ–∫–∞–ª—å–Ω–æ
    const { privateKey, publicKey } = generateKeys();
    console.log('üîë –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.');

    // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await login();

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API —Å –Ω–∞—à–∏–º –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º
    console.log(`‚åõ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    await createClient(clientName, publicKey);

    // 4. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ IP-–∞–¥—Ä–µ—Å
    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
    const clientData = await getClientData(clientName);

    // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è: ${clientName}`);
    const config = generateConfig(privateKey, clientData);

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.');
    return config;
  } catch (error) {
    console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ createVpnClient:', {
      message: error.message,
      stack: error.stack
    });
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
  }
};