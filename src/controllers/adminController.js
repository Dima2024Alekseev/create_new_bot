require('dotenv').config({ path: __dirname + '/../primer.env' });
const { Markup } = require('telegraf');
const User = require('../models/User');
const Question = require('../models/Question');
const { formatDate } = require('../utils/helpers');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∂–∏–º–æ–≤ –∞–¥–º–∏–Ω–∞
const adminModes = {};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
exports.checkAdmin = (ctx) => {
  return ctx.from.id === parseInt(process.env.ADMIN_ID) && 
         (!adminModes[ctx.from.id] || adminModes[ctx.from.id] === 'admin');
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const adminMainKeyboard = Markup.keyboard([
  ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìù –í–æ–ø—Ä–æ—Å—ã'],
  ['üí≥ –ü–ª–∞—Ç–µ–∂–∏', 'üîÑ –†–µ–∂–∏–º']
]).resize();

const paymentsKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback('‚è≥ –û–∂–∏–¥–∞—é—Ç', 'pending_payments'), Markup.button.callback('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ', 'active_payments')],
  [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ', 'rejected_payments'), Markup.button.callback('üìÜ –ò—Å—Ç–µ–∫–∞—é—Ç', 'expiring_payments')],
  [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')]
]);

const questionsKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback('‚è≥ –û–∂–∏–¥–∞—é—Ç', 'pending_questions'), Markup.button.callback('‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ', 'answered_questions')],
  [Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å', 'clear_questions'), Markup.button.callback('üìù –û—Ç–≤–µ—Ç–∏—Ç—å', 'answer_question')],
  [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')]
]);

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
exports.showMainMenu = async (ctx) => {
  if (!exports.checkAdmin(ctx)) return;
  
  await ctx.reply(
    'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
    adminMainKeyboard
  );
};

// –ú–µ–Ω—é –ø–ª–∞—Ç–µ–∂–µ–π
exports.showPaymentsMenu = async (ctx) => {
  if (!exports.checkAdmin(ctx)) return;
  
  await ctx.reply(
    'üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏:',
    paymentsKeyboard
  );
};

// –ú–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤
exports.showQuestionsMenu = async (ctx) => {
  if (!exports.checkAdmin(ctx)) return;
  
  await ctx.reply(
    'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏:',
    questionsKeyboard
  );
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
exports.handleAdminActions = async (ctx) => {
  if (!exports.checkAdmin(ctx)) return;

  try {
    switch (ctx.match[0]) {
      case 'pending_payments':
        await showPendingPayments(ctx);
        break;
      case 'active_payments':
        await showActivePayments(ctx);
        break;
      case 'rejected_payments':
        await showRejectedPayments(ctx);
        break;
      case 'expiring_payments':
        await showExpiringPayments(ctx);
        break;
      case 'pending_questions':
        await showPendingQuestions(ctx);
        break;
      case 'answered_questions':
        await showAnsweredQuestions(ctx);
        break;
      case 'clear_questions':
        await clearQuestions(ctx);
        break;
      case 'back_to_main':
        await exports.showMainMenu(ctx);
        break;
      default:
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
    }
  } catch (err) {
    console.error('Admin action error:', err);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function showPendingPayments(ctx) {
  const pending = await User.find({ status: 'pending' }).sort({ createdAt: -1 }).limit(50);
  
  if (!pending.length) {
    return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
  }

  const buttons = pending.map(user => [
    Markup.button.callback(
      `${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${formatDate(user.createdAt)})`,
      `user_detail_${user.userId}`
    )
  ]);

  await ctx.reply(
    `‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ (${pending.length}):`,
    Markup.inlineKeyboard([
      ...buttons,
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_payments')]
    ])
  );
}

async function showActivePayments(ctx) {
  const active = await User.find({ status: 'active' }).sort({ expireDate: 1 }).limit(50);
  
  const buttons = active.map(user => [
    Markup.button.callback(
      `${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (–¥–æ ${formatDate(user.expireDate)})`,
      `user_detail_${user.userId}`
    )
  ]);

  await ctx.reply(
    `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (${active.length}):`,
    Markup.inlineKeyboard([
      ...buttons,
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_payments')]
    ])
  );
}

async function showRejectedPayments(ctx) {
  const rejected = await User.find({ status: 'rejected' }).sort({ createdAt: -1 }).limit(50);
  
  if (!rejected.length) {
    return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
  }

  const buttons = rejected.map(user => [
    Markup.button.callback(
      `${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${formatDate(user.createdAt)})`,
      `user_detail_${user.userId}`
    )
  ]);

  await ctx.reply(
    `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (${rejected.length}):`,
    Markup.inlineKeyboard([
      ...buttons,
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_payments')]
    ])
  );
}

async function showExpiringPayments(ctx) {
  const expiring = await User.find({ 
    status: 'active',
    expireDate: { $lt: new Date(Date.now() + 7 * 86400000) }
  }).sort({ expireDate: 1 }).limit(50);

  if (!expiring.length) {
    return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é');
  }

  const buttons = expiring.map(user => {
    const daysLeft = Math.ceil((user.expireDate - new Date()) / 86400000);
    return [
      Markup.button.callback(
        `${user.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${daysLeft} –¥–Ω.)`,
        `user_detail_${user.userId}`
      )
    ];
  });

  await ctx.reply(
    `üìÜ –ü–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π (${expiring.length}):`,
    Markup.inlineKeyboard([
      ...buttons,
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_payments')]
    ])
  );
}

async function showPendingQuestions(ctx) {
  const questions = await Question.find({ status: 'pending' }).sort({ createdAt: -1 }).limit(50);
  
  if (!questions.length) {
    return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤');
  }

  const buttons = questions.map(question => [
    Markup.button.callback(
      `${question.firstName}: ${question.questionText.substring(0, 30)}...`,
      `question_detail_${question._id}`
    )
  ]);

  await ctx.reply(
    `‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (${questions.length}):`,
    Markup.inlineKeyboard([
      ...buttons,
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_questions')]
    ])
  );
}

async function showAnsweredQuestions(ctx) {
  const questions = await Question.find({ status: 'answered' }).sort({ answeredAt: -1 }).limit(50);
  
  if (!questions.length) {
    return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤');
  }

  const buttons = questions.map(question => [
    Markup.button.callback(
      `${question.firstName}: ${question.questionText.substring(0, 30)}...`,
      `question_detail_${question._id}`
    )
  ]);

  await ctx.reply(
    `‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (${questions.length}):`,
    Markup.inlineKeyboard([
      ...buttons,
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_questions')]
    ])
  );
}

async function clearQuestions(ctx) {
  await Question.deleteMany({ status: 'answered' });
  await ctx.answerCbQuery('‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—á–∏—â–µ–Ω—ã');
  await showQuestionsMenu(ctx);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
exports.switchMode = async (ctx) => {
  if (!exports.checkAdmin(ctx)) {
    return ctx.reply('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const currentMode = adminModes[ctx.from.id] || 'admin';
  const newMode = currentMode === 'admin' ? 'user' : 'admin';

  adminModes[ctx.from.id] = newMode;

  await ctx.reply(
    `üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: ${newMode === 'admin' ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 'üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`,
    Markup.removeKeyboard()
  );
  
  if (newMode === 'admin') {
    await exports.showMainMenu(ctx);
  }
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
exports.stats = async (ctx) => {
  if (!exports.checkAdmin(ctx)) {
    return ctx.reply('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  try {
    const [usersStats, questionsStats, expiringSoon] = await Promise.all([
      User.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]),
      Question.aggregate([
        { $group: { _id: '$status', count: { $sum: 1 } } }
      ]),
      User.find({ 
        status: 'active',
        expireDate: { $lt: new Date(Date.now() + 7 * 86400000) }
      }).sort({ expireDate: 1 }).limit(5)
    ]);

    let statsText = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n';
    
    statsText += 'üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n';
    usersStats.forEach(stat => {
      statsText += `- ${stat._id}: ${stat.count}\n`;
    });

    statsText += '\n‚ùì *–í–æ–ø—Ä–æ—Å—ã:*\n';
    questionsStats.forEach(stat => {
      statsText += `- ${stat._id}: ${stat.count}\n`;
    });

    statsText += '\nüîî *–ë–ª–∏–∂–∞–π—à–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è:*\n';
    if (expiringSoon.length > 0) {
      expiringSoon.forEach(user => {
        const daysLeft = Math.ceil((user.expireDate - new Date()) / 86400000);
        statsText += `- ${user.firstName}: —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π (${user.expireDate.toLocaleDateString('ru-RU')})\n`;
      });
    } else {
      statsText += '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é\n';
    }

    await ctx.replyWithMarkdown(statsText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }],
          [{ text: 'üí≥ –ü–ª–∞—Ç–µ–∂–∏', callback_data: 'pending_payments' }],
          [{ text: 'üìù –í–æ–ø—Ä–æ—Å—ã', callback_data: 'pending_questions' }]
        ]
      }
    });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
};