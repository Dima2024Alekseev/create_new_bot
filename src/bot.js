require('dotenv').config({ path: __dirname + '/../primer.env' });
const { Telegraf, session } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const connectDB = require('./config/db');
const { handleStart, checkSubscriptionStatus, extendSubscription, promptForQuestion } = require('./controllers/userController'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const { handlePhoto, handleApprove, handleReject } = require('./controllers/paymentController');
const { checkPayments, stats, switchMode } = require('./controllers/adminController');
const { handleQuestion, handleAnswer, listQuestions } = require('./controllers/questionController');
const { setupReminders } = require('./services/reminderService');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { 
    agent: null,
    handshakeTimeout: 30000
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑ –ø–µ—Ä–≤—ã—Ö)
bot.use((new LocalSession({ database: 'session_db.json' })).middleware());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
connectDB().catch(err => {
  console.error('‚ùå MongoDB connection failed:', err);
  process.exit(1);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (err) => {
  console.error('‚ö†Ô∏è Unhandled Rejection:', err);
});
process.on('uncaughtException', async (err) => {
  console.error('‚ö†Ô∏è Uncaught Exception:', err);
  await bot.stop();
  process.exit(1);
});

// ===== Middleware –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ê–î–ú–ò–ù–ê (–ü–ï–†–ï–ú–ï–©–ï–ù–û –í–´–®–ï) =====
// –≠—Ç–æ—Ç middleware –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ü–ï–†–í–´–ú –¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –µ–≥–æ –æ—Ç–≤–µ—Ç—ã
bot.use(async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
  if (ctx.from?.id === parseInt(process.env.ADMIN_ID)) {
    if (ctx.session?.awaitingAnswerFor && ctx.message?.text) {
      console.log(`[AdminMiddleware] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.session.awaitingAnswerFor}`);
      await handleAnswer(ctx, ctx.session.awaitingAnswerFor, ctx.message.text);
      ctx.session.awaitingAnswerFor = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      return; // –í–∞–∂–Ω–æ: –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    }
  }
  return next(); // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
});

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =====
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
bot.start(handleStart);
// –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï middleware –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞
bot.hears(/^[^\/].*/, handleQuestion);

// –ê–¥–º–∏–Ω—Å–∫–∏–µ
bot.command('check', checkPayments);
bot.command('stats', stats);
bot.command('questions', listQuestions);
bot.command('switchmode', switchMode);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
bot.on('photo', handlePhoto);

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (callback_data) =====
// –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
bot.action(/approve_(\d+)/, handleApprove);
bot.action(/reject_(\d+)/, handleReject);
bot.action('list_questions', listQuestions);
bot.action('switch_mode', switchMode);
bot.action('check_payments_admin', checkPayments); // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.action('show_stats_admin', stats); // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞

bot.action(/answer_(\d+)/, async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª –æ—Ç –∞–¥–º–∏–Ω–∞
  if (ctx.from.id !== parseInt(process.env.ADMIN_ID)) {
    return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  ctx.session.awaitingAnswerFor = ctx.match[1];
  await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  await ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
});

// –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('check_subscription', checkSubscriptionStatus); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"
bot.action('ask_question', promptForQuestion); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
bot.action('extend_subscription', extendSubscription); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"


// ===== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====
setupReminders(bot);

// ===== –ó–∞–ø—É—Å–∫ =====
bot.launch()
  .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Q&A + Payments)'))
  .catch(err => {
    console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  });

// Graceful shutdown
['SIGINT', 'SIGTERM'].forEach(signal => {
  process.once(signal, async () => {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...`);
    try {
      await bot.stop();
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', err);
      process.exit(1);
    }
  });
});