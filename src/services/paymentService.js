const User = require('../models/User');
const { formatDate, sendTelegramMessage } = require('../utils/helpers');

class PaymentService {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
   */
  static async createPayment(userId, photoId, userData) {
    return await User.findOneAndUpdate(
      { userId },
      {
        userId,
        ...userData,
        paymentPhotoId: photoId,
        status: 'pending',
        startDate: new Date()
      },
      { upsert: true, new: true }
    );
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º
   */
  static async approvePayment(userId) {
    const expireDate = new Date();
    expireDate.setMonth(expireDate.getMonth() + 1); // +1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏

    const user = await User.findOneAndUpdate(
      { userId },
      {
        status: 'active',
        expireDate,
        lastReminder: null // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      },
      { new: true }
    );

    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN-–¥–∞–Ω–Ω—ã—Ö
    const vpnCredentials = this.generateVpnCredentials(user);

    return {
      user,
      message: `üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ${formatDate(expireDate)}!\n\n` +
        `–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n` +
        `–°–µ—Ä–≤–µ—Ä: ${vpnCredentials.server}\n` +
        `–õ–æ–≥–∏–Ω: ${vpnCredentials.login}\n` +
        `–ü–∞—Ä–æ–ª—å: ${vpnCredentials.password}`
    };
  }

  /**
   * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  static async rejectPayment(userId) {
    const user = await User.findOneAndUpdate(
      { userId },
      { status: 'rejected' },
      { new: true }
    );

    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    return {
      user,
      message: '‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  static async checkActiveSubscriptions() {
    return await User.find({
      status: 'active',
      expireDate: { $gt: new Date() }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ pending-–∑–∞—è–≤–æ–∫
   */
  static async getPendingPayments() {
    return await User.find({ status: 'pending' });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN-–¥–∞–Ω–Ω—ã—Ö
   */
  static generateVpnCredentials(user) {
    return {
      server: 'vpn.example.com',
      login: user.username || `user${user.userId}`,
      password: this.generatePassword(),
      configLink: this.generateConfigLink(user.userId)
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
   */
  static generatePassword() {
    return Math.random().toString(36).slice(-8) +
      Math.random().toString(36).slice(-8);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥
   */
  static generateConfigLink(userId) {
    return `https://api.vpn-service.com/config/${userId}/${this.generateToken()}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
   */
  static generateToken() {
    return require('crypto').randomBytes(16).toString('hex');
  }
}

module.exports = PaymentService;