const User = require('../models/User');
const { Markup } = require('telegraf');
const { checkAdmin } = require('./adminController');
const { formatDate } = require('../utils/helpers'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ formatDate –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

exports.handlePhoto = async (ctx) => {
  const { id, first_name, username } = ctx.from;
  
  if (id === parseInt(process.env.ADMIN_ID) && checkAdmin(ctx)) {
    return ctx.reply('–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
  }
  const photo = ctx.message.photo.pop();
  
  await User.findOneAndUpdate(
    { userId: id },
    {
      userId: id,
      username: username || first_name,
      firstName: first_name,
      paymentPhotoId: photo.file_id,
      status: 'pending'
    },
    { upsert: true, new: true }
  );
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${id}`),
    Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)
  ]);
  await ctx.telegram.sendPhoto(
    process.env.ADMIN_ID,
    photo.file_id,
    {
      caption: `üì∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç ${first_name} (@${username || '–Ω–µ—Ç'})\nID: ${id}`,
      ...keyboard
    }
  );
  await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
};

exports.handleApprove = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  const userId = parseInt(ctx.match[1]);

  // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Ç–µ–∫—É—â—É—é expireDate
  const user = await User.findOne({ userId });

  let newExpireDate = new Date(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞

  if (user && user.expireDate && user.expireDate > new Date()) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –µ–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
    newExpireDate = new Date(user.expireDate); // –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –º–µ—Å—è—Ü –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π –¥–∞—Ç–µ
  newExpireDate.setMonth(newExpireDate.getMonth() + 1);
  newExpireDate.setHours(23, 59, 59, 999); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è

  await User.findOneAndUpdate(
    { userId },
    {
      status: 'active',
      expireDate: newExpireDate, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é newExpireDate
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å paymentPhotoId –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –∑–¥–µ—Å—å
      paymentPhotoId: null // –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
    },
    { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
  );

  await ctx.telegram.sendMessage(
    userId,
    `üéâ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n` +
    `–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${formatDate(newExpireDate, true)}\n\n` // –ò—Å–ø–æ–ª—å–∑—É–µ–º formatDate —Å –≤—Ä–µ–º–µ–Ω–µ–º
  );
  await ctx.answerCbQuery('‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç');
  await ctx.deleteMessage();
};

exports.handleReject = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }
  const userId = parseInt(ctx.match[1]);
  await User.findOneAndUpdate(
    { userId },
    { status: 'rejected' }
  );
  await ctx.telegram.sendMessage(
    userId,
    '‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω\n\n' +
    '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
    '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
    '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n' +
    '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑.'
  );
  await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
  await ctx.deleteMessage();
};