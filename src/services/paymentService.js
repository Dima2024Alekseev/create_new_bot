const User = require('../models/User');
const { Markup } = require('telegraf');
const { checkAdmin } = require('../utils/auth');
const { formatDate, escapeMarkdown } = require('../utils/helpers');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.
 * –¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã.
 */
exports.handlePhoto = async (ctx) => {
  const { id, first_name, username } = ctx.from;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (id === parseInt(process.env.ADMIN_ID)) {
    return ctx.reply('–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!ctx.session?.expectingPaymentPhoto) {
    return ctx.replyWithMarkdown(
      '‚ö†Ô∏è *–ü–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã:*\n\n' +
      '1. –ù–∞–∂–º–∏—Ç–µ *"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"*\n' +
      '2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n' +
      '3. –ù–∞–∂–º–∏—Ç–µ *"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"*\n' +
      '4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
      '–°–ª—É—á–∞–π–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è!'
    );
  }

  const photo = ctx.message.photo.pop();

  try {
    const user = await User.findOneAndUpdate(
      { userId: id },
      {
        userId: id,
        username: username || first_name,
        firstName: first_name,
        paymentPhotoId: photo.file_id,
        paymentPhotoDate: new Date(),
        status: 'pending'
      },
      { upsert: true, new: true }
    );

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    ctx.session.expectingPaymentPhoto = false;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    let userDisplay = '';
    const safeFirstName = escapeMarkdown(first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');

    if (username) {
      userDisplay = `${safeFirstName} (@${escapeMarkdown(username)})`;
    } else {
      userDisplay = `${safeFirstName} (–±–µ–∑ username)`;
    }

    if (!first_name && !username) {
      userDisplay = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await ctx.telegram.sendPhoto(
      process.env.ADMIN_ID,
      photo.file_id,
      {
        caption: `üì∏ *–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
          `–ò–º—è: ${userDisplay}\n` +
          `ID: ${id}\n` +
          `–°—Ç–∞—Ç—É—Å: ${user.status}\n` +
          `–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: ${user.expireDate ? formatDate(user.expireDate) : '–Ω–µ—Ç'}`,
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_${id}`),
            Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)
          ]
        ])
      }
    );

    await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –∑–∞—â–∏—Ç–æ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
exports.handleApprove = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const userId = parseInt(ctx.match[1]);

  try {
    const user = await User.findOne({ userId });
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    if (user.status === 'active' && user.expireDate > new Date()) {
      await ctx.answerCbQuery('‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞');
      return ctx.editMessageText(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName || 'ID:' + userId} —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–æ ${formatDate(user.expireDate)}.\n` +
        '–ù–æ–≤—ã–π —Å—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É.',
        Markup.inlineKeyboard([
          [
            Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—è—Ü', `force_approve_${userId}`),
            Markup.button.callback('‚úñÔ∏è –û—Ç–º–µ–Ω–∞', 'cancel_action')
          ]
        ])
      );
    }

    let newExpireDate = new Date();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∏—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (user.expireDate && user.expireDate > newExpireDate) {
      newExpireDate = new Date(user.expireDate);
    }
    
    newExpireDate.setMonth(newExpireDate.getMonth() + 1);
    newExpireDate.setHours(23, 59, 59, 999);

    const updatedUser = await User.findOneAndUpdate(
      { userId },
      {
        status: 'active',
        expireDate: newExpireDate,
        paymentPhotoId: null,
        paymentPhotoDate: null,
        $inc: { subscriptionCount: 1 }
      },
      { new: true }
    );

    let message = `üéâ *–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!*\n\n` +
      `–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ *${formatDate(newExpireDate, true)}*`;

    // –î–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if (updatedUser.subscriptionCount === 1) {
      message += `\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:`;
      await ctx.telegram.sendMessage(
        userId,
        message,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìÅ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª VPN', `get_vpn_config_${userId}`)]
        ])
      );
    } else {
      // –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
      await ctx.telegram.sendMessage(userId, message);
    }

    await ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    await ctx.deleteMessage();

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è ${userId}:`, error);
    await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞! –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏');
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.');
  }
};

/**
 * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –∑–∞—â–∏—Ç–æ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
exports.handleReject = async (ctx) => {
  if (!checkAdmin(ctx)) {
    return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');
  }

  const userId = parseInt(ctx.match[1]);

  try {
    const user = await User.findOne({ userId });

    // –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if (user.status === 'active' && user.expireDate > new Date()) {
      await User.updateOne(
        { userId },
        { paymentPhotoId: null, paymentPhotoDate: null }
      );
      
      await ctx.answerCbQuery('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      return ctx.editMessageText(
        `–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞* (–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formatDate(user.expireDate)}).`,
        { parse_mode: 'Markdown' }
      );
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    await User.updateOne(
      { userId },
      {
        status: 'rejected',
        paymentPhotoId: null,
        paymentPhotoDate: null
      }
    );

    await ctx.telegram.sendMessage(
      userId,
      '‚ùå *–í–∞—à –ø–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω*\n\n' +
      '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
      '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
      '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n' +
      '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
      '–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ *"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"*',
      { parse_mode: 'Markdown' }
    );

    await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
    await ctx.deleteMessage();

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è ${userId}:`, error);
    await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞!');
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.');
  }
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (–µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞)
 */
exports.handleForceApprove = async (ctx) => {
  if (!checkAdmin(ctx)) return ctx.answerCbQuery('üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞');

  const userId = parseInt(ctx.match[1]);

  try {
    const user = await User.findOne({ userId });
    let newExpireDate = new Date(user.expireDate);
    newExpireDate.setMonth(newExpireDate.getMonth() + 1);

    await User.updateOne(
      { userId },
      {
        paymentPhotoId: null,
        paymentPhotoDate: null,
        expireDate: newExpireDate,
        $inc: { subscriptionCount: 1 }
      }
    );

    await ctx.telegram.sendMessage(
      userId,
      `‚ÑπÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ ${formatDate(newExpireDate)}`
    );

    await ctx.answerCbQuery('‚úÖ –ú–µ—Å—è—Ü –¥–æ–±–∞–≤–ª–µ–Ω');
    await ctx.deleteMessage();

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è ${userId}:`, error);
    await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞!');
  }
};