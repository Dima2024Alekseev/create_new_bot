// src/utils/helpers.js
const { getConfig } = require('../services/configService');
/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã VPN —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} [name=''] - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è).
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã.
 */
exports.paymentDetails = async (userId, name = '') => {
  const price = await getConfig('vpn_price', 132);
  const phone = await getConfig('payment_phone', '+7 (995) 431-34-57');
  const cardNumber = await getConfig('payment_card_number', '2202 2050 2287 6913');
  const bankName = await getConfig('payment_bank_name', '–°–±–µ—Ä–±–∞–Ω–∫');

  const comment = name
    ? `VPN ${name} ${userId}`
    : `VPN ${userId}`;

  return `
      üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*

      üì± –°–ë–ü (–ø–æ –Ω–æ–º–µ—Ä—É):
      \`${phone}\`
      üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞:
      \`${cardNumber}\` (${bankName})
      *–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É:*
      \`${comment}\`
      _–¶–µ–Ω–∞: ${price} —Ä—É–±._
  `;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì' –∏–ª–∏ '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú'.
 * @param {Date|string} date - –î–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {boolean} [withTime=false] - –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.
 */
exports.formatDate = (date, withTime = false) => {
  const options = {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  };

  if (withTime) {
    options.hour = '2-digit';
    options.minute = '2-digit';
  }

  return new Date(date).toLocaleString('ru-RU', options);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –≤ —Å—Ç—Ä–æ–∫—É '–î–¥ –ß—á –ú–º'.
 * @param {number} ms - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
 */
exports.formatDuration = (ms) => {
  const days = Math.floor(ms / 86400000);
  const hours = Math.floor((ms % 86400000) / 3600000);
  const mins = Math.round((ms % 3600000) / 60000);

  return `${days}–¥ ${hours}—á ${mins}–º`;
};

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 –≤ —Å—Ç—Ä–æ–∫–µ.
 * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
 * @returns {string} - –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
exports.escapeMarkdown = (text) => {
  if (typeof text !== 'string') return text;
  const charsToEscape = /[_*[\]()~`>#+\-=|{}.!]/g;
  return text.replace(charsToEscape, '\\$&');
};

/**
 * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É.
 * @param {string} str - –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
 * @returns {string} - –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
 */
exports.transliterate = (str) => {
  const rus = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'YO', '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'TS', '–ß': 'CH', '–®': 'SH', '–©': 'SHCH', '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'YU', '–Ø': 'YA'
  };

  return str.split('').map(function (char) {
    return rus[char] || char;
  }).join('');
};