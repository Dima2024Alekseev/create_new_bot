const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
    BASE_URL: 'http://37.233.85.212:51821',
    PASSWORD: process.env.WG_API_PASSWORD,
    SERVER_PUBLIC_KEY: process.env.WG_SERVER_PUBLIC_KEY,
    TIMEOUT: 30000
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è cookies
let sessionCookies = null;

const api = axios.create({
    baseURL: API_CONFIG.BASE_URL,
    timeout: API_CONFIG.TIMEOUT,
    headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è cookies
api.interceptors.request.use(config => {
    if (sessionCookies) {
        config.headers.Cookie = sessionCookies;
        console.log('[DEBUG] –î–æ–±–∞–≤–ª—è–µ–º cookies –≤ –∑–∞–ø—Ä–æ—Å:', sessionCookies);
    }
    return config;
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies
api.interceptors.response.use(response => {
    const cookies = response.headers['set-cookie'] || response.headers['Set-Cookie'];
    if (cookies) {
        sessionCookies = Array.isArray(cookies) ? cookies.join('; ') : cookies;
        console.log('[DEBUG] –ü–æ–ª—É—á–µ–Ω—ã cookies:', sessionCookies);
    }
    return response;
}, error => {
    console.error('[DEBUG] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
        status: error.response?.status,
        headers: error.response?.headers,
        data: error.response?.data
    });
    return Promise.reject(error);
});

async function login() {
    try {
        console.log('[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        const response = await api.post('/api/session', {
            password: API_CONFIG.PASSWORD
        }, {
            validateStatus: (status) => status === 204,
            transformResponse: [(data) => data]
        });
        if (!sessionCookies) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cookies –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
        console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return true;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É: ${error.message}`);
    }
}

async function createClient(clientName) {
    try {
        console.log(`[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
        const response = await api.post('/api/wireguard/client', {
            name: clientName,
            allowedIPs: '10.8.0.0/24'
        });
        console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', {
            status: error.response?.status,
            data: error.response?.data
        });
        throw error;
    }
}

async function getClientData(clientName) {
    try {
        console.log(`[DEBUG] –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
        const response = await api.get('/api/wireguard/client');
        const client = response.data.find(c => c.name === clientName);

        if (!client) {
            throw new Error(`–ö–ª–∏–µ–Ω—Ç "${clientName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        return client;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
        throw error;
    }
}

async function getClientConfigFromText(clientId) {
    try {
        console.log(`[DEBUG] –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ID: ${clientId}`);
        const response = await api.get(`/api/wireguard/client/${clientId}/configuration`, {
            responseType: 'text'
        });
        const configText = response.data;
        const privateKeyMatch = configText.match(/PrivateKey = (.+)/);
        const presharedKeyMatch = configText.match(/PresharedKey = (.+)/);

        if (!privateKeyMatch) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω PrivateKey –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }
        return {
            privateKey: privateKeyMatch[1].trim(),
            presharedKey: presharedKeyMatch?.[1]?.trim()
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', {
            status: error.response?.status,
            data: error.response?.data
        });
        throw error;
    }
}

function generateConfig(configData) {
    if (!configData.privateKey || !configData.address || !API_CONFIG.SERVER_PUBLIC_KEY) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞');
    }

    return `[Interface]
PrivateKey = ${configData.privateKey}
Address = ${configData.address}/24
DNS = 1.1.1.1

[Peer]
PublicKey = ${API_CONFIG.SERVER_PUBLIC_KEY}
${configData.presharedKey ? `PresharedKey = ${configData.presharedKey}` : ''}
Endpoint = ${API_CONFIG.BASE_URL.replace('http://', '').replace(':51821', '')}:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25`;
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
async function disableClient(clientId) {
    try {
        console.log(`[DEBUG] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID: ${clientId}`);
        await api.put(`/api/wireguard/client/${clientId}/disable`);
        console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç —Å ID "${clientId}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', {
            status: error.response?.status,
            data: error.response?.data
        });
        throw error;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–ö–õ–Æ–ß–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
async function enableClient(clientId) {
    try {
        console.log(`[DEBUG] –í–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID: ${clientId}`);
        await api.put(`/api/wireguard/client/${clientId}/enable`);
        console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç —Å ID "${clientId}" —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', {
            status: error.response?.status,
            data: error.response?.data
        });
        throw error;
    }
}

exports.createVpnClient = async (clientName) => {
    try {
        console.log(`‚åõ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
        await login();
        await createClient(clientName);
        await new Promise(resolve => setTimeout(resolve, 1000));
        const clientData = await getClientData(clientName);
        const { privateKey, presharedKey } = await getClientConfigFromText(clientData.id);
        const config = generateConfig({
            privateKey,
            presharedKey,
            address: clientData.address
        });
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
        return config;
    } catch (error) {
        console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
            message: error.message,
            stack: error.stack
        });
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
    }
};

exports.revokeVpnClient = async (clientName) => {
    try {
        console.log(`‚åõ –ù–∞—á–∞–ª–æ –æ—Ç–∑—ã–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
        await login();
        const clientData = await getClientData(clientName);
        await disableClient(clientData.id);
        console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω.`);
    } catch (error) {
        console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
            message: error.message,
            stack: error.stack
        });
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
    }
};

exports.enableVpnClient = async (clientName) => {
    try {
        console.log(`‚åõ –ù–∞—á–∞–ª–æ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
        await login();
        const clientData = await getClientData(clientName);
        await enableClient(clientData.id);
        console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω.`);
    } catch (error) {
        console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
            message: error.message,
            stack: error.stack
        });
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å VPN-–∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
    }
};