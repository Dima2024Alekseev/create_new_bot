const User = require('../models/User');
const { Markup } = require('telegraf');
const { formatDate, escapeMarkdown, transliterate } = require('../utils/helpers');
const { createVpnClient } = require('./vpnService');
const path = require('path');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.
 */
exports.processNewPaymentPhoto = async (ctx, id, first_name, username, photo) => {
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    await User.findOneAndUpdate(
        { userId: id },
        {
            userId: id,
            username: username || first_name,
            firstName: first_name,
            paymentPhotoId: photo.file_id,
            paymentPhotoDate: new Date(),
            status: 'pending'
        },
        { upsert: true, new: true }
    );
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `approve_${id}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${id}`)
    ]);
    // –ù–û–í–û–ï: –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let userDisplay = '';
    const safeFirstName = escapeMarkdown(first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
    if (username) {
        userDisplay = `${safeFirstName} (@${escapeMarkdown(username)})`;
    } else {
        userDisplay = `${safeFirstName} (–±–µ–∑ username)`;
    }
    if (!first_name && !username) {
        userDisplay = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`;
    }
    await ctx.telegram.sendPhoto(
        process.env.ADMIN_ID,
        photo.file_id,
        {
            caption: `üì∏ *–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n` +
                `–ò–º—è: ${userDisplay}\n` +
                `ID: ${id}`,
            parse_mode: 'Markdown',
            ...keyboard
        }
    );
};

/**
 * –û–¥–æ–±—Ä—è–µ—Ç –ø–ª–∞—Ç—ë–∂, –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É, —Å–æ–∑–¥–∞–µ—Ç VPN-–∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
exports.approvePayment = async (ctx, userId) => {
    const user = await User.findOne({ userId });
    
    if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    let newExpireDate;
    const now = new Date();

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç—ã
    if (user.status === 'active' && user.expireDate && user.expireDate > now) {
        newExpireDate = new Date(user.expireDate);
        newExpireDate.setMonth(newExpireDate.getMonth() + 1);
    } else {
        // –ò–Ω–∞—á–µ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        newExpireDate = now;
        newExpireDate.setMonth(newExpireDate.getMonth() + 1);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    newExpireDate.setHours(23, 59, 59, 999);

    const updatedUser = await User.findOneAndUpdate(
        { userId },
        {
            status: 'active',
            expireDate: newExpireDate,
            paymentPhotoId: null,
            paymentPhotoDate: null,
            $inc: { subscriptionCount: 1 }
        },
        { new: true, upsert: true }
    );

    await ctx.answerCbQuery('‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç');
    await ctx.deleteMessage();

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    if (updatedUser.subscriptionCount === 1) {
        try {
            const clientName = (updatedUser.username ? transliterate(updatedUser.username).replace(/[^a-zA-Z0-9_]/g, '') : `telegram_${userId}`) || `telegram_${userId}`;
            const configContent = await createVpnClient(clientName);
            
            await ctx.telegram.sendMessage(
                userId,
                `üéâ *–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!* üéâ\n\n` +
                `–î–æ—Å—Ç—É–ø –∫ VPN –∞–∫—Ç–∏–≤–µ–Ω –¥–æ *${formatDate(newExpireDate, true)}*\n\n` +
                `üìÅ –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN:`,
                { parse_mode: 'Markdown' }
            );

            await ctx.telegram.sendDocument(
                userId,
                { source: Buffer.from(configContent), filename: `${clientName}.conf` }
            );

            const videoPath = path.join(__dirname, '../videos/instruction.mp4');
            await ctx.telegram.sendVideo(
                userId,
                { source: videoPath },
                { caption: 'üé¨ *–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è* –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:' }
            );

            let userName = updatedUser.firstName || updatedUser.username || '–ë–µ–∑ –∏–º–µ–Ω–∏';
            if (updatedUser.username) {
                userName = `${userName} (@${updatedUser.username})`;
            }

            await ctx.telegram.sendMessage(
                process.env.ADMIN_ID,
                `üéâ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* üéâ\n\n` +
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName} (ID: ${userId}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.`
            );

            await ctx.telegram.sendMessage(
                userId,
                '–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ, —É–¥–∞–ª–æ—Å—å –ª–∏ –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN:',
                Markup.inlineKeyboard([
                    [
                        Markup.button.callback('‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª', `vpn_configured_${userId}`),
                        Markup.button.callback('‚ùå –ù–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π', `vpn_failed_${userId}`)
                    ]
                ])
            );
        } catch (vpnError) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ VPN –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è ${userId}:`, vpnError);
            await ctx.telegram.sendMessage(
                userId,
                `‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN.*` +
                `\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
            );
            await ctx.telegram.sendMessage(
                process.env.ADMIN_ID,
                `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. ` +
                `–°–æ–æ–±—â–∏ –µ–º—É, —á—Ç–æ —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.`
            );
        }
    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const message = `üéâ *–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!* üéâ\n\n` +
            `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ *${formatDate(newExpireDate, true)}*.`;
        await ctx.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' });
    }
};

/**
 * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–ª–∞—Ç—ë–∂ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {object} ctx - –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegraf.
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
exports.rejectPayment = async (ctx, userId) => {
    await User.findOneAndUpdate(
        { userId },
        {
            status: 'rejected',
            paymentPhotoId: null,
            paymentPhotoDate: null
        }
    );
    await ctx.telegram.sendMessage(
        userId,
        '‚ùå *–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω*\n\n' +
        '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
        '- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞\n' +
        '- –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–ª–∞—Ç–µ–∂—É\n' +
        '- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n' +
        '*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –µ—â—ë —Ä–∞–∑.*',
        { parse_mode: 'Markdown' }
    );
    await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
    await ctx.deleteMessage();
};